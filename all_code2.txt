--- File: userapp\src\app\about\page.tsx ---

'use client';

import { useState, useEffect } from 'react';
import { MainLayout } from '@/components/main-layout';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card';
import { DataService } from '@/services/dataService';
import { HomeCarousel } from '@/components/home-carousel';
import { bannerImages } from '@/data/bannerImages';
import { Button } from '@/components/ui/button';
import type { NavItem } from '@/data/categories';

export default function AboutPage() {
  const [categories, setCategories] = useState<NavItem[]>([]);
  const [shouldThrow, setShouldThrow] = useState(false);

  useEffect(() => {
    DataService.getCategories().then(setCategories);
  }, []);

  if (shouldThrow) {
    throw new Error('This is a test to see the error page.');
  }

  return (
    <MainLayout categories={categories}>
      <div className='space-y-8'>
        <HomeCarousel bannerImages={bannerImages} />
        <Card className="w-full max-w-3xl mx-auto">
          <CardHeader>
            <CardTitle className="text-3xl font-headline md:text-5xl text-center text-primary">About Us</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-center text-lg">
              This page tells you a little bit about us. We are passionate about creating beautiful and functional user interfaces.
            </p>
          </CardContent>
          <CardFooter className="flex justify-center">
            <Button variant="destructive" onClick={() => setShouldThrow(true)}>
              Test Error Page
            </Button>
          </CardFooter>
        </Card>
      </div>
    </MainLayout>
  )
}


--- File: userapp\src\app\admin\page.tsx ---


'use client';

import { useEffect, useState } from 'react';
import { useAuthStore, type Order } from '@/store/authStore';
import { auth } from '@/lib/firebase';
import { useRouter } from 'next/navigation';

import { MainLayout } from '@/components/main-layout';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { Loader2 } from 'lucide-react';

export default function AdminDashboardPage() {
  const router = useRouter();
  const { isLoggedIn, isLoading } = useAuthStore();
  const { toast } = useToast();

  const [orders, setOrders] = useState<Order[]>([]);
  const [loadingOrders, setLoadingOrders] = useState(true);
  const [updatingOrderId, setUpdatingOrderId] = useState<string | null>(null);

  useEffect(() => {
    if (!isLoading && !isLoggedIn) {
      router.push('/login');
    }
  }, [isLoggedIn, isLoading, router]);

  const fetchOrders = async () => {
    setLoadingOrders(true);
    const currentUser = auth.currentUser;
    if (!currentUser) {
      setLoadingOrders(false);
      return;
    }
    try {
      const token = await currentUser.getIdToken();
      const response = await fetch('/api/admin/orders', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        throw new Error('Failed to fetch orders');
      }

      const data = await response.json();
      setOrders(data);
    } catch (error) {
      console.error(error);
      toast({
        variant: "destructive",
        title: "Error fetching orders",
        description: "Could not load the list of orders. Please try again."
      });
    } finally {
      setLoadingOrders(false);
    }
  };

  useEffect(() => {
    if (isLoggedIn) {
      fetchOrders();
    }
  }, [isLoggedIn]);

  const handleStatusChange = async (orderId: string, newStatus: string) => {
    setUpdatingOrderId(orderId);
    const currentUser = auth.currentUser;
    if (!currentUser) return;
    
    try {
      const token = await currentUser.getIdToken();
      const response = await fetch(`/api/admin/orders/${orderId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({ status: newStatus }),
      });

      if (!response.ok) {
        throw new Error('Failed to update order status');
      }
      
      // Update local state to reflect the change immediately
      setOrders(prevOrders => prevOrders.map(o => o.id === orderId ? { ...o, status: newStatus as Order['status'] } : o));

      toast({
        title: "Status Updated",
        description: `Order #${orderId.slice(-6)} status set to ${newStatus}. A notification will be sent.`,
      });

    } catch (error) {
      console.error(error);
      toast({
        variant: "destructive",
        title: "Update Failed",
        description: "Could not update the order status. Please try again."
      });
    } finally {
      setUpdatingOrderId(null);
    }
  };
  
  if (isLoading || loadingOrders) {
    return (
        <MainLayout>
            <div className="flex justify-center items-center h-64">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
            </div>
        </MainLayout>
    );
  }

  return (
    <MainLayout>
      <div className="w-full max-w-6xl mx-auto">
        <Card>
          <CardHeader>
            <CardTitle>Admin Order Dashboard</CardTitle>
            <CardDescription>
              This page is for testing the customer notification function. Change an order's status here to trigger the `onOrderStatusUpdate` Cloud Function, which sends a push notification to the customer. To see newly placed orders, click the "Refresh Orders" button.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Order ID</TableHead>
                  <TableHead>Date</TableHead>
                  <TableHead>Customer ID</TableHead>
                  <TableHead>Total</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {orders.map((order) => (
                  <TableRow key={order.id}>
                    <TableCell className="font-medium">#{order.id.slice(-6)}</TableCell>
                    <TableCell>{new Date(order.date).toLocaleDateString()}</TableCell>
                    <TableCell>...{order.customerId?.slice(-10)}</TableCell>
                    <TableCell>₹{order.total.toFixed(2)}</TableCell>
                    <TableCell>{order.status}</TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                         <Select
                           defaultValue={order.status}
                           onValueChange={(newStatus) => handleStatusChange(order.id, newStatus)}
                           disabled={updatingOrderId === order.id}
                         >
                            <SelectTrigger className="w-[180px]">
                              <SelectValue placeholder="Change status" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="Processing">Processing</SelectItem>
                              <SelectItem value="Shipped">Shipped</SelectItem>
                              <SelectItem value="Out for Delivery">Out for Delivery</SelectItem>
                              <SelectItem value="Delivered">Delivered</SelectItem>
                              <SelectItem value="Completed">Completed</SelectItem>
                            </SelectContent>
                          </Select>
                          {updatingOrderId === order.id && <Loader2 className="h-4 w-4 animate-spin" />}
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
           <CardFooter>
            <Button onClick={fetchOrders} variant="outline" disabled={loadingOrders}>
              {loadingOrders ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Refresh Orders
            </Button>
          </CardFooter>
        </Card>
      </div>
    </MainLayout>
  );
}


--- File: userapp\src\app\api\admin\orders\route.ts ---


'use server';

import { NextResponse } from 'next/server';
import { adminAuth, adminDb } from '@/lib/firebase-admin';

// This is a protected route. In a real app, you would check for an admin custom claim.
// For example:
// const claims = decodedToken.claims;
// if (claims.role !== 'admin') {
//   return NextResponse.json({ message: 'Forbidden: Admins only.' }, { status: 403 });
// }

async function verifyUser(request: Request) {
    const authorization = request.headers.get('Authorization');
    if (!authorization?.startsWith('Bearer ')) return null;
    const token = authorization.split('Bearer ')[1];
    try {
        return await adminAuth.verifyIdToken(token);
    } catch (error) {
        console.error("Token verification failed", error);
        return null;
    }
}

export async function GET(request: Request) {
  const decodedToken = await verifyUser(request);
  if (!decodedToken) {
    return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
  }

  try {
    const ordersRef = adminDb.collection('orders');
    const querySnapshot = await ordersRef.orderBy('date', 'desc').get();
    
    const orders = querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
    }));

    return NextResponse.json(orders);

  } catch (error: any) {
    console.error('Error fetching all orders:', error);
    return NextResponse.json({ message: 'Error fetching orders', error: error.message }, { status: 500 });
  }
}


--- File: userapp\src\app\api\admin\orders\[orderId]\route.ts ---


'use server';

import { NextResponse } from 'next/server';
import { adminAuth, adminDb } from '@/lib/firebase-admin';

// This is a protected route. In a real app, you would check for an admin custom claim.
// For example:
// const claims = decodedToken.claims;
// if (claims.role !== 'admin') {
//   return NextResponse.json({ message: 'Forbidden: Admins only.' }, { status: 403 });
// }

async function verifyUser(request: Request) {
    const authorization = request.headers.get('Authorization');
    if (!authorization?.startsWith('Bearer ')) return null;
    const token = authorization.split('Bearer ')[1];
    try {
        return await adminAuth.verifyIdToken(token);
    } catch (error) {
        console.error("Token verification failed", error);
        return null;
    }
}


// PUT handler for updating an order's status
export async function PUT(request: Request, { params }: { params: { orderId: string } }) {
    const decodedToken = await verifyUser(request);
    if (!decodedToken) {
        return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
    }
    
    const { orderId } = params;
    const { status } = await request.json();

    if (!status) {
        return NextResponse.json({ message: 'Missing required status field' }, { status: 400 });
    }

    try {
        const orderDocRef = adminDb.collection('orders').doc(orderId);
        const orderDoc = await orderDocRef.get();

        if (!orderDoc.exists) {
            return NextResponse.json({ message: 'Order not found' }, { status: 404 });
        }

        await orderDocRef.update({ status });

        console.log(`Admin ${decodedToken.uid} updated order ${orderId} to status ${status}`);

        return NextResponse.json({ success: true, message: 'Order status updated successfully' });
        
    } catch (error: any) {
        console.error(`Error updating order ${orderId}:`, error);
        return NextResponse.json({ message: 'Error updating order status', error: error.message }, { status: 500 });
    }
}


--- File: userapp\src\app\api\auth\register\route.ts ---


'use server';

import { NextResponse } from 'next/server';
import { adminAuth, adminDb } from '@/lib/firebase-admin';
import { FieldValue } from 'firebase-admin/firestore';

export async function POST(request: Request) {
    try {
        // The adminAuth object is now imported from a reliable, single-initialization source.
        if (!adminAuth || !adminDb) {
            console.error("CRITICAL: Firebase Admin SDK is not initialized. Check server logs for the specific error from firebase-admin.ts.");
            return NextResponse.json({ message: 'Server configuration error: Firebase Admin not initialized.' }, { status: 500 });
        }

        const { name, email, phone, password } = await request.json();

        // Ensure phone number is in E.164 format for Firebase
        const formattedPhone = phone.startsWith('+') ? phone : `+91${phone}`;

        let userRecord;
        try {
            // Step 1: Create the user in Firebase Auth
            userRecord = await adminAuth.createUser({
                email,
                password,
                displayName: name,
                phoneNumber: formattedPhone,
            });

            // Step 2: Set a custom claim for the user's role
            await adminAuth.setCustomUserClaims(userRecord.uid, { role: 'buyer' });

            // Step 3: Create a document in the 'buyers' collection in Firestore
            const buyerDocRef = adminDb.collection('buyers').doc(userRecord.uid);
            await buyerDocRef.set({
                uid: userRecord.uid,
                name,
                email,
                phone: formattedPhone,
                role: 'buyer',
                createdAt: FieldValue.serverTimestamp(),
            });

            return NextResponse.json({ uid: userRecord.uid });

        } catch (error: any) {
             // If something goes wrong after user creation (e.g., Firestore fails),
             // it's good practice to delete the created Auth user to keep things consistent.
            if (userRecord) {
                await adminAuth.deleteUser(userRecord.uid);
            }

            if (error.code === 'auth/email-already-exists') {
                return NextResponse.json({ message: 'A user with this email already exists.' }, { status: 409 });
            }
            if (error.code === 'auth/invalid-phone-number') {
                return NextResponse.json({ message: 'The phone number is not valid.' }, { status: 400 });
            }
             if (error.code === 'auth/invalid-password') {
                return NextResponse.json({ message: 'The password is not valid. It must be at least 6 characters long.' }, { status: 400 });
            }
            console.error('Error creating user in Firebase:', error);
            return NextResponse.json({ message: 'Error creating user.', error: error.message }, { status: 500 });
        }

    } catch (error: any) {
        console.error('Unexpected error in registration route:', error);
        return NextResponse.json({ message: 'An unexpected server error occurred.' }, { status: 500 });
    }
}


--- File: userapp\src\app\api\auth\session\route.ts ---


'use server';

import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';
import { adminAuth } from '@/lib/firebase-admin';

// This is the endpoint the client-side hits to create the session cookie.
export async function POST(request: Request) {
  const { idToken } = await request.json();

  // Set session expiration to 5 days.
  const expiresIn = 60 * 60 * 24 * 5 * 1000;

  try {
    const sessionCookie = await adminAuth.createSessionCookie(idToken, { expiresIn });
    
    cookies().set('__session', sessionCookie, {
      maxAge: expiresIn / 1000,
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      path: '/',
      sameSite: 'lax',
    });

    return NextResponse.json({ status: 'success' });
  } catch (error) {
    console.error('Error creating session cookie:', error);
    return NextResponse.json({ status: 'error', message: 'Could not create session.' }, { status: 401 });
  }
}

// This is the endpoint for logging out / deleting the cookie.
export async function DELETE() {
  cookies().delete('__session');
  return NextResponse.json({ status: 'success' });
}


--- File: userapp\src\app\api\orders\route.ts ---


'use server';

import { NextResponse } from 'next/server';
import { adminAuth, adminDb } from '@/lib/firebase-admin';
import { FieldValue } from 'firebase-admin/firestore';
import type { Order, CartItem, Address } from '@/store/authStore';

interface OrderPayload {
    items: CartItem[];
    total: number;
    shippingAddress: Address;
    paymentMethod: string;
    customerPhone: string;
}

export async function POST(request: Request) {
  try {
    const authorization = request.headers.get('Authorization');
    if (!authorization?.startsWith('Bearer ')) {
        return NextResponse.json({ message: 'Unauthorized: Missing or invalid token.' }, { status: 401 });
    }

    const token = authorization.split('Bearer ')[1];
    const decodedToken = await adminAuth.verifyIdToken(token);
    const uid = decodedToken.uid;
    
    const body: OrderPayload = await request.json();

    // Basic validation
    if (!body.items || body.items.length === 0 || !body.total || !body.shippingAddress) {
        return NextResponse.json({ message: 'Invalid order data.' }, { status: 400 });
    }
    
    const deliveryDate = new Date();
    deliveryDate.setDate(deliveryDate.getDate() + 3);

    const newOrder: Order = {
        ...body,
        id: `ORD-${Date.now()}-${uid.slice(0, 5)}`,
        date: new Date().toISOString(),
        status: 'Processing',
        estimatedDelivery: deliveryDate.toISOString(),
        customerId: uid,
    };
    
    // The single source of truth for an order is the `orders` collection.
    const orderDocRef = adminDb.collection('orders').doc(newOrder.id);
    await orderDocRef.set(newOrder);

    console.log(`Order ${newOrder.id} created for user ${uid}.`);

    return NextResponse.json({
      orderId: newOrder.id,
      status: 'Processing',
      message: 'Order placed successfully.',
    }, { status: 201 });

  } catch (error: any) {
    console.error('Error processing order:', error);
    if (error.code === 'auth/id-token-expired' || error.code === 'auth/argument-error') {
        return NextResponse.json({ message: 'Authentication failed. Please log in again.' }, { status: 401 });
    }
    return NextResponse.json({ message: 'Error processing order', error: error.message }, { status: 500 });
  }
}


--- File: userapp\src\app\api\products\route.ts ---

import { NextResponse } from 'next/server';
import { adminDb } from '@/lib/firebase-admin';

// This is an example of a server-side API route.
// It uses the Firebase Admin SDK to interact with Firestore.

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const shopName = searchParams.get('shopName');
  const categoryName = searchParams.get('categoryName');

  if (!shopName || !categoryName) {
    return NextResponse.json({ message: 'Missing shopName or categoryName query parameter' }, { status: 400 });
  }

  try {
    // Example: Fetch products from a 'products' collection in Firestore
    // You would structure your query like this:
    // const productsRef = adminDb.collection('products');
    // const q = productsRef.where('shopName', '==', shopName).where('shopCategory', '==', categoryName);
    // const querySnapshot = await q.get();
    // const products = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

    // For now, returning mock data as a placeholder
    const mockProducts = [
      { id: 'be-test-001', name: 'Backend Product Alpha', price: 101.99, shopName, categoryName },
      { id: 'be-test-002', name: 'Backend Product Beta', price: 150.00, shopName, categoryName },
    ];
    
    return NextResponse.json(mockProducts);

  } catch (error) {
    console.error('Error fetching products:', error);
    return NextResponse.json({ message: 'Error fetching products' }, { status: 500 });
  }
}


--- File: userapp\src\app\api\user\addresses\route.ts ---


'use server';

import { NextResponse } from 'next/server';
import { adminAuth, adminDb } from '@/lib/firebase-admin';
import { FieldValue } from 'firebase-admin/firestore';

export async function POST(request: Request) {
    try {
        const authorization = request.headers.get('Authorization');
        if (!authorization?.startsWith('Bearer ')) {
            return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
        }

        const token = authorization.split('Bearer ')[1];
        const decodedToken = await adminAuth.verifyIdToken(token);
        const uid = decodedToken.uid;

        const { name, address, latitude, longitude } = await request.json();

        if (!name || !address) {
            return NextResponse.json({ message: 'Missing required address fields' }, { status: 400 });
        }
        
        const newAddress = {
            id: `addr_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,
            name,
            address,
            latitude: latitude ?? null,
            longitude: longitude ?? null,
        };

        const buyerDocRef = adminDb.collection('buyers').doc(uid);
        
        await buyerDocRef.update({
            addresses: FieldValue.arrayUnion(newAddress)
        });

        return NextResponse.json(newAddress);

    } catch (error: any) {
        console.error('Error adding address:', error);
        if (error.code === 'auth/id-token-expired' || error.code === 'auth/argument-error') {
            return NextResponse.json({ message: 'Unauthorized. Please log in again.' }, { status: 401 });
        }
        return NextResponse.json({ message: 'Error adding address', error: error.message }, { status: 500 });
    }
}


--- File: userapp\src\app\api\user\addresses\[addressId]\route.ts ---


'use server';

import { NextResponse } from 'next/server';
import { adminAuth, adminDb } from '@/lib/firebase-admin';
import { FieldValue } from 'firebase-admin/firestore';
import type { Address } from '@/store/authStore';

// Helper function to verify user token
async function verifyUser(request: Request) {
    const authorization = request.headers.get('Authorization');
    if (!authorization?.startsWith('Bearer ')) {
        return null;
    }
    const token = authorization.split('Bearer ')[1];
    try {
        const decodedToken = await adminAuth.verifyIdToken(token);
        return decodedToken.uid;
    } catch (error) {
        console.error("Token verification failed", error);
        return null;
    }
}

// PUT handler for updating an address
export async function PUT(request: Request, { params }: { params: { addressId: string } }) {
    const uid = await verifyUser(request);
    if (!uid) {
        return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
    }
    
    const { addressId } = params;
    const body: Omit<Address, 'id'> = await request.json();

    if (!body.name || !body.address) {
        return NextResponse.json({ message: 'Missing required address fields' }, { status: 400 });
    }

    try {
        const buyerDocRef = adminDb.collection('buyers').doc(uid);
        const buyerDoc = await buyerDocRef.get();

        if (!buyerDoc.exists) {
            return NextResponse.json({ message: 'User not found' }, { status: 404 });
        }

        const userData = buyerDoc.data();
        const addresses: Address[] = userData?.addresses || [];

        const addressIndex = addresses.findIndex(addr => addr.id === addressId);

        if (addressIndex === -1) {
            return NextResponse.json({ message: 'Address not found' }, { status: 404 });
        }

        const updatedAddress: Address = { ...body, id: addressId };
        addresses[addressIndex] = updatedAddress;

        await buyerDocRef.update({ addresses });

        return NextResponse.json(updatedAddress);
        
    } catch (error: any) {
        console.error('Error updating address:', error);
        return NextResponse.json({ message: 'Error updating address', error: error.message }, { status: 500 });
    }
}

// DELETE handler for deleting an address
export async function DELETE(request: Request, { params }: { params: { addressId: string } }) {
    const uid = await verifyUser(request);
    if (!uid) {
        return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
    }

    const { addressId } = params;

    try {
        const buyerDocRef = adminDb.collection('buyers').doc(uid);
        const buyerDoc = await buyerDocRef.get();

        if (!buyerDoc.exists) {
            return NextResponse.json({ message: 'User not found' }, { status: 404 });
        }

        const userData = buyerDoc.data();
        const addresses: Address[] = userData?.addresses || [];
        
        const addressToDelete = addresses.find(addr => addr.id === addressId);
        
        if (!addressToDelete) {
             return NextResponse.json({ message: 'Address not found' }, { status: 404 });
        }

        await buyerDocRef.update({
            addresses: FieldValue.arrayRemove(addressToDelete)
        });

        return NextResponse.json({ message: 'Address deleted successfully' });
        
    } catch (error: any) {
        console.error('Error deleting address:', error);
        return NextResponse.json({ message: 'Error deleting address', error: error.message }, { status: 500 });
    }
}


--- File: userapp\src\app\api\user\test-notification\route.ts ---


'use server';

import { NextResponse } from 'next/server';
import { adminAuth, adminDb } from '@/lib/firebase-admin';
import * as admin from 'firebase-admin';

export async function POST(request: Request) {
    try {
        const authorization = request.headers.get('Authorization');
        if (!authorization?.startsWith('Bearer ')) {
            return NextResponse.json({ message: 'Unauthorized: Missing or invalid token.' }, { status: 401 });
        }

        const idToken = authorization.split('Bearer ')[1];
        await adminAuth.verifyIdToken(idToken);
        
        const { token } = await request.json();

        if (!token) {
          return NextResponse.json({ error: 'FCM token is required in the request body.' }, { status: 400 });
        }

        const message: admin.messaging.Message = {
            token: token,
            notification: {
                title: '✅ Test Notification',
                body: 'If you received this, your push notifications are working correctly!',
            },
            webpush: {
                fcmOptions: {
                    link: new URL('/', request.url).toString()
                }
            }
        };

        const response = await admin.messaging().send(message);

        return NextResponse.json({ 
          success: true, 
          messageId: response 
        });

    } catch (error: any) {
        console.error('Error sending test notification:', error);
        
        return NextResponse.json({ 
            error: 'Failed to send notification',
            details: error instanceof Error ? error.message : 'Unknown error',
            code: error.code,
            stack: error instanceof Error ? error.stack : undefined
        }, { status: 500 });
    }
}


--- File: userapp\src\app\backend-test\page.tsx ---

// This is a special, isolated page for testing your backend integration.
// You can modify it freely and delete it when you're done.

'use client';

import { useState, useEffect } from 'react';
import { MainLayout } from '@/components/main-layout';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Loader2 } from 'lucide-react';

// Define a type for the product data you expect from your backend.
// Adjust this to match your actual API response structure.
interface TestProduct {
  id: string;
  name: string;
  price: number;
}

export default function BackendTestPage() {
  const [products, setProducts] = useState<TestProduct[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // This is the function that will call your backend API.
  const fetchDemoProducts = async () => {
    setLoading(true);
    setError(null);

    // ====================================================================
    // TODO: Replace this URL with your actual backend API endpoint.
    // ====================================================================
    const apiUrl = '/api/products?shopName=Demo+Store';

    try {
      const response = await fetch(apiUrl);
      if (!response.ok) {
        throw new Error(`API responded with status: ${response.status}`);
      }
      const data: TestProduct[] = await response.json();
      setProducts(data);
    } catch (e: any) {
      setError(e.message || 'An unknown error occurred.');
      setProducts([]); // Clear products on error
    } finally {
      setLoading(false);
    }
  };

  // You can trigger the fetch on component mount or with a button.
  // For testing, a button is often more convenient.

  return (
    <MainLayout>
      <div className="w-full max-w-2xl mx-auto">
        <Card>
          <CardHeader>
            <CardTitle>Backend Integration Test Page</CardTitle>
            <CardDescription>
              Use this page to test fetching data from your backend. Edit the `apiUrl` in `src/app/backend-test/page.tsx` to point to your endpoint.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="flex justify-center">
              <Button onClick={fetchDemoProducts} disabled={loading}>
                {loading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Fetching Products...
                  </>
                ) : (
                  'Fetch from Demo Store'
                )}
              </Button>
            </div>

            {error && (
              <div className="p-4 bg-destructive/10 text-destructive border border-destructive/50 rounded-md">
                <h4 className="font-bold">Error</h4>
                <p>{error}</p>
              </div>
            )}

            <div>
              <h3 className="text-lg font-semibold mb-2">Fetched Products:</h3>
              {products.length > 0 ? (
                <ul className="list-disc pl-5 space-y-1">
                  {products.map((product) => (
                    <li key={product.id}>
                      {product.name} - ${product.price.toFixed(2)}
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="text-muted-foreground">No products fetched yet. Click the button to start.</p>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
}


--- File: userapp\src\app\checkout\page.tsx ---


'use client';

import { Suspense, useState, useMemo, useEffect } from 'react';
import dynamic from 'next/dynamic';
import { useRouter, useSearchParams } from 'next/navigation';
import { useCartStore, type CartItem } from '@/store/cartStore';
import { useAuthStore, type Address } from '@/store/authStore';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import Image from 'next/image';
import Link from 'next/link';
import { Minus, Plus, Trash2, X, Bike, Tag, Gift, MessageSquare, ChevronRight, Home, WalletCards, Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';
import { useToast } from '@/hooks/use-toast';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { DeliveryTipSelector } from '@/components/delivery-tip-selector';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { AddressPicker } from '@/components/address-picker';


function CheckoutPageContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { carts, addItem, updateQuantity, clearCart, clearAllCarts } = useCartStore();
  const { isLoggedIn, user, addAddress, selectAddress, selectedAddressId, placeOrder } = useAuthStore();
  const { toast } = useToast();

  const [isMounted, setIsMounted] = useState(false);
  const [isAddressDialogOpen, setAddressDialogOpen] = useState(false);
  const [isPaymentDialogOpen, setPaymentDialogOpen] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);


  useEffect(() => {
    setIsMounted(true);
    if (!isLoggedIn) {
      router.push('/login');
    }
  }, [isLoggedIn, router]);

  const shopName = searchParams.get('shop');
  const isGlobalCheckout = searchParams.get('global') === 'true';

  const itemsToCheckout: CartItem[] = useMemo(() => isGlobalCheckout
    ? Object.values(carts).flatMap(cart => cart.items)
    : shopName && carts[shopName] ? carts[shopName].items : [], [isGlobalCheckout, carts, shopName]);

  const allItems: CartItem[] = useMemo(() => Object.values(carts).flatMap(cart => cart.items), [carts]);
  
  const [tip, setTip] = useState(0);
  const [isGifting, setIsGifting] = useState(false);

  const subtotal = useMemo(() => itemsToCheckout.reduce((acc, item) => acc + item.price * item.quantity, 0), [itemsToCheckout]);
  const originalTotal = useMemo(() => itemsToCheckout.reduce((acc, item) => {
    const originalPrice = item.price * 1.25; // Dummy original price
    return acc + originalPrice * item.quantity;
  }, 0), [itemsToCheckout]);

  const totalSavings = originalTotal - subtotal;
  
  const deliveryCharge = 25;
  const isDeliveryFree = true; // Forcing free delivery as per UI spec
  const handlingCharge = 2;

  const grandTotal = subtotal + (isDeliveryFree ? 0 : deliveryCharge) + handlingCharge + tip;

  const selectedAddress = useMemo(
    () => user?.addresses?.find(a => a.id === selectedAddressId),
    [user, selectedAddressId]
  );

  const handlePlaceOrder = async () => {
    if (!selectedAddress || !user) return;
    setIsProcessing(true);

    const orderDetails = {
      items: itemsToCheckout,
      total: grandTotal,
      shippingAddress: selectedAddress,
      paymentMethod: 'Cash on Delivery',
      customerPhone: user.phone,
    };

    try {
      const newOrderId = await placeOrder(orderDetails);
      
      if (newOrderId) {
          if (isGlobalCheckout) {
              clearAllCarts();
          } else if (shopName) {
              clearCart(shopName);
          }
      
          toast({
              title: "Order Placed!",
              description: "Your order has been successfully placed.",
          });

          router.push(`/track-order?orderId=${newOrderId}`);
      } else {
          toast({
              title: "Order Failed",
              description: "There was an issue placing your order. Please try again.",
              variant: "destructive"
          });
      }
    } finally {
      setIsProcessing(false);
      setPaymentDialogOpen(false);
    }
  };
  
  const handleAddNewAddress = async (values: Omit<Address, 'id'>) => {
    setIsProcessing(true);
    const success = await addAddress(values);
    setIsProcessing(false);
    
    if (success) {
      setAddressDialogOpen(false);
      toast({
        title: "Address Added",
        description: "Your new address has been saved.",
      });
    } else {
       toast({
        variant: "destructive",
        title: "Failed to Add Address",
        description: "Could not save your address. Please try again.",
      });
    }
  };

  if (!isMounted) {
    return (
        <div className="flex items-center justify-center h-[calc(100vh-200px)]">
            <p>Loading checkout...</p>
        </div>
    );
  }

  if (allItems.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-[calc(100vh-200px)] text-center p-4">
        <h1 className="text-2xl font-bold mb-4">My Cart</h1>
        <p className="text-muted-foreground mb-8">Your cart is empty. Add items to continue.</p>
        <Button asChild>
          <Link href="/">Start Shopping</Link>
        </Button>
      </div>
    );
  }

  return (
    <div className="bg-muted/30 min-h-screen pb-32">
        <header className="sticky top-0 bg-background p-4 flex items-center justify-between border-b z-10">
            <h1 className="text-xl font-bold">Checkout</h1>
            <Button variant="ghost" size="icon" onClick={() => router.back()}>
                <X className="h-5 w-5" />
            </Button>
        </header>

        <main className="p-4 space-y-4">
            {/* Cart Summary */}
            <Card>
                <CardContent className="p-4 space-y-4">
                    <div className="flex items-center gap-2">
                        <Bike className="h-5 w-5 text-primary" />
                        <div>
                            <p className="font-semibold">Delivery in 11 minutes</p>
                            <p className="text-sm text-muted-foreground">Shipment of {itemsToCheckout.length} {itemsToCheckout.length === 1 ? 'item' : 'items'}</p>
                        </div>
                    </div>
                    <Separator />
                    <div className="space-y-4">
                        {itemsToCheckout.map(item => {
                            const originalPrice = item.price * 1.25;
                            return (
                                <div key={item.id} className="flex items-start gap-4">
                                    <Image src={item.image} alt={item.name} width={80} height={80} className="rounded-md object-cover h-20 w-20 border" data-ai-hint={item.dataAiHint} />
                                    <div className="flex-1">
                                        <p className="font-semibold line-clamp-2">{item.name}</p>
                                        <p className="text-sm text-muted-foreground">{item.unit}</p>
                                        <div className="flex items-baseline gap-2 mt-1">
                                            <p className="font-bold">₹{item.price.toFixed(2)}</p>
                                            <p className="text-sm line-through text-muted-foreground">₹{originalPrice.toFixed(2)}</p>
                                        </div>
                                    </div>
                                    <div className="flex items-center border rounded-md bg-green-100/50">
                                        <Button
                                        variant="ghost"
                                        size="icon"
                                        onClick={() => updateQuantity(item.id, item.shopName, item.quantity - 1)}
                                        className="h-8 w-8 text-green-700 hover:bg-green-200/50"
                                        >
                                        {item.quantity === 1 ? <Trash2 className="h-4 w-4 text-red-500" /> : <Minus className="h-4 w-4" />}
                                        </Button>
                                        <span className="font-bold text-sm text-green-800 px-3">
                                            {item.quantity}
                                        </span>
                                        <Button
                                        variant="ghost"
                                        size="icon"
                                        onClick={() => addItem(item)}
                                        className="h-8 w-8 text-green-700 hover:bg-green-200/50"
                                        disabled={!item.inStock}
                                        >
                                        <Plus className="h-4 w-4" />
                                        </Button>
                                    </div>
                                </div>
                            )
                        })}
                    </div>
                </CardContent>
            </Card>

            {/* Coupons & Offers */}
            <Collapsible>
                <Card>
                    <CollapsibleTrigger className="w-full">
                        <div className="flex items-center justify-between p-4 cursor-pointer">
                            <div className="flex items-center gap-3">
                                <Tag className="h-5 w-5 text-primary" />
                                <span className="font-semibold">View Coupons & Offers</span>
                            </div>
                            <ChevronRight className="h-5 w-5 text-muted-foreground" />
                        </div>
                    </CollapsibleTrigger>
                    <CollapsibleContent>
                        <div className="p-4 border-t">
                            <p className="text-sm text-muted-foreground">No coupons available at the moment.</p>
                        </div>
                    </CollapsibleContent>
                </Card>
            </Collapsible>
            
            {/* Gifting */}
            <Collapsible onOpenChange={setIsGifting} open={isGifting}>
                <Card>
                    <div className="flex items-center justify-between p-4">
                        <div className="flex items-center gap-3">
                            <Gift className="h-5 w-5 text-primary" />
                            <span className="font-semibold">Ordering for someone else?</span>
                        </div>
                        <CollapsibleTrigger asChild>
                           <Switch checked={isGifting} onCheckedChange={setIsGifting} />
                        </CollapsibleTrigger>
                    </div>
                    <CollapsibleContent>
                        <div className="p-4 border-t space-y-4">
                             <div className="grid gap-2">
                                <Label htmlFor="recipient-name">Recipient's Name</Label>
                                <Input id="recipient-name" placeholder="Enter name" />
                            </div>
                             <div className="grid gap-2">
                                <Label htmlFor="recipient-phone">Recipient's Phone</Label>
                                <Input id="recipient-phone" type="tel" placeholder="Enter phone number" />
                            </div>
                             <div className="grid gap-2">
                                <Label htmlFor="recipient-note">Note</Label>
                                <Textarea id="recipient-note" placeholder="Write a short message" />
                            </div>
                        </div>
                    </CollapsibleContent>
                </Card>
            </Collapsible>
            
            {/* Delivery Options */}
            <Card>
                <CardContent className="p-4 space-y-4">
                    <DeliveryTipSelector onTipChange={setTip} />
                    <Separator />
                    <div className="flex items-center gap-3">
                        <MessageSquare className="h-5 w-5 text-primary" />
                        <Textarea placeholder="Leave a message for the delivery partner... (e.g. leave at the door)" className="flex-1 bg-muted border-0 focus-visible:ring-1 focus-visible:ring-ring" />
                    </div>
                </CardContent>
            </Card>
            
             {/* Delivery Address */}
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-lg">
                        <Home className="h-5 w-5 text-primary" />
                        Delivery Address
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    {user?.addresses?.length > 0 ? (
                        <RadioGroup value={selectedAddressId ?? undefined} onValueChange={selectAddress}>
                            {user.addresses.map(address => (
                                <Label key={address.id} htmlFor={address.id} className="flex items-start gap-4 p-4 rounded-lg border has-[:checked]:bg-primary/5 has-[:checked]:border-primary transition-all cursor-pointer">
                                    <RadioGroupItem value={address.id} id={address.id} />
                                    <div className="flex-1">
                                        <p className="font-semibold">{address.name}</p>
                                        <p className="text-sm text-muted-foreground">{address.address}</p>
                                    </div>
                                </Label>
                            ))}
                        </RadioGroup>
                    ) : (
                       <div>
                            <Alert>
                                <AlertTitle>No Saved Addresses</AlertTitle>
                                <AlertDescription>Please add a delivery address to continue.</AlertDescription>
                            </Alert>
                       </div>
                    )}
                    
                    <Dialog open={isAddressDialogOpen} onOpenChange={setAddressDialogOpen}>
                        <DialogTrigger asChild>
                           <Button variant="outline" className="w-full mt-4">Add a new address</Button>
                        </DialogTrigger>
                        <DialogContent className="max-w-md">
                            <DialogHeader>
                                <DialogTitle>Add New Delivery Address</DialogTitle>
                            </DialogHeader>
                            <div>
                                <AddressPicker onSave={handleAddNewAddress} isSaving={isProcessing} />
                            </div>
                        </DialogContent>
                    </Dialog>
                </CardContent>
            </Card>

            {/* Bill Summary */}
            <Card>
                <CardContent className="p-4 space-y-3">
                    <h2 className="font-bold text-lg">Bill Details</h2>
                    <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                            <span className="text-muted-foreground">Items total</span>
                            <span>₹{subtotal.toFixed(2)}</span>
                        </div>
                         <div className="flex justify-between text-green-600">
                            <span className="font-medium">Discount</span>
                            <span>- ₹{totalSavings.toFixed(2)}</span>
                        </div>
                        <div className="flex justify-between">
                            <span className="text-muted-foreground">Delivery Charge</span>
                            <div>
                            {isDeliveryFree && <span className="text-green-600 font-semibold mr-2">FREE</span>}
                            <span className={cn(isDeliveryFree && "line-through text-muted-foreground")}>₹{deliveryCharge.toFixed(2)}</span>
                            </div>
                        </div>
                        <div className="flex justify-between">
                            <span className="text-muted-foreground">Handling & Platform Fee</span>
                            <span>₹{handlingCharge.toFixed(2)}</span>
                        </div>
                         <div className="flex justify-between">
                            <span className="text-muted-foreground">Delivery Tip</span>
                            <span>₹{tip.toFixed(2)}</span>
                        </div>
                    </div>
                    <Separator />
                    <div className="flex justify-between font-bold text-lg">
                        <span>To Pay</span>
                        <span>₹{grandTotal.toFixed(2)}</span>
                    </div>
                </CardContent>
            </Card>
        </main>
        
        <footer className="fixed bottom-0 left-0 right-0 bg-background p-4 border-t shadow-[0_-2px_10px_rgba(0,0,0,0.05)]">
             <Dialog open={isPaymentDialogOpen} onOpenChange={setPaymentDialogOpen}>
                <DialogTrigger asChild>
                    <Button 
                        className="w-full bg-primary hover:bg-primary/90 text-primary-foreground font-bold py-3 px-6 h-auto rounded-lg text-base"
                        disabled={!selectedAddress || isProcessing}
                    >
                        Proceed to Pay ₹{grandTotal.toFixed(2)}
                    </Button>
                </DialogTrigger>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Confirm Your Order</DialogTitle>
                        <DialogDescription>
                            Review your order and select a payment method.
                        </DialogDescription>
                    </DialogHeader>
                    <div className="py-4">
                         <h3 className="text-lg font-semibold mb-2">Total: ₹{grandTotal.toFixed(2)}</h3>
                         <div className="space-y-2">
                            <p><span className="font-semibold">Deliver to:</span> {selectedAddress?.address}</p>
                            <div className="rounded-lg border bg-card text-card-foreground p-3">
                                <h4 className="font-medium mb-2">Select Payment Method</h4>
                                <RadioGroup defaultValue="cod" className="gap-4">
                                    <Label htmlFor="cod" className="flex items-center gap-3 p-3 rounded-md border has-[:checked]:border-primary transition-colors cursor-pointer">
                                        <RadioGroupItem value="cod" id="cod" />
                                        <WalletCards className="h-5 w-5 text-muted-foreground" />
                                        <span>Cash on Delivery</span>
                                    </Label>
                                </RadioGroup>
                            </div>
                         </div>
                    </div>
                    <DialogFooter>
                        <Button variant="outline" onClick={() => setPaymentDialogOpen(false)} disabled={isProcessing}>Cancel</Button>
                        <Button onClick={handlePlaceOrder} disabled={isProcessing}>
                            {isProcessing && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                            {isProcessing ? "Placing Order..." : "Confirm Order"}
                        </Button>
                    </DialogFooter>
                </DialogContent>
             </Dialog>
        </footer>
    </div>
  );
}

export default function CheckoutPage() {
    return (
        <Suspense fallback={<div className="flex items-center justify-center h-screen">Loading...</div>}>
            <CheckoutPageContent />
        </Suspense>
    )
}


--- File: userapp\src\app\contact\page.tsx ---

import { MainLayout } from '@/components/main-layout';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { DataService } from '@/services/dataService';
import { HomeCarousel } from '@/components/home-carousel';
import { bannerImages } from '@/data/bannerImages';

export default async function ContactPage() {
  const categories = await DataService.getCategories();
  return (
    <MainLayout categories={categories}>
      <div className='space-y-8'>
        <HomeCarousel bannerImages={bannerImages} />
        <Card className="w-full max-w-3xl mx-auto">
          <CardHeader>
            <CardTitle className="text-3xl font-headline md:text-5xl text-center text-primary">Contact Us</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-center text-lg">
              Get in touch with us through this page. We'd love to hear from you!
            </p>
          </CardContent>
        </Card>
      </div>
    </MainLayout>
  )
}


--- File: userapp\src\app\error.tsx ---

'use client' // Error components must be Client Components

import { useEffect } from 'react'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card'
import { AlertTriangle } from 'lucide-react'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div className="flex items-center justify-center min-h-screen bg-background p-4">
      <Card className="w-full max-w-md text-center shadow-lg">
        <CardHeader>
          <div className="mx-auto bg-destructive/10 p-4 rounded-full">
            <AlertTriangle className="h-12 w-12 text-destructive" />
          </div>
          <CardTitle className="text-3xl font-bold mt-6">
            Oops! Something went wrong.
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            We're sorry for the inconvenience. An unexpected error has occurred.
            Please try again or return to the homepage.
          </p>
        </CardContent>
        <CardFooter className="flex justify-center gap-4">
          <Button onClick={() => reset()}>
            Try Again
          </Button>
          <Button variant="outline" asChild>
            <Link href="/">Go to Homepage</Link>
          </Button>
        </CardFooter>
      </Card>
    </div>
  )
}


--- File: userapp\src\app\layout.tsx ---


'use client';

import type {Metadata} from 'next';
import './globals.css';
import { Toaster } from "@/components/ui/toaster";
import { useEffect } from 'react';

// This is a client component that handles registering the service worker.
// It's placed in the root layout to ensure it runs on every page.
const ServiceWorkerRegistrar = () => {
  useEffect(() => {
    if ('serviceWorker' in navigator) {
      // The firebase-messaging-sw.js file is registered when getFcmToken is called,
      // so we don't need to do it here explicitly.
      // This keeps the registration logic coupled with the feature that uses it.
      console.log('Service worker will be registered by the notification feature.');
    }
  }, []);

  return null;
};


// Note: Metadata export is for server components and might not be fully applied in a client-rendered layout.
// For full client-side title/meta management, consider using a library or the `use client` directive's head management.
// However, Next.js is smart enough to handle this often.
// export const metadata: Metadata = {
//   title: 'E-Commerce Platform',
//   description: 'A modern e-commerce platform with multiple categories and shops.',
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="light">
      <head>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        <link href="https://fonts.googleapis.com/css2?family=Inter&display=swap" rel="stylesheet"></link>
      </head>
      <body className="font-body antialiased">
        {/* The service worker is now registered on demand by getFcmToken, so this component is not needed */}
        {/* <ServiceWorkerRegistrar /> */}
        {children}
        <Toaster />
      </body>
    </html>
  );
}


--- File: userapp\src\app\login\page.tsx ---


'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuthStore } from '@/store/authStore';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import Link from 'next/link';

const loginSchema = z.object({
  email: z.string().email('Invalid email address.'),
  password: z.string().min(1, 'Password is required.'),
});

type LoginFormValues = z.infer<typeof loginSchema>;

export default function LoginPage() {
  const router = useRouter();
  const login = useAuthStore((state) => state.login);
  const [error, setError] = useState<string | null>(null);

  const form = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: '',
      password: '',
    },
  });

  const onSubmit = async (data: LoginFormValues) => {
    setError(null);
    const success = await login(data.email, data.password);
    if (success) {
      router.push('/');
    } else {
      setError('Invalid email or password.');
      form.reset();
    }
  };

  return (
    <div className="flex items-center justify-center min-h-[80vh]">
      <Card className="w-full max-w-sm">
        <CardHeader>
          <div className="flex justify-between items-start">
            <div>
              <CardTitle>Login to your account</CardTitle>
              <CardDescription className="mt-2">
                Enter your email below to login to your account
              </CardDescription>
            </div>
            <Button asChild variant="link">
                <Link href="/register">Sign Up</Link>
            </Button>
          </div>
        </CardHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <CardContent>
              <div className="flex flex-col gap-6">
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Email</FormLabel>
                      <FormControl>
                        <Input placeholder="m@example.com" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                        <div className="flex items-center">
                            <FormLabel>Password</FormLabel>
                            <Link href="#" className="ml-auto inline-block text-sm underline-offset-4 hover:underline">
                                Forgot your password?
                            </Link>
                        </div>
                      <FormControl>
                        <Input type="password" placeholder="••••••••" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                {error && <p className="text-sm font-medium text-destructive">{error}</p>}
              </div>
            </CardContent>
            <CardFooter className="flex-col gap-2">
              <Button type="submit" className="w-full" disabled={form.formState.isSubmitting}>
                {form.formState.isSubmitting ? 'Logging in...' : 'Login'}
              </Button>
            </CardFooter>
          </form>
        </Form>
      </Card>
    </div>
  );
}


--- File: userapp\src\app\orders\page.tsx ---


'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import { ArrowLeft, ChevronRight, FileText } from 'lucide-react';
import { useAuthStore } from '@/store/authStore';
import { MainLayout } from '@/components/main-layout';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { useRouter } from 'next/navigation';

export default function OrdersPage() {
  const router = useRouter();
  const { user, isLoggedIn } = useAuthStore();
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
    if (!isLoggedIn) {
      router.push('/login');
    }
  }, [isLoggedIn, router]);

  if (!isMounted) {
    return (
      <MainLayout>
        <div>Loading...</div>
      </MainLayout>
    );
  }

  const sortedOrders = user?.orders ? [...user.orders].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()) : [];

  return (
    <MainLayout>
      <div className="w-full max-w-4xl mx-auto">
        <div className="mb-6">
          <Link href="/profile" className="flex items-center gap-2 text-sm text-muted-foreground hover:text-primary transition-colors">
            <ArrowLeft size={16} />
            Back to Profile
          </Link>
          <h1 className="text-3xl font-bold mt-2">My Orders</h1>
        </div>
        
        <div className="space-y-4">
          {sortedOrders.length > 0 ? (
            sortedOrders.map((order) => (
              <Card key={order.id} className="overflow-hidden">
                <CardContent className="p-4">
                  <div className="flex flex-col sm:flex-row justify-between sm:items-center gap-4">
                    <div className="flex-1 space-y-2">
                       <div className="flex items-center gap-4">
                         <h2 className="text-lg font-semibold">Order #{order.id.slice(-6)}</h2>
                         <Badge 
                            variant={order.status === 'Delivered' || order.status === 'Completed' ? 'default' : 'secondary'}
                            className={order.status === 'Processing' ? 'bg-yellow-100 text-yellow-800' : order.status === 'Shipped' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'}
                          >
                            {order.status}
                          </Badge>
                       </div>
                       <p className="text-sm text-muted-foreground">
                        Placed on {new Date(order.date).toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata', year: 'numeric', month: 'long', day: 'numeric' })}
                       </p>
                       <p className="text-lg font-bold">₹{order.total.toFixed(2)}</p>
                    </div>
                    <div className="flex items-center gap-2">
                       <Button variant="outline" asChild>
                          <Link href={`/track-order?orderId=${order.id}`}>
                            <FileText className="mr-2 h-4 w-4" />
                            View Details
                          </Link>
                       </Button>
                       <Button asChild>
                         <Link href={`/track-order?orderId=${order.id}`}>
                            Track Order
                            <ChevronRight className="ml-2 h-4 w-4" />
                         </Link>
                       </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))
          ) : (
            <div className="text-center py-16">
              <FileText className="mx-auto h-12 w-12 text-muted-foreground" />
              <h2 className="mt-4 text-xl font-semibold">No Orders Yet</h2>
              <p className="mt-2 text-sm text-muted-foreground">You haven't placed any orders with us. Let's change that!</p>
              <Button asChild className="mt-6">
                <Link href="/">Start Shopping</Link>
              </Button>
            </div>
          )}
        </div>
      </div>
    </MainLayout>
  );
}


--- File: userapp\src\app\page.tsx ---


'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { MainLayout } from '@/components/main-layout';
import { DataService } from '@/services/dataService';
import type { Product } from '@/data/products';
import type { Shop } from '@/data/shops';
import type { NavItem } from '@/data/categories';
import { HomeCarousel } from '@/components/home-carousel';
import { PromoSection } from '@/components/promo-section';
import { DealsSection } from '@/components/deals-section';
import { useSuperSaverStore } from '@/store/superSaverStore';
import { Skeleton } from '@/components/ui/skeleton';
import { ShopSection } from '@/components/shop-section';
import { bannerImages } from '@/data/bannerImages';
import { useAuthStore } from '@/store/authStore';
import { Button } from '@/components/ui/button';
import { ArrowRight } from 'lucide-react';

interface ShopProducts {
  [shopName: string]: {
    [categoryName: string]: Product[];
  };
}

export default function HomePage() {
  const { isSuperSaver } = useSuperSaverStore();
  const { user } = useAuthStore();

  const [categories, setCategories] = useState<NavItem[]>([]);
  const [featuredShops, setFeaturedShops] = useState<Shop[]>([]);
  const [shopProducts, setShopProducts] = useState<ShopProducts>({});
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchAllData = async () => {
      setLoading(true);

      if (isSuperSaver) {
        const cats = await DataService.getSuperSaverCategories();
        setCategories(cats);
        setFeaturedShops([]);
        setShopProducts({});
      } else {
        const cats = await DataService.getCategories();
        setCategories(cats);

        const featuredShopsConfig = [
          { name: "FreshMart Supermarket", category: "Supermarket" },
          { name: "Prime Cuts Butchery", category: "Meat" },
          { name: "TechWorld Electronics", category: "Electronics" },
        ];

        const allShops = await DataService.getAllShops();
        const fShops = featuredShopsConfig
          .map(config => allShops.find(s => s.name === config.name && s.category === config.category))
          .filter((s): s is Shop => s !== undefined);
        setFeaturedShops(fShops);
        
        const featuredShopCategories: { [shopName: string]: string[] } = {
          "FreshMart Supermarket": ["Grocery", "Snacks"],
          "Prime Cuts Butchery": ["Chicken", "Mutton"],
          "TechWorld Electronics": ["Smartphones", "Laptops"]
        };

        const productPromises = fShops.map(async (shop) => {
            const categoriesToFetch = featuredShopCategories[shop.name] || [];
            const productsByCategory: { [category: string]: Product[] } = {};
            
            for (const category of categoriesToFetch) {
                productsByCategory[category] = await DataService.getProducts(shop.name, category);
            }
        
            return { [shop.name]: productsByCategory };
        });
        
        const results = await Promise.all(productPromises);
        const productsByShop = results.reduce((acc, result) => ({ ...acc, ...result }), {});
        setShopProducts(productsByShop);
      }

      setLoading(false);
    };

    fetchAllData();
  }, [isSuperSaver]);

  const categoryNavItems = categories.map((category) => ({
    name: category.name,
    url: `/shops/${encodeURIComponent(category.name)}`,
    iconName: category.icon,
  }));

  const navItems = [...categoryNavItems];
  
  if (loading) {
    return (
      <MainLayout categories={categories}>
        <div className="w-full space-y-16">
          <Skeleton className="h-[125px] w-full max-w-5xl mx-auto rounded-lg" />
          <DealsSection />
          <PromoSection />
          <div className="space-y-12">
            <div className="space-y-4">
                <Skeleton className="h-8 w-1/3" />
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">
                  {Array.from({ length: 6 }).map((_, i) => <Skeleton key={i} className="h-48 w-full" />)}
                </div>
            </div>
             <div className="space-y-4">
                <Skeleton className="h-8 w-1/3" />
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">
                  {Array.from({ length: 6 }).map((_, i) => <Skeleton key={i} className="h-48 w-full" />)}
                </div>
            </div>
          </div>
        </div>
      </MainLayout>
    );
  }

  if (isSuperSaver) {
    return (
      <MainLayout navItems={navItems} categories={categories}>
        <div className="flex flex-col items-center justify-center h-96">
          <h1 className="text-4xl font-bold text-primary mb-4">Super Saver Mode!</h1>
          <p className="text-lg text-muted-foreground">Here is some completely different content.</p>
        </div>
      </MainLayout>
    );
  }

  return (
    <MainLayout navItems={navItems} categories={categories}>
      <div className="w-full space-y-8">
        <div className="space-y-16">
            <HomeCarousel bannerImages={bannerImages} />
            <DealsSection />
            <PromoSection />
            <div className="space-y-12">
            {featuredShops.map((shop) => (
                <ShopSection
                key={shop.id}
                shop={shop}
                shopProducts={shopProducts[shop.name]}
                />
            ))}
            </div>
        </div>
      </div>
    </MainLayout>
  );
}


--- File: userapp\src\app\profile\addresses\page.tsx ---


'use client'

import { useState } from 'react';
import Link from 'next/link';
import { ArrowLeft, Home, MapPin, Plus, Edit, Trash2 } from 'lucide-react';
import { MainLayout } from '@/components/main-layout';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { useAuthStore, type Address } from '@/store/authStore';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog';
import { AddressPicker } from '@/components/address-picker';
import { useToast } from '@/hooks/use-toast';
import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';


export default function SavedAddressesPage() {
  const { user, addAddress, updateAddress, deleteAddress } = useAuthStore();
  const [dialogOpen, setDialogOpen] = useState(false);
  const [editingAddress, setEditingAddress] = useState<Address | null>(null);

  const { toast } = useToast();

  const handleOpenDialog = (address: Address | null = null) => {
    setEditingAddress(address);
    setDialogOpen(true);
  };

  const handleSaveAddress = async (values: Omit<Address, 'id'>) => {
    let success = false;
    if (editingAddress) {
      success = await updateAddress(editingAddress.id, values);
    } else {
      success = await addAddress(values);
    }

    if (success) {
      setDialogOpen(false);
      setEditingAddress(null);
      toast({
        title: editingAddress ? "Address Updated" : "Address Added",
        description: `Your address has been successfully ${editingAddress ? 'updated' : 'saved'}.`,
      });
    } else {
       toast({
        variant: "destructive",
        title: `Failed to ${editingAddress ? 'Update' : 'Add'} Address`,
        description: "There was a problem saving your address. Please try again.",
      });
    }
  };

  const handleDeleteAddress = async (addressId: string) => {
    const success = await deleteAddress(addressId);
    if (success) {
      toast({
        title: "Address Deleted",
        description: "Your address has been successfully removed.",
      });
    } else {
      toast({
        variant: "destructive",
        title: "Failed to Delete Address",
        description: "There was a problem deleting your address. Please try again.",
      });
    }
  };

  return (
    <MainLayout>
      <div className="w-full max-w-4xl mx-auto">
        <div className="mb-6">
          <Link href="/profile" className="flex items-center gap-2 text-sm text-muted-foreground hover:text-primary transition-colors">
            <ArrowLeft size={16} />
            Back to Profile
          </Link>
          <h1 className="text-3xl font-bold mt-2">Saved Addresses</h1>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Manage Your Addresses</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {user?.addresses && user.addresses.length > 0 ? (
              user.addresses.map(address => (
                <div key={address.id} className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex items-start gap-4">
                    <MapPin className="h-6 w-6 text-primary mt-1" />
                    <div>
                      <p className="font-semibold">{address.name}</p>
                      <p className="text-sm text-muted-foreground">{address.address}</p>
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <Button variant="outline" size="icon" onClick={() => handleOpenDialog(address)}>
                      <Edit className="h-4 w-4" />
                      <span className="sr-only">Edit Address</span>
                    </Button>
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button variant="destructive" size="icon">
                          <Trash2 className="h-4 w-4" />
                          <span className="sr-only">Delete Address</span>
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                          <AlertDialogDescription>
                            This action cannot be undone. This will permanently delete your address.
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>Cancel</AlertDialogCancel>
                          <AlertDialogAction onClick={() => handleDeleteAddress(address.id)}>
                            Delete
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  </div>
                </div>
              ))
            ) : (
              <Alert>
                <AlertTitle>No Saved Addresses</AlertTitle>
                <AlertDescription>You haven't saved any addresses yet. Add one to get started!</AlertDescription>
              </Alert>
            )}
            
            <Button className="mt-4 w-full" onClick={() => handleOpenDialog()}>
              <Plus className="mr-2 h-4 w-4" />
              Add New Address
            </Button>
            
            <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
              <DialogContent className="max-w-md">
                  <DialogHeader>
                      <DialogTitle>{editingAddress ? 'Edit Address' : 'Add New Address'}</DialogTitle>
                  </DialogHeader>
                  <div>
                      <AddressPicker onSave={handleSaveAddress} existingAddress={editingAddress} />
                  </div>
              </DialogContent>
            </Dialog>

          </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
}


--- File: userapp\src\app\profile\information\page.tsx ---


import Link from 'next/link';
import { ArrowLeft } from 'lucide-react';
import { MainLayout } from '@/components/main-layout';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';

export default function ProfileInformationPage() {
  return (
    <MainLayout>
      <div className="w-full max-w-4xl mx-auto">
        <div className="mb-6">
          <Link href="/profile" className="flex items-center gap-2 text-sm text-muted-foreground hover:text-primary transition-colors">
            <ArrowLeft size={16} />
            Back to Profile
          </Link>
          <h1 className="text-3xl font-bold mt-2">Profile Information</h1>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Edit Your Information</CardTitle>
          </CardHeader>
          <CardContent>
            <p>This is where the form to edit user profile information will go.</p>
          </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
}


--- File: userapp\src\app\profile\notifications\page.tsx ---


'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { ArrowLeft, Bell } from 'lucide-react';
import { MainLayout } from '@/components/main-layout';
import { Card, CardHeader, CardTitle, CardContent, CardDescription, CardFooter } from '@/components/ui/card';
import { useAuthStore } from '@/store/authStore';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { auth } from '@/lib/firebase';
import { useRouter } from 'next/navigation';
import { getFcmToken } from '@/lib/firebase-messaging';


export default function NotificationsPage() {
  const { user, initFcm, isLoading, isLoggedIn } = useAuthStore();
  const { toast } = useToast();
  const router = useRouter();
  const [notificationStatus, setNotificationStatus] = useState('default');
  const [isSendingTest, setIsSendingTest] = useState(false);

  useEffect(() => {
    if (typeof window !== 'undefined' && 'Notification' in window) {
      setNotificationStatus(Notification.permission);
    }
    // Redirect if not logged in after loading state is resolved
    if (!isLoading && !isLoggedIn) {
      router.push('/login');
    }
  }, [isLoading, isLoggedIn, router]);

  const handleEnableNotifications = async () => {
    if (Notification.permission === 'denied') {
      toast({
        variant: "destructive",
        title: "Notifications Blocked",
        description: "You have blocked notifications. To enable them, please update your browser settings for this site.",
      });
      return;
    }

    try {
      await initFcm();
      setNotificationStatus('granted');
      toast({
        title: "Success!",
        description: "Notifications have been enabled for this device.",
      });
    } catch (error: any) {
      const currentPermission = Notification.permission;
      setNotificationStatus(currentPermission);
      
      if (currentPermission === 'denied') {
        toast({
          variant: "destructive",
          title: "Notifications Blocked",
          description: "You have blocked notifications. To enable them, please update your browser settings for this site.",
        });
      } else {
        toast({
          variant: "destructive",
          title: "Could not enable notifications",
          description: "Permission was not granted. Please try again.",
        });
      }
      console.error("Error enabling notifications:", error);
    }
  };

  const handleSendTestNotification = async () => {
    setIsSendingTest(true);
    try {
      const currentUser = auth.currentUser;
      if (!currentUser) {
        throw new Error("You must be logged in to send a test notification.");
      }
      
      // Get the current device's token to send the test message
      const fcmToken = await getFcmToken();
      if (!fcmToken) {
        throw new Error("Could not retrieve the FCM token for this device.");
      }

      const idToken = await currentUser.getIdToken();

      const response = await fetch('/api/user/test-notification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${idToken}`
        },
        body: JSON.stringify({ token: fcmToken }) // Send the specific token
      });

      const result = await response.json();

      if (response.ok) {
        toast({
          title: "Test Notification Sent",
          description: "You should receive it shortly. Check your device!",
        });
      } else {
        console.error("API Error sending notification:", result);
        throw new Error(result.details || 'Failed to send test notification.');
      }
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: "Error Sending Test",
        description: error.message,
      });
    } finally {
      setIsSendingTest(false);
    }
  };


  return (
    <MainLayout>
      <div className="w-full max-w-4xl mx-auto">
        <div className="mb-6">
          <Link href="/profile" className="flex items-center gap-2 text-sm text-muted-foreground hover:text-primary transition-colors">
            <ArrowLeft size={16} />
            Back to Profile
          </Link>
          <h1 className="text-3xl font-bold mt-2">Notifications</h1>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Manage Order Notifications</CardTitle>
            <CardDescription>
              Enable push notifications to receive real-time updates on your order status, from confirmation to delivery.
            </CardDescription>
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <p>Loading notification status...</p>
            ) : (
              <>
                {notificationStatus === 'granted' && (
                  <Alert>
                    <Bell className="h-4 w-4" />
                    <AlertTitle>Notifications are Enabled</AlertTitle>
                    <AlertDescription>
                      You are all set to receive order updates on this device. You can manage permissions in your browser's site settings.
                    </AlertDescription>
                  </Alert>
                )}

                {notificationStatus === 'denied' && (
                  <Alert variant="destructive">
                    <Bell className="h-4 w-4" />
                    <AlertTitle>Notifications are Blocked</AlertTitle>
                    <AlertDescription>
                      To receive updates, you need to allow notifications in your browser's settings for this site. After enabling, click the button below.
                    </AlertDescription>
                  </Alert>
                )}

                 {notificationStatus === 'default' && (
                  <Alert>
                    <Bell className="h-4 w-4" />
                    <AlertTitle>Enable Notifications</AlertTitle>
                    <AlertDescription>
                      Click the button below to allow notifications and stay updated on your orders.
                    </AlertDescription>
                  </Alert>
                )}
              </>
            )}
          </CardContent>
          <CardFooter className="flex gap-4">
             <Button 
                onClick={handleEnableNotifications}
                disabled={isLoading || notificationStatus === 'granted'}
              >
                {isLoading ? 'Loading...' : notificationStatus === 'granted' ? 'Enabled' : 'Enable Notifications'}
            </Button>
            {notificationStatus === 'granted' && (
              <Button
                variant="outline"
                onClick={handleSendTestNotification}
                disabled={isLoading || isSendingTest}
              >
                {isSendingTest ? 'Sending...' : 'Send Test Notification'}
              </Button>
            )}
          </CardFooter>
        </Card>
      </div>
    </MainLayout>
  );
}


--- File: userapp\src\app\profile\page.tsx ---


'use client';

import { useRouter } from 'next/navigation';
import { useAuthStore } from '@/store/authStore';
import { MainLayout } from '@/components/main-layout';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { useEffect, useState } from 'react';
import { LogOut, ChevronRight, User as UserIcon, Heart, BookUser, Wallet, MessageSquare, Bell, Info, Star } from 'lucide-react';
import Link from 'next/link';

const QuickActionTile = ({ icon: Icon, label, href }: { icon: React.ElementType, label: string, href: string }) => (
  <Link href={href}>
    <div className="flex flex-col items-center justify-center gap-2 rounded-lg bg-muted/50 p-4 transition-colors hover:bg-muted">
      <Icon className="h-7 w-7 text-primary" />
      <span className="text-sm font-medium text-center">{label}</span>
    </div>
  </Link>
);

const SettingsItem = ({ icon: Icon, label, href }: { icon: React.ElementType, label: string, href: string }) => (
  <Link href={href}>
    <div className="flex items-center p-3 rounded-lg transition-colors hover:bg-muted/50">
      <Icon className="h-5 w-5 mr-4 text-muted-foreground" />
      <span className="flex-1 font-medium">{label}</span>
      <ChevronRight className="h-5 w-5 text-muted-foreground" />
    </div>
  </Link>
);

export default function ProfilePage() {
  const router = useRouter();
  const { isLoggedIn, user, logout } = useAuthStore();
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  useEffect(() => {
    if (isMounted && !isLoggedIn) {
      router.push('/login');
    }
  }, [isLoggedIn, router, isMounted]);

  const handleLogout = () => {
    logout();
    router.push('/');
  };

  if (!isMounted || !isLoggedIn || !user) {
    return (
       <MainLayout>
        <div className="flex items-center justify-center py-12">
            <p>Loading profile...</p>
        </div>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <div className="w-full max-w-3xl mx-auto space-y-6 pb-12">
        {/* User Info Card */}
        <Card className="overflow-hidden">
          <CardContent className="p-6 flex items-center gap-6">
             <Avatar className="h-20 w-20">
              <AvatarFallback className="text-3xl">
                {user.name.slice(0, 2).toUpperCase()}
              </AvatarFallback>
            </Avatar>
            <div>
              <h1 className="text-2xl font-bold">{user.name}</h1>
              <p className="text-muted-foreground">{user.email}</p>
              <p className="text-muted-foreground">{user.phone}</p>
            </div>
          </CardContent>
        </Card>

        {/* Quick Actions Grid */}
        <div className="grid grid-cols-3 gap-4">
            <QuickActionTile icon={BookUser} label="My Orders" href="/orders" />
            <QuickActionTile icon={MessageSquare} label="Help Center" href="/contact" />
            <QuickActionTile icon={Wallet} label="Wallet" href="/profile/wallet" />
        </div>

        {/* Primary Settings List */}
        <Card>
            <CardContent className="p-2">
                <SettingsItem icon={UserIcon} label="Profile Information" href="/profile/information" />
                <SettingsItem icon={Heart} label="Saved Addresses" href="/profile/addresses" />
                <SettingsItem icon={Wallet} label="Payment Methods" href="/profile/payments" />
                <SettingsItem icon={Star} label="My Rewards" href="/profile/rewards" />
            </CardContent>
        </Card>
        
        {/* Other Info List */}
        <Card>
            <CardContent className="p-2">
                <SettingsItem icon={Bell} label="Notifications" href="/profile/notifications" />
                <SettingsItem icon={Info} label="About Us" href="/about" />
            </CardContent>
        </Card>

        {/* Logout Button */}
        <Card>
            <CardContent className="p-4">
                 <Button variant="ghost" className="w-full justify-start text-destructive hover:text-destructive hover:bg-destructive/10" onClick={handleLogout}>
                    <LogOut className="mr-2 h-5 w-5" />
                    Logout
                </Button>
            </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
}


--- File: userapp\src\app\profile\payments\page.tsx ---


import Link from 'next/link';
import { ArrowLeft } from 'lucide-react';
import { MainLayout } from '@/components/main-layout';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';

export default function PaymentMethodsPage() {
  return (
    <MainLayout>
      <div className="w-full max-w-4xl mx-auto">
        <div className="mb-6">
          <Link href="/profile" className="flex items-center gap-2 text-sm text-muted-foreground hover:text-primary transition-colors">
            <ArrowLeft size={16} />
            Back to Profile
          </Link>
          <h1 className="text-3xl font-bold mt-2">Payment Methods</h1>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Manage Your Payment Methods</CardTitle>
          </CardHeader>
          <CardContent>
            <p>This is where users will manage their saved payment methods like credit cards.</p>
          </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
}


--- File: userapp\src\app\profile\rewards\page.tsx ---


import Link from 'next/link';
import { ArrowLeft } from 'lucide-react';
import { MainLayout } from '@/components/main-layout';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';

export default function MyRewardsPage() {
  return (
    <MainLayout>
      <div className="w-full max-w-4xl mx-auto">
        <div className="mb-6">
          <Link href="/profile" className="flex items-center gap-2 text-sm text-muted-foreground hover:text-primary transition-colors">
            <ArrowLeft size={16} />
            Back to Profile
          </Link>
          <h1 className="text-3xl font-bold mt-2">My Rewards</h1>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Your Rewards & Loyalty Points</CardTitle>
          </CardHeader>
          <CardContent>
            <p>This is where users will see their accumulated rewards and loyalty status.</p>
          </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
}


--- File: userapp\src\app\profile\wallet\page.tsx ---


import Link from 'next/link';
import { ArrowLeft } from 'lucide-react';
import { MainLayout } from '@/components/main-layout';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';

export default function WalletPage() {
  return (
    <MainLayout>
      <div className="w-full max-w-4xl mx-auto">
        <div className="mb-6">
          <Link href="/profile" className="flex items-center gap-2 text-sm text-muted-foreground hover:text-primary transition-colors">
            <ArrowLeft size={16} />
            Back to Profile
          </Link>
          <h1 className="text-3xl font-bold mt-2">My Wallet</h1>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Your Wallet Balance</CardTitle>
          </CardHeader>
          <CardContent>
            <p>This is where users will view their wallet balance and transaction history.</p>
          </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
}


--- File: userapp\src\app\register\page.tsx ---


'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuthStore } from '@/store/authStore';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import Link from 'next/link';
import { useToast } from '@/hooks/use-toast';

const registerSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters.'),
  email: z.string().email('Invalid email address.'),
  phone: z.string().min(10, 'Phone number must be at least 10 digits.'),
  password: z.string().min(6, 'Password must be at least 6 characters.'),
});

type RegisterFormValues = z.infer<typeof registerSchema>;

export default function RegisterPage() {
  const router = useRouter();
  const register = useAuthStore((state) => state.register);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  const form = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      name: '',
      email: '',
      phone: '',
      password: '',
    },
  });

  const onSubmit = async (data: RegisterFormValues) => {
    setError(null);
    const result = await register(data.name, data.email, data.phone, data.password);
    if (result.success) {
      toast({
        title: "Registration successful!",
        description: "You have been logged in.",
      });
      router.push('/');
    } else {
      setError(result.message || 'An unknown error occurred.');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-[80vh]">
      <Card className="w-full max-w-sm">
        <CardHeader>
          <div className="flex justify-between items-start">
            <div>
              <CardTitle>Create an account</CardTitle>
              <CardDescription className="mt-2">
                Enter your details below to create an account
              </CardDescription>
            </div>
            <Button asChild variant="link">
                <Link href="/login">Login</Link>
            </Button>
          </div>
        </CardHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <CardContent className="space-y-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Name</FormLabel>
                    <FormControl>
                      <Input placeholder="John Doe" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input placeholder="you@example.com" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
               <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Phone Number</FormLabel>
                    <FormControl>
                      <Input placeholder="123-456-7890" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Password</FormLabel>
                    <FormControl>
                      <Input type="password" placeholder="••••••••" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {error && <p className="text-sm font-medium text-destructive">{error}</p>}
            </CardContent>
            <CardFooter className="flex-col items-stretch">
              <Button type="submit" className="w-full" disabled={form.formState.isSubmitting}>
                {form.formState.isSubmitting ? 'Registering...' : 'Create Account'}
              </Button>
            </CardFooter>
          </form>
        </Form>
      </Card>
    </div>
  );
}


--- File: userapp\src\app\shop\[shopName]\page.tsx ---


'use client';

import { useState, useEffect } from "react";
import { ArrowLeft } from "lucide-react";
import { FloatingCart } from '@/components/floating-cart';
import { DataService } from '@/services/dataService';
import type { Shop } from '@/data/shops';
import type { Product } from '@/data/products';
import type { ShopCategory } from "@/data/shopCategories";
import Link from "next/link";
import { notFound } from "next/navigation";
import { HomeCarousel } from "@/components/home-carousel";
import { bannerImages } from "@/data/bannerImages";
import { ProductCarousel } from "@/components/product-carousel";
import { AutoProductCarousel } from "@/components/auto-product-carousel";
import { Skeleton } from "@/components/ui/skeleton";
import { ShopCategoryCircles } from "@/components/shop-category-circles";

export default function ShopPage({ params }: { params: { shopName: string } }) {
  const shopName = decodeURIComponent(params.shopName);

  const [shop, setShop] = useState<Shop | null>(null);
  const [shopCategories, setShopCategories] = useState<ShopCategory[]>([]);
  const [featuredProducts, setFeaturedProducts] = useState<Product[]>([]);
  const [topDeals, setTopDeals] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadShopData = async () => {
      setLoading(true);
      const shopData = await DataService.getShopByName(shopName);
      if (!shopData) {
        notFound();
        return;
      }
      setShop(shopData);

      const fetchedCategories = await DataService.getShopCategories(shopName);
      setShopCategories(fetchedCategories);
      
      if (fetchedCategories.length > 0) {
        const featuredProductsData = await DataService.getProducts(shopName, fetchedCategories[0].name);
        setFeaturedProducts(featuredProductsData);
      }
      
      if (fetchedCategories.length > 1) {
        const topDealsData = await DataService.getProducts(shopName, fetchedCategories[1].name);
        setTopDeals(topDealsData);
      } else if (fetchedCategories.length > 0) {
        // If only one category, use its products for the second carousel as well
        const topDealsData = await DataService.getProducts(shopName, fetchedCategories[0].name);
        setTopDeals(topDealsData);
      }

      setLoading(false);
    };
    loadShopData();
  }, [shopName]);


  if (loading || !shop) {
    return (
      <div className="bg-background min-h-screen">
        <main className="container mx-auto px-4 py-8">
            <div className="md:relative md:flex md:items-center md:justify-center md:h-14 mb-8">
                <div className="md:absolute md:left-0">
                    <Skeleton className="h-5 w-32" />
                </div>
                <div className="text-center mt-4 md:mt-0 space-y-2">
                    <Skeleton className="h-10 w-48 mx-auto" />
                    <Skeleton className="h-5 w-64 mx-auto" />
                </div>
            </div>
            
            <Skeleton className="aspect-[4/1] w-full max-w-5xl mx-auto rounded-lg mb-8" />

            <div className="py-8">
              <Skeleton className="h-8 w-1/3 mx-auto mb-6" />
              <div className="flex gap-4 overflow-hidden">
                {Array.from({ length: 7 }).map((_, i) => (
                  <div key={i} className="flex flex-col items-center gap-3 flex-shrink-0 basis-1/3 sm:basis-1/4 md:basis-1/5 lg:basis-1/6 xl:basis-[12%]">
                    <Skeleton className="h-24 w-24 rounded-full" />
                    <Skeleton className="h-4 w-20" />
                  </div>
                ))}
              </div>
            </div>

            <div className="space-y-12 mt-8">
                <div>
                    <Skeleton className="h-8 w-1/3 mb-4" />
                    <div className="flex gap-4 overflow-hidden">
                        {Array.from({ length: 5 }).map((_, i) => (
                            <div key={i} className="flex-shrink-0 w-1/2 sm:w-1/3 md:w-1/4 lg:w-1/5 xl:w-1/6 space-y-2">
                                <Skeleton className="aspect-square w-full rounded-lg" />
                                <Skeleton className="h-4 w-3/4" />
                                <Skeleton className="h-4 w-1/2" />
                            </div>
                        ))}
                    </div>
                </div>
                 <div>
                    <Skeleton className="h-8 w-1/3 mb-4" />
                    <div className="flex gap-4 overflow-hidden">
                         {Array.from({ length: 5 }).map((_, i) => (
                            <div key={i} className="flex-shrink-0 w-1/2 sm:w-1/3 md:w-1/4 lg:w-1/5 xl:w-1/6 space-y-2">
                                <Skeleton className="aspect-square w-full rounded-lg" />
                                <Skeleton className="h-4 w-3/4" />
                                <Skeleton className="h-4 w-1/2" />
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        </main>
        <FloatingCart />
      </div>
    );
  }

  return (
    <div className="bg-background min-h-screen">
      <main className="container mx-auto px-4 py-8">
        <div className="md:relative md:flex md:items-center md:justify-center md:h-14 mb-8">
            <div className="md:absolute md:left-0">
                <Link href={`/shops/${encodeURIComponent(shop.category)}`} className="flex items-center gap-2 text-sm text-muted-foreground hover:text-primary transition-colors">
                    <ArrowLeft size={16} />
                    <span>Back to {shop.category}</span>
                </Link>
            </div>
            <div className="text-center mt-4 md:mt-0">
                <h1 className="text-3xl font-headline md:text-4xl text-primary">{shop.name}</h1>
                <p className="text-base mt-1 text-muted-foreground">{shop.description}</p>
            </div>
        </div>
        
        <div className="mb-8">
          <HomeCarousel bannerImages={bannerImages} />
        </div>
        
        <ShopCategoryCircles categories={shopCategories} shopName={shop.name} />

        <div className="space-y-12 mt-8">
            {featuredProducts.length > 0 && (
                <section>
                    <h2 className="text-2xl font-bold mb-4">Best Sellers</h2>
                    <AutoProductCarousel products={featuredProducts} />
                </section>
            )}

            {topDeals.length > 0 && (
                <section>
                    <h2 className="text-2xl font-bold mb-4">New Arrivals</h2>
                    <ProductCarousel products={topDeals} />
                </section>
            )}
        </div>

      </main>
      <FloatingCart />
    </div>
  );
}


--- File: userapp\src\app\shop\[shopName]\[categoryName]\page.tsx ---



'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { ArrowLeft, Minus, Plus, Trash2 } from 'lucide-react';
import { DataService } from '@/services/dataService';
import type { Product } from '@/data/products';
import { useCartStore } from '@/store/cartStore';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { Card } from '@/components/ui/card';
import { cn } from '@/lib/utils';
import { notFound } from 'next/navigation';
import { FloatingCart } from '@/components/floating-cart';

const NewProductCard = ({ product }: { product: Product }) => {
    const { carts, addItem, updateQuantity } = useCartStore();
    const itemInCart = carts[product.shopName]?.items.find((item) => item.id === product.id);
    const quantity = itemInCart ? itemInCart.quantity : 0;
    
    const originalPrice = (product.price * 1.25).toFixed(2);
    const discount = Math.round((1 - product.price / parseFloat(originalPrice)) * 100);

    const AddToCartButton = () => (
        quantity > 0 ? (
            <div className="flex items-center border rounded-md justify-between w-full md:w-auto">
                <Button variant="ghost" size="icon" onClick={() => updateQuantity(product.id, product.shopName, quantity - 1)} className="h-8 w-8 rounded-r-none text-destructive hover:bg-destructive/10 flex-1 md:flex-none">
                    {quantity === 1 ? <Trash2 className="h-4 w-4" /> : <Minus className="h-4 w-4" />}
                </Button>
                <span className="px-2 text-center font-bold text-xs">{quantity}</span>
                <Button variant="ghost" size="icon" onClick={() => addItem(product)} className="h-8 w-8 rounded-l-none text-primary hover:bg-primary/10 flex-1 md:flex-none">
                    <Plus className="h-4 w-4" />
                </Button>
            </div>
        ) : (
            <Button
                onClick={() => addItem(product)}
                disabled={!product.inStock}
                className="h-8 rounded-md flex justify-center font-semibold items-center relative text-sm py-1.5 px-3 gap-0.5 bg-primary/10 border border-primary text-primary hover:bg-primary/20 w-full md:w-auto"
            >
                ADD
            </Button>
        )
    );

    return (
        <div className="relative flex h-full flex-col items-start border rounded-lg shadow-sm bg-card cursor-pointer hover:shadow-md transition-shadow group">
          <div className="relative w-full overflow-hidden rounded-t-lg">
            <div className="overflow-hidden flex flex-col w-full h-full aspect-square">
              <Image className="h-full w-full object-cover transition-transform group-hover:scale-105" width="270" height="270" src={product.image} alt={product.name} data-ai-hint={product.dataAiHint} />
            </div>
          </div>
          
          <div className="w-full p-2.5 flex-grow flex flex-col justify-between">
              {/* Top section */}
              <div>
                  <div className="flex w-full flex-wrap gap-1 mb-1.5">
                      <div className="bg-muted px-1 py-0.5 rounded-md">
                          <div className="flex items-center gap-0.5">
                          <div className="w-2.5">
                              <div className="overflow-hidden flex flex-col w-full h-full aspect-square">
                              <Image className="h-full w-full" width="10" height="10" src="https://placehold.co/10x10.png" alt="delivery time" data-ai-hint="clock" />
                              </div>
                          </div>
                          <div className="text-[10px] font-bold uppercase text-foreground">
                              15 mins
                          </div>
                          </div>
                      </div>
                  </div>
                  <div className="text-sm font-semibold line-clamp-2 text-foreground h-10">
                      {product.name}
                  </div>
                  <span className="text-xs font-medium text-muted-foreground">{product.unit}</span>
              </div>

              {/* Bottom section */}
              <div className="w-full mt-4 flex flex-col md:flex-row md:items-end md:justify-between gap-2">
                  <div>
                      <div className="flex items-baseline gap-1.5">
                          <span className="text-base font-bold text-foreground">₹{product.price.toFixed(2)}</span>
                          <span className="text-xs line-through text-muted-foreground">₹{originalPrice}</span>
                      </div>
                       {discount > 0 && (
                          <span className="text-xs font-semibold text-green-600">
                          {discount}% OFF
                          </span>
                      )}
                  </div>
                  <AddToCartButton />
              </div>
          </div>
        </div>
    );
};

const CategoryNavigation = ({ categories, activeCategory, onCategoryClick }: { categories: string[], activeCategory: string | null, onCategoryClick: (category: string) => void }) => {
    return (
      <nav className="w-24 md:w-28 bg-card flex-shrink-0 overflow-y-auto border-r">
        <div className="flex flex-col items-center p-1">
          {categories.map((category) => (
            <div
              key={category}
              className="py-2 w-full cursor-pointer"
              onClick={() => onCategoryClick(category)}
            >
              <div className="relative flex flex-col items-center justify-center gap-1">
                <div className="relative h-16 w-16 overflow-hidden rounded-lg">
                  <div className="flex h-full items-center justify-center rounded-md bg-muted">
                    <div className={cn(
                        "transition-all duration-300 ease-in-out absolute h-20 w-16",
                        activeCategory === category ? 'bottom-[-8px] scale-110' : 'bottom-[-20px]'
                    )}>
                      <Image
                        src="https://placehold.co/90x90.png"
                        alt={category}
                        width={64}
                        height={80}
                        className="h-full w-full object-contain"
                        data-ai-hint="product category"
                      />
                    </div>
                  </div>
                </div>
                <div className={cn(
                    "text-xs text-center w-full break-words px-1 h-8 flex items-center justify-center",
                    activeCategory === category ? 'font-bold text-foreground' : 'font-medium text-muted-foreground'
                )}>
                  {category}
                </div>
                {activeCategory === category && <div className="absolute right-0 top-0 h-full w-1 rounded-l-lg bg-primary"></div>}
              </div>
            </div>
          ))}
        </div>
      </nav>
    );
};

const ProductGrid = ({ products }: { products: Product[] }) => {
  if (products.length === 0) {
    return <p className="col-span-full text-center text-muted-foreground py-10 w-full">No products found in this sub-category.</p>;
  }
  return (
    <div className="flex-1 overflow-y-auto bg-muted/30 p-2">
      <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-2">
        {products.map((product) => (
          <NewProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  );
};


export default function CategoryPage({ params }: { params: { shopName: string; categoryName: string } }) {
  const decodedShopName = decodeURIComponent(params.shopName);
  const decodedCategoryName = decodeURIComponent(params.categoryName);

  const [allProducts, setAllProducts] = useState<Product[]>([]);
  const [subCategories, setSubCategories] = useState<string[]>([]);
  const [activeSubCategory, setActiveSubCategory] = useState<string | null>(null);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchCategoryData = async () => {
      setLoading(true);
      try {
        const fetchedProducts = await DataService.getProducts(decodedShopName, decodedCategoryName);
        if (!fetchedProducts || fetchedProducts.length === 0) {
            setAllProducts([]);
            setSubCategories([]);
            setFilteredProducts([]);
        } else {
            setAllProducts(fetchedProducts);

            const uniqueSubCategories = [...new Set(fetchedProducts.map(p => p.category))];
            setSubCategories(uniqueSubCategories);

            if (uniqueSubCategories.length > 0) {
              const firstSubCategory = uniqueSubCategories[0];
              setActiveSubCategory(firstSubCategory);
              setFilteredProducts(fetchedProducts.filter(p => p.category === firstSubCategory));
            } else {
              setFilteredProducts(fetchedProducts);
            }
        }
      } catch (error) {
        console.error("Failed to fetch category data:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchCategoryData();
  }, [decodedShopName, decodedCategoryName]);

  useEffect(() => {
    if (activeSubCategory) {
      setFilteredProducts(allProducts.filter(p => p.category === activeSubCategory));
    } else {
      setFilteredProducts(allProducts);
    }
  }, [activeSubCategory, allProducts]);

  const handleSubCategoryClick = (subCategoryName: string) => {
    setActiveSubCategory(subCategoryName);
  };

  if (loading) {
    return (
        <div className="bg-background min-h-screen">
            <main className="container mx-auto py-8 px-0 sm:px-2 md:px-4">
                <div className="px-4 sm:px-0">
                  <Skeleton className="h-6 w-1/4 mb-4" />
                  <Skeleton className="h-10 w-1/2 mb-8" />
                </div>
                
                <Card className="flex rounded-none sm:rounded-lg overflow-hidden h-[70vh] md:h-[calc(1.5*24rem)] lg:h-[calc(2*24rem)]">
                  <div className="w-24 md:w-28 border-r p-1">
                    <div className="space-y-4">
                      {Array.from({ length: 7 }).map((_, i) => (
                        <div key={i} className="flex flex-col items-center gap-2 py-2">
                          <Skeleton className="h-16 w-16 rounded-lg" />
                          <Skeleton className="h-4 w-16" />
                        </div>
                      ))}
                    </div>
                  </div>
                  <div className="flex-1 p-2 bg-muted/30">
                      <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-2">
                          {Array.from({ length: 18 }).map((_, i) => (
                              <div key={i} className="space-y-3 p-2.5 border rounded-lg bg-card h-full">
                                <Skeleton className="aspect-square w-full rounded-lg" />
                                <Skeleton className="h-4 w-3/4" />
                                <Skeleton className="h-4 w-1/4" />
                                <Skeleton className="h-10 w-full" />
                              </div>
                          ))}
                      </div>
                  </div>
                </Card>
            </main>
            <FloatingCart />
        </div>
    );
  }

  return (
    <div className="bg-background min-h-screen">
      <main className="container mx-auto py-8 px-0 sm:px-2 md:px-4">
        <div className="px-4 sm:px-0">
          <div className="mb-4">
            <Link href={`/shop/${params.shopName}`} className="flex items-center gap-2 text-sm text-muted-foreground hover:text-primary transition-colors">
              <ArrowLeft size={16} />
              <span>Back to {decodedShopName}</span>
            </Link>
          </div>

          <div className="mb-8">
              <h1 className="text-4xl font-bold">{decodedCategoryName}</h1>
              <p className="text-muted-foreground mt-1">Browse products in {decodedCategoryName} from {decodedShopName}</p>
          </div>
        </div>
        
        <Card className="flex rounded-none sm:rounded-lg overflow-hidden h-[70vh] md:h-[calc(1.5*24rem)] lg:h-[calc(2*24rem)]">
            <CategoryNavigation categories={subCategories} activeCategory={activeSubCategory} onCategoryClick={handleSubCategoryClick} />
            <ProductGrid products={filteredProducts} />
        </Card>
      </main>
      <FloatingCart />
    </div>
  );
}


--- File: userapp\src\app\shops\[category]\page.tsx ---

import Link from 'next/link';
import { MainLayout } from '@/components/main-layout';
import { Card, CardHeader, CardTitle, CardContent, CardDescription, CardFooter } from '@/components/ui/card';
import { DataService } from '@/services/dataService';
import { notFound } from 'next/navigation';
import { ArrowLeft } from 'lucide-react';
import { HomeCarousel } from '@/components/home-carousel';
import { bannerImages } from '@/data/bannerImages';

export default async function ShopsPage({ params }: { params: { category: string } }) {
  const categoryName = decodeURIComponent(params.category);
  const shops = await DataService.getShopsByCategory(categoryName);
  const categories = await DataService.getCategories();

  if (!shops || shops.length === 0) {
    notFound();
  }

  return (
    <MainLayout categories={categories}>
      <div className="w-full max-w-6xl mx-auto">
        <div className="space-y-8">
          <div className="md:relative md:flex md:items-center md:justify-center md:h-14">
            <div className="md:absolute md:left-0">
              <Link href="/" className="flex items-center gap-2 text-sm text-muted-foreground hover:text-primary transition-colors">
                <ArrowLeft size={16} />
                Back to Categories
              </Link>
            </div>
            <div className="text-center mt-4 md:mt-0">
              <h1 className="text-3xl font-headline md:text-4xl text-primary">{categoryName}</h1>
              <p className="text-base mt-1 text-muted-foreground">Select a shop to start your order</p>
            </div>
          </div>
          
          <HomeCarousel bannerImages={bannerImages} />

          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
            {shops.map((shop) => (
              <Link href={`/shop/${encodeURIComponent(shop.name)}`} key={shop.id}>
                <Card className="overflow-hidden hover:shadow-xl transition-shadow duration-300 h-full flex flex-col group">
                  <CardHeader className="p-0">
                    <div className="bg-muted h-32 flex items-center justify-center text-5xl group-hover:scale-110 transition-transform duration-300">
                      {shop.image}
                    </div>
                  </CardHeader>
                  <CardContent className="p-4 flex-grow">
                    <CardTitle className="text-xl">{shop.name}</CardTitle>
                    <CardDescription className="text-sm mt-1">{shop.description}</CardDescription>
                  </CardContent>
                  <CardFooter className="flex justify-between items-center p-4 pt-0">
                    <div className="flex items-center gap-2 text-sm">
                      <span className="text-yellow-500">⭐</span>
                      <span>{shop.rating}</span>
                    </div>
                    <span className="text-sm text-muted-foreground">{shop.deliveryTime}</span>
                  </CardFooter>
                </Card>
              </Link>
            ))}
          </div>
        </div>
      </div>
    </MainLayout>
  );
}


--- File: userapp\src\app\track-order\page.tsx ---


'use client';

import { Suspense, useEffect, useState } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import { ArrowLeft, CheckCircle, Package, Truck, Home, Circle, MapPin } from 'lucide-react';
import { useAuthStore, type Order } from '@/store/authStore';
import { MainLayout } from '@/components/main-layout';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { cn } from '@/lib/utils';
import Image from 'next/image';

const StatusStep = ({ icon: Icon, title, description, isCompleted, isCurrent }: {
  icon: React.ElementType,
  title: string,
  description: string,
  isCompleted: boolean,
  isCurrent: boolean,
}) => (
  <div className="flex items-start gap-4">
    <div className="flex flex-col items-center">
      <div className={cn(
        "h-10 w-10 rounded-full flex items-center justify-center border-2",
        isCompleted ? "bg-primary border-primary text-primary-foreground" : "bg-muted border-border text-muted-foreground",
        isCurrent && "animate-pulse border-primary"
      )}>
        {isCompleted ? <CheckCircle size={20} /> : <Icon size={20} />}
      </div>
      <div className="w-0.5 h-16 bg-border mt-2"></div>
    </div>
    <div>
      <h4 className={cn("font-semibold", isCompleted && "text-primary")}>{title}</h4>
      <p className="text-sm text-muted-foreground">{description}</p>
    </div>
  </div>
);

function TrackOrderContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const orderId = searchParams.get('orderId');
  const { user, isLoggedIn } = useAuthStore();
  
  const [order, setOrder] = useState<Order | null>(null);
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
    if (!isLoggedIn) {
      router.push('/login');
    }
  }, [isLoggedIn, router]);

  useEffect(() => {
    if (user && orderId) {
      const foundOrder = user.orders.find(o => o.id === orderId);
      setOrder(foundOrder || null);
    }
  }, [user, orderId]);

  if (!isMounted) return <div>Loading...</div>;

  if (!order) {
    return (
      <MainLayout>
        <div className="text-center py-16">
          <h2 className="text-xl font-semibold">Order not found</h2>
          <p className="mt-2 text-sm text-muted-foreground">We couldn't find the order you're looking for.</p>
          <Button asChild className="mt-6">
            <Link href="/orders">View My Orders</Link>
          </Button>
        </div>
      </MainLayout>
    );
  }

  const statusLevels = ['Processing', 'Shipped', 'Out for Delivery', 'Delivered'];
  const currentStatusIndex = statusLevels.indexOf(order.status);
  const progressValue = ((currentStatusIndex + 1) / statusLevels.length) * 100;

  const steps = [
    { icon: Circle, title: 'Order Confirmed', description: 'We have received your order.' },
    { icon: Package, title: 'Shipped', description: 'Your order has been shipped.' },
    { icon: Truck, title: 'Out for Delivery', description: 'Your order is on its way.' },
    { icon: Home, title: 'Delivered', description: 'Your order has been delivered.' },
  ];

  return (
    <MainLayout>
      <div className="w-full max-w-4xl mx-auto">
        <div className="mb-6">
          <Link href="/orders" className="flex items-center gap-2 text-sm text-muted-foreground hover:text-primary transition-colors">
            <ArrowLeft size={16} />
            Back to My Orders
          </Link>
          <div className="mt-4 flex flex-col md:flex-row md:items-center md:justify-between gap-2">
            <div>
              <h1 className="text-3xl font-bold">Track Order #{order.id.slice(-6)}</h1>
              <p className="text-muted-foreground">Estimated Delivery: {new Date(order.estimatedDelivery).toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata', year: 'numeric', month: 'long', day: 'numeric' })}</p>
            </div>
            <div className="text-lg font-bold">
              Total: ₹{order.total.toFixed(2)}
            </div>
          </div>
        </div>
        
        <Card className="mb-6">
            <CardContent className="h-64 flex items-center justify-center bg-muted/50 p-6 rounded-lg">
                <div className="text-center">
                    <MapPin className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                    <p className="text-muted-foreground">Google Map will be displayed here.</p>
                </div>
            </CardContent>
        </Card>

        <Card className="mb-6">
          <CardContent className="p-6">
            <h3 className="font-semibold mb-2">Order Status: {order.status}</h3>
            <Progress value={progressValue} className="w-full" />
            <div className="flex justify-between text-xs text-muted-foreground mt-2">
              <span>Confirmed</span>
              <span>Shipped</span>
              <span>On its way</span>
              <span>Delivered</span>
            </div>
          </CardContent>
        </Card>

        <div className="grid md:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Shipment Journey</CardTitle>
            </CardHeader>
            <CardContent>
              {steps.map((step, index) => (
                <StatusStep 
                  key={step.title}
                  icon={step.icon}
                  title={step.title}
                  description={step.description}
                  isCompleted={currentStatusIndex >= index}
                  isCurrent={currentStatusIndex === index}
                />
              ))}
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Order Summary</CardTitle>
              <CardDescription>
                {order.items.length} {order.items.length === 1 ? 'item' : 'items'}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {order.items.map(item => (
                  <div key={item.id} className="flex items-center gap-4">
                    <Image src={item.image} alt={item.name} width={64} height={64} className="rounded-md border" data-ai-hint={item.dataAiHint}/>
                    <div className="flex-1">
                      <p className="font-semibold">{item.name}</p>
                      <p className="text-sm text-muted-foreground">Qty: {item.quantity}</p>
                    </div>
                    <p className="font-medium">₹{(item.price * item.quantity).toFixed(2)}</p>
                  </div>
                ))}
              </div>
              <Separator className="my-4"/>
              <div className="space-y-1 text-sm">
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Subtotal</span>
                  <span>₹{order.total.toFixed(2)}</span>
                </div>
                <div className="flex justify-between font-bold">
                  <span>Total Paid</span>
                  <span>₹{order.total.toFixed(2)}</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </MainLayout>
  );
}

export default function TrackOrderPage() {
    return (
        <Suspense fallback={<div>Loading...</div>}>
            <TrackOrderContent />
        </Suspense>
    )
}


--- File: userapp\src\components\address-picker.tsx ---


'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { LocateFixed, Check, Loader2 } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from './ui/alert';
import type { Address } from '@/store/authStore';

interface AddressPickerProps {
    onSave: (address: Omit<Address, 'id'>) => void;
    existingAddress?: Address | null;
    isSaving?: boolean;
}

export function AddressPicker({ onSave, existingAddress, isSaving = false }: AddressPickerProps) {
    const [position, setPosition] = useState<{ lat: number, lng: number } | null>(null);
    const [addressLabel, setAddressLabel] = useState('');
    const [addressLine, setAddressLine] = useState('');
    const [city, setCity] = useState('');
    const [zip, setZip] = useState('');

    const [status, setStatus] = useState<'idle' | 'loading' | 'success' | 'error'>('idle');
    const { toast } = useToast();

    useEffect(() => {
        if (existingAddress) {
            setAddressLabel(existingAddress.name);
            const addressParts = existingAddress.address.split(', ');
            setAddressLine(addressParts[0] || '');
            setCity(addressParts[1] || '');
            setZip(addressParts[2] || '');
            if (existingAddress.latitude && existingAddress.longitude) {
                setPosition({ lat: existingAddress.latitude, lng: existingAddress.longitude });
            }
        }
    }, [existingAddress]);

    const getCurrentLocation = () => {
        setStatus('loading');
        navigator.geolocation.getCurrentPosition(
            (pos) => {
                const newPos = { lat: pos.coords.latitude, lng: pos.coords.longitude };
                setPosition(newPos);
                                
                setStatus('success');
                 toast({
                    title: 'Location Fetched!',
                    description: 'Your current location coordinates have been captured.',
                });
            },
            (error) => {
                console.error("Geolocation error:", error);
                setStatus('error');
                toast({
                    variant: 'destructive',
                    title: 'Location Access Denied',
                    description: 'Please enable location permissions in your browser settings.',
                });
            }
        );
    };

    const handleSave = () => {
        if (!addressLabel || !addressLine || !city || !zip) {
             toast({
                variant: 'destructive',
                title: 'Missing Information',
                description: 'Please fill out all address fields.',
            });
            return;
        }
        
        const fullAddress = `${addressLine}, ${city}, ${zip}`;
        
        onSave({
            name: addressLabel,
            address: fullAddress,
            latitude: position?.lat ?? null,
            longitude: position?.lng ?? null,
        });
    };

    return (
        <div className="flex flex-col h-full gap-4 py-4">
             {status === 'error' && (
                <Alert variant="destructive">
                    <AlertTitle>Could Not Fetch Location</AlertTitle>
                    <AlertDescription>
                        Permission was denied or an error occurred. You can still enter your address manually.
                    </AlertDescription>
                </Alert>
            )}

             <Button onClick={getCurrentLocation} disabled={status === 'loading'} variant="outline">
                <LocateFixed className="mr-2 h-4 w-4" />
                {status === 'loading' ? 'Fetching Location...' : 'Get GPS Location'}
            </Button>

            <div className="space-y-4">
                <div>
                    <Label htmlFor="address-label">Address Label</Label>
                    <Input 
                        id="address-label"
                        value={addressLabel}
                        onChange={(e) => setAddressLabel(e.target.value)}
                        placeholder="e.g., Home, Work" 
                    />
                </div>
                <div>
                     <Label htmlFor="address-line">Address</Label>
                     <Input 
                        id="address-line"
                        value={addressLine}
                        onChange={(e) => setAddressLine(e.target.value)}
                        placeholder="Apt #, Street Name"
                    />
                </div>
                 <div>
                     <Label htmlFor="city">City</Label>
                     <Input 
                        id="city"
                        value={city}
                        onChange={(e) => setCity(e.target.value)}
                        placeholder="e.g., New York"
                    />
                </div>
                 <div>
                     <Label htmlFor="zip">ZIP Code</Label>
                     <Input 
                        id="zip"
                        value={zip}
                        onChange={(e) => setZip(e.target.value)}
                        placeholder="e.g., 10001"
                    />
                </div>
                 {position && (
                    <p className="text-xs text-muted-foreground">
                        GPS Captured: {position.lat.toFixed(4)}, {position.lng.toFixed(4)}
                    </p>
                )}
                <Button onClick={handleSave} className="w-full" disabled={!addressLabel || !addressLine || !city || !zip || isSaving}>
                    {isSaving ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Check className="mr-2 h-4 w-4" />}
                    {isSaving ? 'Saving...' : 'Save Address'}
                </Button>
            </div>
        </div>
    );
}


--- File: userapp\src\components\auto-product-carousel.tsx ---


"use client"

import type { Product } from '@/data/products';
import { ProductCard } from './product-card';
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from '@/components/ui/carousel';
import Autoplay from 'embla-carousel-autoplay';

interface AutoProductCarouselProps {
  products: Product[];
}

export function AutoProductCarousel({ products }: AutoProductCarouselProps) {
  if (!products || products.length === 0) {
    return null;
  }

  return (
    <Carousel
      opts={{
        align: 'start',
        loop: true,
      }}
      plugins={[
        Autoplay({
          delay: 3000,
          stopOnInteraction: true,
        }),
      ]}
      className="w-full"
    >
      <CarouselContent className="-ml-4">
        {products.map((product) => (
          <CarouselItem key={product.id} className="pl-4 basis-1/2 sm:basis-1/3 md:basis-1/4 lg:basis-1/5 xl:basis-1/6">
            <ProductCard product={product} />
          </CarouselItem>
        ))}
      </CarouselContent>
      <CarouselPrevious className="absolute -left-4 top-1/2 -translate-y-1/2 hidden md:flex" />
      <CarouselNext className="absolute -right-4 top-1/2 -translate-y-1/2 hidden md:flex" />
    </Carousel>
  );
}


--- File: userapp\src\components\category-navbar.tsx ---

"use client";

import * as React from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { motion } from 'framer-motion';
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from '@/components/ui/carousel';
import { getIcon } from '@/lib/iconMapper';
import { cn } from '@/lib/utils';
import type { NavItem as CategoryNavItem } from '@/data/categories';

interface CategoryNavBarProps {
  categories: CategoryNavItem[];
}

export function CategoryNavBar({ categories }: CategoryNavBarProps) {
  const pathname = usePathname();

  return (
    <div className="sticky top-[80px] z-30 w-full border-b bg-background/95 backdrop-blur-sm">
      <div className="container px-4">
        <Carousel
          opts={{
            align: 'start',
            dragFree: true,
          }}
          className="w-full"
        >
          <CarouselContent className="-ml-4">
            {categories.map((category, index) => {
              const Icon = getIcon(category.icon);
              const href = `/shops/${encodeURIComponent(category.name)}`;
              const isActive = pathname === href;

              return (
                <CarouselItem key={index} className="basis-auto pl-4">
                  <Link
                    href={href}
                    className={cn(
                      'relative flex items-center gap-2 pb-3 pt-2 text-sm font-medium text-muted-foreground transition-colors hover:text-primary',
                      isActive && 'text-primary'
                    )}
                  >
                    <Icon className="h-5 w-5 flex-shrink-0" />
                    <span className="shrink-0">{category.name}</span>
                    {isActive && (
                      <motion.div
                        layoutId="category-underline"
                        className="absolute bottom-0 left-0 right-0 h-0.5 bg-primary"
                        transition={{ type: 'spring', stiffness: 500, damping: 30 }}
                      />
                    )}
                  </Link>
                </CarouselItem>
              );
            })}
          </CarouselContent>
          <CarouselPrevious className="absolute -left-4 top-1/2 -translate-y-1/2 hidden h-8 w-8 md:flex" />
          <CarouselNext className="absolute -right-4 top-1/2 -translate-y-1/2 hidden h-8 w-8 md:flex" />
        </Carousel>
      </div>
    </div>
  );
}


--- File: userapp\src\components\deal-card.tsx ---

"use client";

import Image from 'next/image';
import Link from 'next/link';
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from '@/components/ui/carousel';
import { Card } from '@/components/ui/card';
import { cn } from '@/lib/utils';

interface Deal {
  headerImage: {
    src: string;
    alt: string;
    dataAiHint: string;
  };
  items: {
    src: string;
    alt: string;
    href: string;
    dataAiHint: string;
  }[];
  bgColor: string;
  buttonTheme: 'light' | 'dark';
}

interface DealCardProps {
  deal: Deal;
}

export function DealCard({ deal }: DealCardProps) {
  return (
    <Card className="relative w-full overflow-hidden rounded-xl border-none group aspect-[2.4/1]">
      <Image
        src={deal.headerImage.src}
        alt={deal.headerImage.alt}
        fill
        className="object-cover transition-transform duration-500 group-hover:scale-105"
        data-ai-hint={deal.headerImage.dataAiHint}
      />
      <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent" aria-hidden="true" />
      
      <div className="relative z-10 flex h-full w-full flex-col justify-end">
        <Carousel
          opts={{
            align: 'start',
            dragFree: true,
          }}
          className="w-full"
        >
          <CarouselContent className="pb-4 -ml-4 pl-4">
            {deal.items.map((item, index) => (
              <CarouselItem key={index} className="basis-auto">
                <Link href={item.href}>
                  <div className="h-[100px] w-[85px] relative transition-transform duration-300 hover:scale-110 hover:-translate-y-2">
                      <Image
                          src={item.src}
                          alt={item.alt}
                          fill
                          className="object-contain drop-shadow-lg"
                          data-ai-hint={item.dataAiHint}
                      />
                  </div>
                </Link>
              </CarouselItem>
            ))}
          </CarouselContent>
          <CarouselPrevious 
            className={cn(
              "absolute left-5 top-1/2 -translate-y-1/2 z-10 h-8 w-8",
              deal.buttonTheme === 'dark' && 'bg-black/50 text-white border-none hover:bg-black/70 hover:text-white',
              deal.buttonTheme === 'light' && 'bg-white/50 text-black border-none hover:bg-white/70 hover:text-black'
            )} 
          />
          <CarouselNext 
            className={cn(
              "absolute right-5 top-1/2 -translate-y-1/2 z-10 h-8 w-8",
              deal.buttonTheme === 'dark' && 'bg-black/50 text-white border-none hover:bg-black/70 hover:text-white',
              deal.buttonTheme === 'light' && 'bg-white/50 text-black border-none hover:bg-white/70 hover:text-black'
            )} 
          />
        </Carousel>
      </div>
    </Card>
  );
}


--- File: userapp\src\components\deals-section.tsx ---

import { DealCard } from "./deal-card";

const dealsData = [
  {
    headerImage: {
      src: 'https://placehold.co/800x340.png',
      alt: 'Electronics Deals',
      dataAiHint: 'electronics sale',
    },
    items: [
      { src: 'https://placehold.co/100x120.png', alt: 'Audio Devices', href: '#', dataAiHint: 'headphones' },
      { src: 'https://placehold.co/100x120.png', alt: 'Home Gadgets', href: '#', dataAiHint: 'smart home' },
      { src: 'https://placehold.co/100x120.png', alt: 'Tech Accessories', href: '#', dataAiHint: 'tech accessories' },
      { src: 'https://placehold.co/100x120.png', alt: 'Charging Needs', href: '#', dataAiHint: 'phone charger' },
      { src: 'https://placehold.co/100x120.png', alt: 'Personal Care Electronics', href: '#', dataAiHint: 'electric razor' },
      { src: 'https://placehold.co/100x120.png', alt: 'Mobiles', href: '#', dataAiHint: 'smartphone' },
    ],
    bgColor: 'bg-black',
    buttonTheme: 'dark' as const,
  },
  {
    headerImage: {
      src: 'https://placehold.co/800x340.png',
      alt: 'Beauty Deals',
      dataAiHint: 'beauty products',
    },
    items: [
      { src: 'https://placehold.co/100x120.png', alt: 'Lipsticks', href: '#', dataAiHint: 'lipstick' },
      { src: 'https://placehold.co/100x120.png', alt: 'Face Creams', href: '#', dataAiHint: 'face cream' },
      { src: 'https://placehold.co/100x120.png', alt: 'Eye Makeup', href: '#', dataAiHint: 'eyeliner mascara' },
      { src: 'https://placehold.co/100x120.png', alt: 'Nail Polish', href: '#', dataAiHint: 'nail polish' },
      { src: 'https://placehold.co/100x120.png', alt: 'Korean Beauty', href: '#', dataAiHint: 'korean skincare' },
      { src: 'https://placehold.co/100x120.png', alt: 'Deals of the day', href: '#', dataAiHint: 'sale discount' },
    ],
    bgColor: 'bg-rose-100',
    buttonTheme: 'light' as const,
  }
];

export function DealsSection() {
  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 my-8">
      {dealsData.map((deal, index) => (
        <DealCard key={index} deal={deal} />
      ))}
    </div>
  );
}


--- File: userapp\src\components\delivery-tip-selector.tsx ---


'use client';

import { useState } from 'react';
import { Heart } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { cn } from '@/lib/utils';

interface DeliveryTipSelectorProps {
  onTipChange: (tip: number) => void;
}

export function DeliveryTipSelector({ onTipChange }: DeliveryTipSelectorProps) {
  const presetTips = [10, 20, 30, 50];
  const [selectedTip, setSelectedTip] = useState<number | 'custom'>(0);
  const [customTip, setCustomTip] = useState('');

  const handleTipSelect = (tip: number) => {
    setSelectedTip(tip);
    setCustomTip('');
    onTipChange(tip);
  };
  
  const handleCustomClick = () => {
    setSelectedTip('custom');
    if (parseInt(customTip) > 0) {
      onTipChange(parseInt(customTip));
    } else {
      onTipChange(0);
    }
  }

  const handleCustomTipChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.replace(/[^0-9]/g, '');
    setCustomTip(value);
    onTipChange(Number(value) || 0);
  };

  return (
    <div className="space-y-3">
      <div className="flex items-center gap-2">
        <Heart className="h-5 w-5 text-primary" />
        <p className="font-semibold">Tip for your delivery partner</p>
      </div>
      <p className="text-sm text-muted-foreground">
        100% of the tip goes to your delivery partner.
      </p>
      <div className="flex flex-wrap gap-2">
        {presetTips.map((tip) => (
          <Button
            key={tip}
            variant={selectedTip === tip ? 'default' : 'outline'}
            onClick={() => handleTipSelect(tip)}
            className="rounded-full"
          >
            ₹{tip}
          </Button>
        ))}
        <div className="flex items-center gap-2">
          <Button
            variant={selectedTip === 'custom' ? 'default' : 'outline'}
            onClick={handleCustomClick}
            className="rounded-full"
          >
            Custom
          </Button>
          {selectedTip === 'custom' && (
            <div className="relative w-24">
              <span className="absolute left-3 top-1/2 -translate-y-1/2 text-sm">₹</span>
              <Input
                type="text"
                value={customTip}
                onChange={handleCustomTipChange}
                placeholder="Amount"
                className="pl-6"
              />
            </div>
          )}
        </div>
      </div>
    </div>
  );
}


--- File: userapp\src\components\featured-products-section.tsx ---


'use client';

import { useState, useEffect } from 'react';
import { DataService } from '@/services/dataService';
import type { ShopCategory } from '@/data/shopCategories';
import type { Product } from '@/data/products';
import { ProductCard } from './product-card';
import { Skeleton } from './ui/skeleton';
import { cn } from '@/lib/utils';
import { ScrollArea } from './ui/scroll-area';
import { Card } from './ui/card';

const FEATURED_SHOP_NAME = "FreshMart Supermarket";

export function FeaturedProductsSection() {
  const [categories, setCategories] = useState<ShopCategory[]>([]);
  const [activeCategory, setActiveCategory] = useState<string | null>(null);
  const [products, setProducts] = useState<Product[]>([]);
  const [loadingCategories, setLoadingCategories] = useState(true);
  const [loadingProducts, setLoadingProducts] = useState(false);

  useEffect(() => {
    const fetchInitialData = async () => {
      setLoadingCategories(true);
      try {
        const fetchedCategories = await DataService.getShopCategories(FEATURED_SHOP_NAME);
        setCategories(fetchedCategories);

        if (fetchedCategories.length > 0) {
          const firstCategory = fetchedCategories[0].name;
          setActiveCategory(firstCategory);
          setLoadingProducts(true);
          const fetchedProducts = await DataService.getProducts(FEATURED_SHOP_NAME, firstCategory);
          setProducts(fetchedProducts);
        }
      } catch (error) {
        console.error("Failed to fetch featured shop data:", error);
      } finally {
        setLoadingCategories(false);
        setLoadingProducts(false);
      }
    };

    fetchInitialData();
  }, []);

  const handleCategoryClick = async (categoryName: string) => {
    if (categoryName === activeCategory) return;
    setActiveCategory(categoryName);
    setLoadingProducts(true);
    setProducts([]);
    try {
      const fetchedProducts = await DataService.getProducts(FEATURED_SHOP_NAME, categoryName);
      setProducts(fetchedProducts);
    } catch (error) {
      console.error("Failed to fetch products for category:", categoryName, error);
    } finally {
      setLoadingProducts(false);
    }
  };

  if (loadingCategories) {
    return (
      <Card className="w-full p-4 md:p-6">
        <Skeleton className="h-8 w-1/3 mb-6" />
        <div className="flex flex-col md:flex-row gap-6" style={{ minHeight: '500px' }}>
          <div className="w-full md:w-1/4">
            <div className="space-y-2">
              {Array.from({ length: 5 }).map((_, i) => <Skeleton key={i} className="h-12 w-full" />)}
            </div>
          </div>
          <div className="w-full md:w-3/4">
            <div className="grid grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
              {Array.from({ length: 8 }).map((_, i) => (
                <div key={i} className="bg-card border rounded-xl p-3 space-y-3">
                  <Skeleton className="h-32 w-full rounded-lg" />
                  <Skeleton className="h-4 w-3/4 mt-2" />
                  <Skeleton className="h-4 w-1/4" />
                </div>
              ))}
            </div>
          </div>
        </div>
      </Card>
    );
  }

  return (
    <section className="w-full">
        <h2 className="text-3xl font-bold mb-4">From {FEATURED_SHOP_NAME}</h2>
        <Card className="overflow-hidden">
            <div className="flex flex-col md:flex-row" style={{ height: '70vh', maxHeight: '700px' }}>
                <aside className="w-full md:w-1/4 lg:w-1/5 border-b md:border-b-0 md:border-r bg-muted/30">
                    <ScrollArea className="h-full">
                        <nav className="p-2">
                            <ul>
                                {categories.map((category) => (
                                <li key={category.name}>
                                    <button
                                    onClick={() => handleCategoryClick(category.name)}
                                    className={cn(
                                        "w-full text-left px-4 py-3 rounded-lg text-sm font-medium transition-colors",
                                        activeCategory === category.name
                                        ? "bg-primary/10 text-primary font-semibold"
                                        : "text-muted-foreground hover:bg-muted/80"
                                    )}
                                    >
                                    {category.name}
                                    </button>
                                </li>
                                ))}
                            </ul>
                        </nav>
                    </ScrollArea>
                </aside>

                <main className="w-full md:w-3/4 lg:w-4/5 h-full">
                    <ScrollArea className="h-full">
                        <div className="p-4">
                            {loadingProducts ? (
                                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                                    {Array.from({ length: 8 }).map((_, i) => (
                                       <div key={i} className="bg-card border rounded-xl p-3 space-y-3">
                                            <Skeleton className="aspect-square w-full rounded-lg" />
                                            <Skeleton className="h-4 w-3/4 mt-2" />
                                            <Skeleton className="h-4 w-1/4" />
                                            <div className="flex justify-between items-center pt-2">
                                                <Skeleton className="h-6 w-1/3" />
                                                <Skeleton className="h-9 w-16" />
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            ) : (
                                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                                    {products.length > 0 ? products.map((product) => (
                                        <ProductCard key={product.id} product={product} />
                                    )) : <p className="col-span-full text-center text-muted-foreground">No products found in this category.</p>}
                                </div>
                            )}
                        </div>
                    </ScrollArea>
                </main>
            </div>
        </Card>
    </section>
  );
}


--- File: userapp\src\components\floating-cart.tsx ---


"use client";

import React from 'react';
import Link from 'next/link';
import { ShoppingCart, X, ChevronRight } from 'lucide-react';
import { useCartStore, type ShopCart } from '@/store/cartStore';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from '@/components/ui/button';

export function FloatingCart() {
  const { 
    carts, 
    isOpen, 
    toggleCart, 
    setCartOpen, 
    clearAllCarts
  } = useCartStore();

  const cartArray = Object.values(carts);
  const grandTotalItems = cartArray.reduce((sum, cart) => sum + cart.totalItems, 0);
  const grandTotalPrice = cartArray.reduce((sum, cart) => sum + cart.totalPrice, 0);

  if (grandTotalItems === 0) {
    return null;
  }
  
  return (
    <>
      <motion.div
        className="fixed bottom-24 right-6 z-50"
        initial={{ y: 100, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ type: "spring", stiffness: 300, damping: 30 }}
      >
        <Button
          onClick={toggleCart}
          className="px-6 py-3 h-auto rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center gap-3 group"
        >
          <div className="relative">
            <ShoppingCart className="h-5 w-5" />
            {grandTotalItems > 0 && (
              <motion.span
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                className="absolute -top-2 -right-2 bg-accent text-accent-foreground text-xs font-bold rounded-full h-5 w-5 flex items-center justify-center"
              >
                {grandTotalItems}
              </motion.span>
            )}
          </div>
          <div className="flex flex-col items-start">
            <span className="font-medium">
              {grandTotalItems === 0 ? 'Cart Empty' : `${grandTotalItems} Items`}
            </span>
            {grandTotalPrice > 0 && (
              <span className="text-sm opacity-90">
                ₹{grandTotalPrice.toFixed(2)}
              </span>
            )}
          </div>
        </Button>
      </motion.div>

      <AnimatePresence>
        {isOpen && (
          <>
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black bg-opacity-50 z-40"
              onClick={() => setCartOpen(false)}
            />

            <motion.div
              initial={{ x: '100%' }}
              animate={{ x: 0 }}
              exit={{ x: '100%' }}
              transition={{ type: "spring", stiffness: 300, damping: 30 }}
              className="fixed right-0 top-0 h-full w-full max-w-md bg-background shadow-2xl z-50 flex flex-col"
            >
              <div className="p-6 border-b flex items-center justify-between">
                <div>
                  <h2 className="text-xl font-bold">
                    My Carts
                  </h2>
                  <p className="text-sm text-muted-foreground">
                    {grandTotalItems > 0 
                      ? `${grandTotalItems} ${grandTotalItems === 1 ? 'item' : 'items'} in ${cartArray.length} ${cartArray.length === 1 ? 'shop' : 'shops'}`
                      : 'Your cart is empty'
                    }
                  </p>
                </div>
                <Button variant="ghost" size="icon" onClick={() => setCartOpen(false)}>
                  <X className="h-5 w-5" />
                </Button>
              </div>

              <div className="flex-1 overflow-y-auto p-6">
                {cartArray.length === 0 ? (
                  <div className="flex flex-col items-center justify-center h-full text-center">
                    <ShoppingCart className="h-16 w-16 text-muted-foreground mb-4" />
                    <h3 className="text-lg font-medium mb-2">
                      Your cart is empty
                    </h3>
                    <p className="text-muted-foreground">
                      Add some products to get started!
                    </p>
                  </div>
                ) : (
                  <div className="space-y-3">
                    <p className="text-sm font-medium text-muted-foreground">
                      Select a shop to proceed to checkout.
                    </p>
                    {cartArray.map((shopCart) => (
                      <Link
                        key={shopCart.shopName}
                        href={`/checkout?shop=${encodeURIComponent(shopCart.shopName)}`}
                        onClick={() => setCartOpen(false)}
                        className="block rounded-lg border bg-card hover:bg-muted/50 transition-colors p-4 group"
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex-1 min-w-0">
                            <h3 className="font-semibold text-card-foreground truncate">{shopCart.shopName}</h3>
                            <p className="text-xs text-muted-foreground mt-1">
                              {shopCart.totalItems} {shopCart.totalItems === 1 ? 'item' : 'items'} &bull; ₹{shopCart.totalPrice.toFixed(2)}
                            </p>
                          </div>
                          <ChevronRight className="h-5 w-5 text-muted-foreground group-hover:text-primary transition-colors ml-4 shrink-0" />
                        </div>
                      </Link>
                    ))}
                  </div>
                )}
              </div>

              {cartArray.length > 0 && (
                <div className="p-6 border-t bg-muted/20 space-y-4">
                  {cartArray.length > 1 && (
                    <Button className="w-full" size="lg" asChild>
                      <Link href="/checkout?global=true" onClick={() => setCartOpen(false)}>
                        Global Checkout (₹{grandTotalPrice.toFixed(2)})
                      </Link>
                    </Button>
                  )}
                  <Button
                    variant="outline"
                    className="w-full"
                    onClick={clearAllCarts}
                  >
                    Clear All Carts
                  </Button>
                </div>
              )}
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </>
  );
}


--- File: userapp\src\components\floating-track-order-button.tsx ---


"use client";

import React, { useMemo } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { Truck } from 'lucide-react';
import { useAuthStore } from '@/store/authStore';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';

export function FloatingTrackOrderButton() {
  const { user, isLoggedIn } = useAuthStore();
  const pathname = usePathname();

  const activeOrder = useMemo(() => {
    if (!isLoggedIn || !user?.orders || user.orders.length === 0) {
      return null;
    }
    // Find the most recent order that is not delivered or completed
    return user.orders
      .filter(order => order.status !== 'Delivered' && order.status !== 'Completed')
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())[0];
  }, [user, isLoggedIn]);

  if (!activeOrder || pathname === '/track-order') {
    return null;
  }

  return (
    <motion.div
      className="fixed bottom-24 left-6 z-50"
      initial={{ y: 100, opacity: 0 }}
      animate={{ y: 0, opacity: 1 }}
      transition={{ type: "spring", stiffness: 300, damping: 30 }}
    >
      <Button
        asChild
        className="px-6 py-3 h-auto rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center gap-3 group"
      >
        <Link href={`/track-order?orderId=${activeOrder.id}`}>
          <Truck className="h-5 w-5" />
          <div className="flex flex-col items-start">
            <span className="font-medium">Track Order</span>
            <span className="text-sm opacity-90">{activeOrder.status}</span>
          </div>
        </Link>
      </Button>
    </motion.div>
  );
}


--- File: userapp\src\components\header.tsx ---


"use client";

import * as React from "react";
import Link from "next/link";
import { usePathname } from 'next/navigation';
import { Menu, ShoppingCart, Search, User } from "lucide-react";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { Button } from "@/components/ui/button";
import { LocationSelector } from "./location-selector";
import { SuperSaverToggle } from "./super-saver-toggle";
import { SearchDialog } from "./search-dialog";
import { useAuthStore } from "@/store/authStore";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

export function Header() {
  const [isMobileMenuOpen, setMobileMenuOpen] = React.useState(false);
  const { isLoggedIn, user } = useAuthStore();
  const pathname = usePathname();

  const isHomePage = pathname === '/';

  return (
    <header className="sticky top-0 z-40 w-full border-b bg-background">
      <div className="container flex md:h-20 md:items-center md:justify-between md:gap-6">

        {/* --- Desktop View --- */}
        <div className="hidden w-full items-center gap-4 md:flex">
          <Link href="/" className="flex shrink-0 items-center gap-2">
            <ShoppingCart className="h-8 w-8 text-primary" />
            <span className="text-xl font-bold">React Nav</span>
          </Link>
          <LocationSelector />
          <SearchDialog>
             <button className="relative h-12 flex-1 w-full rounded-lg border bg-background text-left pl-12 pr-4 text-muted-foreground text-sm hover:bg-accent transition-colors">
                <Search className="absolute left-4 top-1/2 h-5 w-5 -translate-y-1/2 text-muted-foreground" />
                Search for "milk"
             </button>
          </SearchDialog>
          <SuperSaverToggle />
          {isLoggedIn && user ? (
            <Link href="/profile" passHref>
              <Button variant="secondary" size="icon" className="rounded-full">
                <Avatar className="h-8 w-8">
                  <AvatarFallback>{user.name.slice(0, 2).toUpperCase()}</AvatarFallback>
                </Avatar>
                <span className="sr-only">View Profile</span>
              </Button>
            </Link>
          ) : (
            <Button asChild variant="default" className="rounded-full">
              <Link href="/login">
                <User className="mr-2 h-4 w-4" />
                Login
              </Link>
            </Button>
          )}
        </div>

        {/* --- Mobile View --- */}
        <div className="flex w-full flex-col items-center gap-2 py-2 md:hidden">
          <div className="flex w-full items-center gap-2">
            <Sheet open={isMobileMenuOpen} onOpenChange={setMobileMenuOpen}>
              <SheetTrigger asChild>
                <Button variant="ghost" size="icon" className="shrink-0">
                  <Menu className="h-6 w-6" />
                  <span className="sr-only">Toggle Menu</span>
                </Button>
              </SheetTrigger>
              <SheetContent side="left" className="flex w-full max-w-xs flex-col p-4">
                 <nav className="grid gap-2 text-lg font-medium">
                   <Link href="/" className="flex items-center space-x-2 mb-4 border-b pb-4">
                      <ShoppingCart className="h-7 w-7 text-primary" />
                      <span className="text-xl font-bold">React Nav</span>
                  </Link>
                  <Link href="/" className="block rounded-lg py-2 px-3 text-base text-muted-foreground hover:bg-muted hover:text-foreground" onClick={() => setMobileMenuOpen(false)}>Home</Link>
                  <Link href="/about" className="block rounded-lg py-2 px-3 text-base text-muted-foreground hover:bg-muted hover:text-foreground" onClick={() => setMobileMenuOpen(false)}>About</Link>
                  <Link href="/contact" className="block rounded-lg py-2 px-3 text-base text-muted-foreground hover:bg-muted hover:text-foreground" onClick={() => setMobileMenuOpen(false)}>Contact</Link>
                </nav>
              </SheetContent>
            </Sheet>

            <LocationSelector />
            
            <div className="flex-1" />

            {isLoggedIn && user ? (
              <Link href="/profile" passHref>
                <Button variant="secondary" size="icon" className="rounded-full shrink-0">
                  <Avatar className="h-8 w-8">
                    <AvatarFallback>{user.name.slice(0, 2).toUpperCase()}</AvatarFallback>
                  </Avatar>
                  <span className="sr-only">View Profile</span>
                </Button>
              </Link>
            ) : (
              <Button asChild variant="default" size="icon" className="rounded-full shrink-0">
                <Link href="/login">
                  <User className="h-4 w-4" />
                  <span className="sr-only">Login</span>
                </Link>
              </Button>
            )}
          </div>
          
          {isHomePage && <SuperSaverToggle />}
          
          <div className="w-full">
            <SearchDialog>
                <button className="relative h-10 w-full rounded-lg border bg-background text-left pl-10 pr-4 text-muted-foreground text-sm hover:bg-accent transition-colors">
                    <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
                    Search...
                </button>
            </SearchDialog>
          </div>
        </div>
      </div>
    </header>
  );
}


--- File: userapp\src\components\home-carousel.tsx ---


"use client";

import Link from 'next/link';
import Image from 'next/image';
import Autoplay from 'embla-carousel-autoplay';

import { Card, CardContent } from '@/components/ui/card';
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from '@/components/ui/carousel';

interface BannerImage {
  src: string;
  alt: string;
  href: string;
  dataAiHint: string;
}

interface HomeCarouselProps {
  bannerImages: BannerImage[];
}

export function HomeCarousel({ bannerImages }: HomeCarouselProps) {
  return (
    <Carousel
      className="w-full max-w-5xl mx-auto"
      plugins={[
        Autoplay({
          delay: 5000,
          stopOnInteraction: true,
        }),
      ]}
      opts={{
        loop: true,
      }}
    >
      <CarouselContent>
        {bannerImages.map((banner, index) => (
          <CarouselItem key={index}>
            <Link href={banner.href}>
              <Card className="overflow-hidden">
                <CardContent className="p-0">
                  <div className="relative aspect-[4/1] w-full">
                    <Image
                      src={banner.src}
                      alt={banner.alt}
                      fill
                      className="object-cover"
                      data-ai-hint={banner.dataAiHint}
                    />
                  </div>
                </CardContent>
              </Card>
            </Link>
          </CarouselItem>
        ))}
      </CarouselContent>
      <CarouselPrevious className="absolute left-4 top-1/2 -translate-y-1/2" />
      <CarouselNext className="absolute right-4 top-1/2 -translate-y-1/2" />
    </Carousel>
  );
}


--- File: userapp\src\components\location-selector.tsx ---


"use client";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogDescription,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { MapPin, ChevronDown, LocateFixed, Search } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

export function LocationSelector() {
  const { toast } = useToast();

  const handleGetCurrentLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          console.log("Location fetched:", { latitude, longitude });
          toast({
            title: "Location Found!",
            description: `Coordinates: ${latitude.toFixed(4)}, ${longitude.toFixed(4)}`,
          });
          // Here you would typically update a global state or trigger a search with these coordinates
        },
        (error) => {
          console.error("Geolocation error:", error);
          toast({
            variant: "destructive",
            title: "Could not fetch location",
            description: "Please ensure location services are enabled and permissions are granted.",
          });
        }
      );
    } else {
      toast({
        variant: "destructive",
        title: "Geolocation not supported",
        description: "Your browser does not support geolocation.",
      });
    }
  };


  return (
    <Dialog>
      <DialogTrigger asChild>
        <div className="shrink-0 cursor-pointer">
            {/* Desktop and large screen view */}
            <div className="hidden md:flex flex-col items-start">
                <span className="text-lg font-bold text-primary">Delivery in 13 Mins</span>
                <div className="flex items-center gap-x-1 text-sm font-semibold">
                    <span className="max-w-[200px] truncate lg:max-w-[250px]">
                        Periamet, Poongavanapuram, Chennai, Tamil Nadu
                    </span>
                    <ChevronDown className="h-4 w-4 text-primary"/>
                </div>
            </div>
            {/* Mobile view */}
            <div className="flex items-center gap-1 md:hidden">
                <MapPin className="h-4 w-4 text-primary shrink-0" />
                <div className="flex flex-col items-start">
                    <span className="text-xs font-bold text-primary">Deliver to</span>
                    <span className="text-xs font-semibold max-w-[120px] truncate">
                        Periamet, Poongavanapuram, Chennai...
                    </span>
                </div>
                <ChevronDown className="h-4 w-4 text-primary shrink-0"/>
            </div>
        </div>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Select Delivery Location</DialogTitle>
          <DialogDescription>
            Enter your address to see products and delivery times for your area.
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="relative">
             <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
             <Input id="location-search" placeholder="Search for area, street name..." className="pl-10" />
          </div>
          <Button variant="outline" className="justify-start gap-2" onClick={handleGetCurrentLocation}>
            <LocateFixed className="h-4 w-4" />
            <span>Use current location</span>
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}


--- File: userapp\src\components\main-layout.tsx ---


'use client';

import { Home, User, Mail, BookUser } from 'lucide-react';
import { NavBar, type NavItem } from '@/components/navbar';
import { FloatingCart } from './floating-cart';
import { getIcon } from '@/lib/iconMapper';
import { Header } from './header';
import { CategoryNavBar } from './category-navbar';
import type { NavItem as CategoryData } from '@/data/categories';
import * as React from 'react';
import { usePathname } from 'next/navigation';
import { ShopsMenu } from './shops-menu';
import { DataService } from '@/services/dataService';
import { FloatingTrackOrderButton } from './floating-track-order-button';
import { useAuthStore } from '@/store/authStore';
import { NotificationPermissionDialog } from './notification-permission-dialog';


const defaultNavItems: NavItem[] = [
  { name: 'Home', url: '/', icon: Home },
  { name: 'Orders', url: '/orders', icon: BookUser },
  { name: 'About', url: '/about', icon: User },
  { name: 'Contact', url: '/contact', icon: Mail },
];

interface NavItemFromProp {
  name: string;
  url: string;
  iconName: string;
}

export function MainLayout({ children, navItems: navItemsFromProp, categories }: { 
  children: React.ReactNode; 
  navItems?: NavItemFromProp[];
  categories?: CategoryData[]
 }) {
  
  const pathname = usePathname();
  const [contextualNavItems, setContextualNavItems] = React.useState<(NavItem | React.ReactNode)[] | null>(null);
  const { isLoggedIn } = useAuthStore();


  React.useEffect(() => {
    let isMounted = true;
    const resolveNavItems = async () => {
        const categoryPageMatch = pathname.match(/^\/shops\/([^\/]+)$/);
        if (categoryPageMatch) {
            const categoryName = decodeURIComponent(categoryPageGatch[1]);
            if (isMounted) {
                setContextualNavItems([
                    defaultNavItems[0],
                    <ShopsMenu key="shops-menu" categoryName={categoryName} />,
                ]);
            }
            return;
        }

        const shopPageMatch = pathname.match(/^\/shop\/([^\/]+)$/);
        if (shopPageMatch) {
            const shopName = decodeURIComponent(shopPageMatch[1]);
            const shop = await DataService.getShopByName(shopName);
            if (shop && isMounted) {
                setContextualNavItems([
                    defaultNavItems[0],
                    <ShopsMenu key="shops-menu" categoryName={shop.category} />,
                ]);
            } else if (isMounted) {
                setContextualNavItems(defaultNavItems);
            }
            return;
        }

        if (isMounted) {
            setContextualNavItems(null); // Use props or default
        }
    }
    resolveNavItems();
    return () => { isMounted = false; }
  }, [pathname]);

  const navItems = contextualNavItems 
    ? contextualNavItems 
    : (navItemsFromProp 
        ? navItemsFromProp.map(item => ({
            name: item.name,
            url: item.url,
            icon: getIcon(item.iconName),
        }))
        : defaultNavItems
      );
  
  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      {categories && <CategoryNavBar categories={categories} />}
      <NavBar items={navItems} />
      <main className="flex-grow container mx-auto px-4 pt-4 pb-24">
        {isLoggedIn && <NotificationPermissionDialog />}
        {children}
      </main>
      <FloatingCart />
      <FloatingTrackOrderButton />
    </div>
  );
}


--- File: userapp\src\components\navbar.tsx ---

"use client"

import Link from "next/link"
import { usePathname } from "next/navigation"
import { motion } from "framer-motion"
import type { LucideIcon } from "lucide-react"
import * as React from "react"
import { cn } from "@/lib/utils"

export interface NavItem {
  name: string
  url: string
  icon: LucideIcon
}

interface NavBarProps {
  items: (NavItem | React.ReactNode)[]
  className?: string
}

export function NavBar({ items, className }: NavBarProps) {
  const pathname = usePathname()

  return (
    <nav
      className={cn(
        "fixed bottom-4 left-1/2 -translate-x-1/2 z-50",
        className,
      )}
    >
      <div className="flex items-center gap-1 sm:gap-3 bg-background/50 border backdrop-blur-lg py-1 px-1 rounded-full shadow-lg">
        {items.map((item, index) => {
          if (React.isValidElement(item)) {
            return <React.Fragment key={index}>{item}</React.Fragment>;
          }
          
          const navItem = item as NavItem;
          const Icon = navItem.icon
          const isActive = pathname === navItem.url

          return (
            <Link
              key={navItem.name}
              href={navItem.url}
              className={cn(
                "relative cursor-pointer text-sm font-semibold px-4 py-2 rounded-full transition-colors",
                "text-foreground/80 hover:text-primary",
                isActive && "text-primary",
              )}
              aria-current={isActive ? "page" : undefined}
            >
              <div className="md:hidden">
                <Icon size={18} strokeWidth={2.5} />
              </div>
              <span className="hidden md:inline">{navItem.name}</span>

              {isActive && (
                <motion.div
                  layoutId="lamp"
                  className="absolute inset-0 w-full bg-muted rounded-full -z-10"
                  initial={false}
                  transition={{
                    type: "spring",
                    stiffness: 300,
                    damping: 30,
                  }}
                >
                  {/* Lamp (points up) */}
                  <div className="absolute -top-2 left-1/2 -translate-x-1/2 w-8 h-1 bg-primary rounded-t-full">
                    <div className="absolute w-12 h-6 bg-primary/20 rounded-full blur-md -top-2 -left-2" />
                    <div className="absolute w-8 h-6 bg-primary/20 rounded-full blur-md -top-1" />
                    <div className="absolute w-4 h-4 bg-primary/20 rounded-full blur-sm top-0 left-2" />
                  </div>
                </motion.div>
              )}
            </Link>
          )
        })}
      </div>
    </nav>
  )
}


--- File: userapp\src\components\notification-permission-dialog.tsx ---


'use client';

import { useEffect, useState }from 'react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { useAuthStore } from '@/store/authStore';
import { useToast } from '@/hooks/use-toast';
import { Bell } from 'lucide-react';

const NOTIFICATION_PROMPTED_KEY = 'notificationPrompted';

export function NotificationPermissionDialog() {
  const [isOpen, setIsOpen] = useState(false);
  const { initFcm } = useAuthStore();
  const { toast } = useToast();

  useEffect(() => {
    // Check if we can and should prompt for notifications.
    if (typeof window !== 'undefined' && 'Notification' in window) {
      const alreadyPrompted = localStorage.getItem(NOTIFICATION_PROMPTED_KEY);
      // Only show the dialog if permission is 'default' (not yet granted or denied)
      // and we haven't prompted them with our custom dialog before.
      if (Notification.permission === 'default' && !alreadyPrompted) {
        // Add a small delay to let the user settle after login.
        const timer = setTimeout(() => {
            setIsOpen(true);
        }, 2000);
        return () => clearTimeout(timer);
      }
    }
  }, []);

  const handleAllow = async () => {
    try {
      await initFcm();
      toast({
        title: "Success!",
        description: "Notifications have been enabled for this device.",
      });
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: "Notification Error",
        description: error.message || "Could not enable notifications. Please check browser settings and try again.",
      });
    } finally {
        setIsOpen(false);
        localStorage.setItem(NOTIFICATION_PROMPTED_KEY, 'true');
    }
  };

  const handleDeny = () => {
    setIsOpen(false);
    localStorage.setItem(NOTIFICATION_PROMPTED_KEY, 'true');
  };

  if (!isOpen) {
    return null;
  }

  return (
    <AlertDialog open={isOpen} onOpenChange={setIsOpen}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <div className="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-primary/10 mb-4">
              <Bell className="h-6 w-6 text-primary" />
          </div>
          <AlertDialogTitle className="text-center">Enable Order Notifications</AlertDialogTitle>
          <AlertDialogDescription className="text-center">
            Would you like to receive updates on your order status? You can change this in your browser settings at any time.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter className="sm:justify-center">
          <AlertDialogCancel onClick={handleDeny}>Don't Allow</AlertDialogCancel>
          <AlertDialogAction onClick={handleAllow}>Allow</AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}


--- File: userapp\src\components\product-card.tsx ---

'use client';

import Image from 'next/image';
import { Plus, Minus } from 'lucide-react';

import type { Product } from '@/data/products';
import { useCartStore } from '@/store/cartStore';
import { Button } from '@/components/ui/button';

interface ProductCardProps {
  product: Product;
}

export function ProductCard({ product }: ProductCardProps) {
  const { carts, addItem, updateQuantity } = useCartStore();
  const itemInCart = carts[product.shopName]?.items.find((item) => item.id === product.id);
  const quantity = itemInCart ? itemInCart.quantity : 0;

  // Calculate dummy discount
  const originalPrice = product.price * 1.25;
  const discount = Math.round((1 - product.price / originalPrice) * 100);

  return (
    <div className="w-full group">
      <div className="bg-card text-card-foreground rounded-lg overflow-hidden flex flex-col h-full border shadow-sm transition-all duration-300 hover:shadow-lg hover:border-primary/30">
        <div className="relative aspect-square w-full overflow-hidden">
          <Image
            src={product.image}
            alt={product.name}
            fill
            className="object-cover transition-transform duration-300 group-hover:scale-105"
            data-ai-hint={product.dataAiHint}
          />
          {!product.inStock && (
            <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
              <span className="text-white text-xs font-semibold uppercase tracking-wider">Out of Stock</span>
            </div>
          )}
        </div>
        <div className="p-3 flex-grow flex flex-col justify-end space-y-2">
          <div>
            <h3 className="text-sm font-semibold leading-tight line-clamp-2 h-10">{product.name}</h3>
            <p className="text-xs text-muted-foreground">{product.unit}</p>
          </div>
          
          <div className="space-y-2">
            <div className="flex items-baseline gap-1.5">
                <span className="text-lg font-bold text-foreground">₹{product.price.toFixed(2)}</span>
                <span className="text-sm line-through text-muted-foreground">₹{originalPrice.toFixed(2)}</span>
            </div>
            <div className="flex items-center justify-between">
              <div>
                {discount > 0 &&
                  <div className="text-xs font-semibold text-green-600">
                    {discount}% OFF
                  </div>
                }
              </div>
              
              <div className="flex items-center">
                {quantity > 0 ? (
                  <div className="flex items-center border rounded-md">
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => updateQuantity(product.id, product.shopName, quantity - 1)}
                      className="h-8 w-8 rounded-r-none text-destructive hover:bg-destructive/10 hover:text-destructive"
                    >
                      <Minus className="h-4 w-4" />
                    </Button>
                    <span className="font-bold text-sm text-foreground px-2">
                      {quantity}
                    </span>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => addItem(product)}
                      className="h-8 w-8 rounded-l-none text-primary hover:bg-primary/10 hover:text-primary"
                      disabled={!product.inStock}
                    >
                      <Plus className="h-4 w-4" />
                    </Button>
                  </div>
                ) : (
                  <Button
                    onClick={() => addItem(product)}
                    disabled={!product.inStock}
                    variant="outline"
                    size="sm"
                    className="h-8 px-4 font-bold text-primary border-primary/50 hover:bg-primary/5 hover:text-primary"
                  >
                    ADD
                  </Button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


--- File: userapp\src\components\product-carousel.tsx ---

import type { Product } from '@/data/products';
import { ProductCard } from './product-card';
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from '@/components/ui/carousel';

interface ProductCarouselProps {
  products: Product[];
}

export function ProductCarousel({ products }: ProductCarouselProps) {
  if (!products || products.length === 0) {
    return null;
  }

  return (
    <Carousel
      opts={{
        align: 'start',
        dragFree: true,
      }}
      className="w-full"
    >
      <CarouselContent className="-ml-4">
        {products.map((product) => (
          <CarouselItem key={product.id} className="pl-4 basis-1/2 sm:basis-1/3 md:basis-1/4 lg:basis-1/5 xl:basis-1/6">
            <ProductCard product={product} />
          </CarouselItem>
        ))}
      </CarouselContent>
      <CarouselPrevious className="absolute -left-4 top-1/2 -translate-y-1/2 hidden md:flex" />
      <CarouselNext className="absolute -right-4 top-1/2 -translate-y-1/2 hidden md:flex" />
    </Carousel>
  );
}


--- File: userapp\src\components\product-display.tsx ---

'use client';

import React, { useState } from 'react';
import Image from 'next/image';

const categoriesData = [
    { id: 1, name: 'Local Rice', image: 'https://placehold.co/90x90.png' },
    { id: 2, name: 'Atta', image: 'https://placehold.co/90x90.png' },
    { id: 3, name: 'Rice', image: 'https://placehold.co/90x90.png' },
    { id: 4, name: 'Toor, Urad & Chana', image: 'https://placehold.co/90x90.png' },
    { id: 5, name: 'Besan, Sooji & Maida', image: 'https://placehold.co/90x90.png' },
    { id: 6, name: 'Poha, Daliya & Other Grains', image: 'https://placehold.co/90x90.png' },
    { id: 7, name: 'Millet & Other Flours', image: 'https://placehold.co/90x90.png' },
    { id: 8, name: 'Rajma, Chhole & Others', image: 'https://placehold.co/90x90.png' },
    { id: 9, name: 'Moong & Masoor', image: 'https://placehold.co/90x90.png' },
    { id: 10, name: 'Fresh Atta', image: 'https://placehold.co/90x90.png' },
  ];

const productsData = [
    {
      id: '114825',
      image: 'https://placehold.co/400x400.png',
      dataAiHint: 'toor dal',
      deliveryTime: '11 mins',
      name: 'Udhaiyam Toor Dal/Toor Dal (Thuvaram Parupu)',
      weight: '500 g',
      price: '77',
      originalPrice: '84',
      options: '2',
    },
    {
      id: '114801',
      image: 'https://placehold.co/400x400.png',
      dataAiHint: 'urad dal',
      deliveryTime: '11 mins',
      name: 'Udhaiyam Urad Dal (Dhuli) (Ulutham Parupu)',
      weight: '500 g',
      price: '72',
      originalPrice: '83',
      options: '2',
    },
    {
      id: '403799',
      image: 'https://placehold.co/400x400.png',
      dataAiHint: 'arhar dal',
      deliveryTime: '11 mins',
      name: 'Basic Arhar/ Toor Dal (Thuvaram Parupu)',
      weight: '1 kg',
      price: '131',
      originalPrice: '240',
    },
    {
      id: '39493',
      image: 'https://placehold.co/400x400.png',
      dataAiHint: 'tata sampann dal',
      deliveryTime: '11 mins',
      name: 'Tata Sampann Unpolished Toor Dal/Toor Dal (Thuvaram Parupu)',
      weight: '1 kg',
      price: '175',
      originalPrice: '224',
      options: '2',
    },
    {
      id: '527583',
      image: 'https://placehold.co/400x400.png',
      dataAiHint: 'kala chana',
      deliveryTime: '11 mins',
      name: 'Whole Farm Premium Kala Chana/Brown Chana (Kadalai)',
      weight: '500 g',
      price: '61',
      originalPrice: '115',
    },
     {
      id: '527584',
      image: 'https://placehold.co/400x400.png',
      dataAiHint: 'green peas',
      deliveryTime: '11 mins',
      name: 'Fresh Green Peas',
      weight: '500 g',
      price: '45',
      originalPrice: '61',
    },
  ];

const CategoryNavigation = ({ categories, activeCategory, onCategoryClick }: any) => {
    return (
      <nav className="w-28 bg-white flex-shrink-0 overflow-y-auto">
        <div className="flex flex-col items-center">
          {categories.map((category: any) => (
            <div
              key={category.id}
              className="py-2 w-full cursor-pointer"
              onClick={() => onCategoryClick(category.id)}
            >
              <div className="relative flex flex-col items-center justify-center gap-1">
                <div className="relative h-14 w-14 overflow-hidden rounded-lg">
                  <div className="flex h-full items-center justify-center rounded-md bg-muted">
                    <div className={`transition-all duration-300 ease-in-out absolute h-16 w-12 ${activeCategory === category.id ? 'bottom-[-8px] scale-110' : 'bottom-[-20px]'}`}>
                      <Image
                        src={category.image}
                        alt={category.name}
                        width={48}
                        height={64}
                        className="h-full w-full object-contain"
                        data-ai-hint="product category"
                      />
                    </div>
                  </div>
                </div>
                <div className={`text-xs text-center w-full break-words px-1 ${activeCategory === category.id ? 'font-bold text-foreground' : 'font-medium text-muted-foreground'}`}>
                  {category.name}
                </div>
                {activeCategory === category.id && <div className="absolute right-0 top-0 h-full w-1 rounded-l-lg bg-primary"></div>}
              </div>
            </div>
          ))}
        </div>
      </nav>
    );
  };
  
const ProductCard = ({ product }: any) => {
    const discount = product.originalPrice && product.price 
      ? Math.round((1 - parseInt(product.price) / parseInt(product.originalPrice)) * 100) 
      : 0;

    return (
      <div className="p-1.5" style={{ gridColumn: 'span 2' }}>
        <div className="relative flex h-full flex-col items-start gap-0.5 pb-3 border rounded-lg justify-between shadow-sm bg-white cursor-pointer hover:shadow-md transition-shadow">
          <div className="relative w-full overflow-hidden px-2.5 rounded-lg pt-2">
            <div className="overflow-hidden flex flex-col w-full h-full aspect-square rounded-lg">
              <Image className="h-full w-full object-cover transition-opacity opacity-100" width="270" height="270" src={product.image} alt={product.name} data-ai-hint={product.dataAiHint} />
            </div>
          </div>
          <div className="w-full px-3">
            <div className="flex w-full flex-wrap gap-1 mb-2">
              <div className="bg-muted px-1 py-0.5 rounded-md">
                <div className="flex items-center gap-0.5">
                  <div className="w-2.5">
                    <div className="overflow-hidden flex flex-col w-full h-full aspect-square">
                      <Image className="h-full w-full" width="10" height="10" src="https://placehold.co/10x10.png" alt="delivery time" data-ai-hint="clock" />
                    </div>
                  </div>
                  <div className="text-[10px] font-bold uppercase text-foreground">
                    {product.deliveryTime}
                  </div>
                </div>
              </div>
            </div>
            <div className="flex w-full flex-col">
              <div className="mb-2 flex flex-col text-sm" style={{ height: '3.375rem' }}>
                <div className="mb-1.5">
                  <div className="text-sm font-semibold line-clamp-2 text-foreground h-10">
                    {product.name}
                  </div>
                </div>
                <div className="flex items-center">
                  <div className="text-xs font-medium line-clamp-1 text-muted-foreground">
                    {product.weight}
                  </div>
                </div>
              </div>
              <div className="flex items-center justify-between">
                <div>
                  <div className="flex items-baseline gap-1.5">
                    <span className="text-lg font-bold text-foreground">₹{product.price}</span>
                    {product.originalPrice && (
                       <span className="text-sm line-through text-muted-foreground">₹{product.originalPrice}</span>
                    )}
                  </div>
                  {discount > 0 && (
                     <div className="text-xs font-semibold text-green-600 mt-1">
                      {discount}% OFF
                    </div>
                  )}
                </div>
                <button className="rounded-md flex justify-center font-semibold items-center relative text-sm py-2 px-4 gap-0.5 min-w-[66px] bg-primary/10 border border-primary text-primary hover:bg-primary/20" tabIndex={0} role="button">
                  <div>ADD</div>
                  {product.options && (
                    <div className="absolute px-1 bg-green-50 -bottom-1.5">
                      <div className="text-[10px] font-semibold text-muted-foreground">
                        {product.options} options
                      </div>
                    </div>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
};
  
const ProductGrid = ({ products }: any) => {
    return (
      <div className="flex-1 overflow-y-auto bg-slate-50">
        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8">
          {products.map((product: any) => (
            <ProductCard key={product.id} product={product} />
          ))}
           {products.map((product: any) => (
            <ProductCard key={`${product.id}-2`} product={{...product, id: `${product.id}-2`}} />
          ))}
           {products.map((product: any) => (
            <ProductCard key={`${product.id}-3`} product={{...product, id: `${product.id}-3`}} />
          ))}
        </div>
      </div>
    );
};
  

export const ProductDisplay = () => {
    const [activeCategory, setActiveCategory] = useState(4); // Default to 'Toor, Urad & Chana'
  
    // In a real app, you'd filter products based on activeCategory
    const displayedProducts = productsData;
  
    return (
      <section className="my-8">
        <div className="flex border rounded-lg overflow-hidden" style={{ height: '75vh' }}>
          <CategoryNavigation
            categories={categoriesData}
            activeCategory={activeCategory}
            onCategoryClick={setActiveCategory}
          />
          <ProductGrid products={displayedProducts} />
        </div>
      </section>
    );
};


--- File: userapp\src\components\promo-section.tsx ---


"use client";

import Image from 'next/image';
import Link from 'next/link';
import { useState } from 'react';
import { MoreHorizontal } from 'lucide-react';
import { useIsMobile } from '@/hooks/use-mobile';

import { Card, CardContent } from '@/components/ui/card';

const mainPromo = {
  imgSrc: "https://placehold.co/400x250.png",
  dataAiHint: "shopping deals",
  title: "Mega Deals",
  description: "Unbeatable prices on all your favorite items.",
  href: "/shops/Supermarket"
};

const categoryPromos = [
  {
    href: '/shops/Electronics',
    imgSrc: 'https://placehold.co/150x150.png',
    dataAiHint: 'electronics gadget',
    alt: 'Electronics'
  },
  {
    href: '/shops/Fruits%20&%20Vegetables',
    imgSrc: 'https://placehold.co/150x150.png',
    dataAiHint: 'fresh fruits',
    alt: 'Fruits & Veg'
  },
  {
    href: '/shops/Gifts',
    imgSrc: 'https://placehold.co/150x150.png',
    dataAiHint: 'gift box',
    alt: 'Gifts'
  },
  {
    href: '/shops/Meat',
    imgSrc: 'https://placehold.co/150x150.png',
    dataAiHint: 'meat steak',
    alt: 'Meat'
  },
  {
    href: '/shops/Pharmacy',
    imgSrc: 'https://placehold.co/150x150.png',
    dataAiHint: 'pills pharmacy',
    alt: 'Pharmacy'
  },
  {
    href: '/shops/Stationary',
    imgSrc: 'https://placehold.co/150x150.png',
    dataAiHint: 'office stationery',
    alt: 'Stationary'
  },
  {
    href: '/shops/Supermarket',
    imgSrc: 'https://placehold.co/150x150.png',
    dataAiHint: 'supermarket aisle',
    alt: 'Supermarket'
  },
  {
    href: '/shops/Electronics',
    imgSrc: 'https://placehold.co/150x150.png',
    dataAiHint: 'laptop computer',
    alt: 'Laptops'
  },
  {
    href: '/shops/Gifts',
    imgSrc: 'https://placehold.co/150x150.png',
    dataAiHint: 'birthday cake',
    alt: 'Birthdays'
  },
  {
    href: '/shops/Meat',
    imgSrc: 'https://placehold.co/150x150.png',
    dataAiHint: 'fresh fish',
    alt: 'Seafood'
  },
  {
    href: '/shops/Pharmacy',
    imgSrc: 'https://placehold.co/150x150.png',
    dataAiHint: 'vitamins supplements',
    alt: 'Vitamins'
  },
  {
    href: '/shops/Supermarket',
    imgSrc: 'https://placehold.co/150x150.png',
    dataAiHint: 'cold drinks',
    alt: 'Beverages'
  },
];

export function PromoSection() {
  const [showAll, setShowAll] = useState(false);
  const isMobile = useIsMobile();

  const promosToShow = isMobile && !showAll ? categoryPromos.slice(0, 5) : categoryPromos;
  const showMoreButton = isMobile && !showAll && categoryPromos.length > 5;

  return (
    <Card className="w-full bg-gradient-to-br from-gray-800 to-gray-900 text-white overflow-hidden">
      <CardContent className="p-6 md:p-8">
        <div className="flex flex-col md:flex-row items-center gap-8">
          <div className="w-full md:w-1/3 shrink-0">
            <Link href={mainPromo.href}>
              <div className="flex flex-col h-full bg-white/15 backdrop-blur-sm rounded-lg overflow-hidden transition-all duration-300 hover:shadow-2xl hover:shadow-primary/20">
                <div className="relative w-full h-48">
                    <Image
                      src={mainPromo.imgSrc}
                      alt={mainPromo.title}
                      fill
                      className="object-cover"
                      data-ai-hint={mainPromo.dataAiHint}
                    />
                </div>
                <div className='p-4'>
                    <h3 className="text-xl font-bold text-white">{mainPromo.title}</h3>
                    <p className="text-sm text-gray-200 mt-1">{mainPromo.description}</p>
                </div>
              </div>
            </Link>
          </div>
          <div className="w-full md:w-2/3">
            <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 gap-x-4 gap-y-6">
              {promosToShow.map((promo, index) => (
                <Link href={promo.href} key={index} className="group flex flex-col items-center text-center gap-2">
                  <div className="aspect-square w-full relative rounded-full overflow-hidden transition-transform group-hover:scale-105 border-2 border-transparent group-hover:border-primary">
                    <Image
                      src={promo.imgSrc}
                      alt={promo.alt}
                      fill
                      className="object-cover"
                      data-ai-hint={promo.dataAiHint}
                    />
                  </div>
                   <span className="text-xs sm:text-sm font-medium text-gray-100 group-hover:text-white">{promo.alt}</span>
                </Link>
              ))}
              {showMoreButton && (
                 <button
                  onClick={() => setShowAll(true)}
                  className="group flex flex-col items-center text-center gap-2"
                >
                  <div className="aspect-square w-full relative rounded-full overflow-hidden transition-transform group-hover:scale-105 border-2 border-transparent group-hover:border-primary bg-white/10 flex items-center justify-center">
                    <MoreHorizontal className="h-6 w-6 sm:h-8 sm:w-8 text-white" />
                  </div>
                  <span className="text-xs sm:text-sm font-medium text-gray-100 group-hover:text-white">More</span>
                </button>
              )}
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


--- File: userapp\src\components\search-dialog.tsx ---

'use client';

import * as React from 'react';
import { Search, History, ArrowLeft } from 'lucide-react';

import { useIsMobile } from '@/hooks/use-mobile';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTrigger,
} from '@/components/ui/sheet';
import { Input } from '@/components/ui/input';

const popularSearches = ["Milk", "Bread", "Eggs", "Chicken", "Onion", "Potato"];
const recentSearches = ["Coffee", "Apples"];

export function SearchDialog({ children }: { children: React.ReactNode }) {
  const [open, setOpen] = React.useState(false);
  const isMobile = useIsMobile();

  const handleOpenChange = (isOpen: boolean) => {
    setOpen(isOpen);
  };

  if (isMobile) {
    return (
      <Sheet open={open} onOpenChange={handleOpenChange}>
        <SheetTrigger asChild>{children}</SheetTrigger>
        <SheetContent side="bottom" className="h-full w-full flex flex-col p-0">
          <SheetHeader className="p-4 flex flex-row items-center gap-2 border-b">
            <Button variant="ghost" size="icon" onClick={() => setOpen(false)}>
              <ArrowLeft />
            </Button>
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-muted-foreground" />
              <Input
                placeholder="Search for anything"
                className="h-12 w-full rounded-lg pl-10 text-base"
                autoFocus
              />
            </div>
          </SheetHeader>
          <div className="flex-1 overflow-y-auto p-4 space-y-8">
            <SearchSuggestion
              title="Recent Searches"
              items={recentSearches}
              icon={<History className="h-4 w-4" />}
            />
            <SearchSuggestion
              title="Popular on React Nav"
              items={popularSearches}
              icon={<Search className="h-4 w-4" />}
            />
          </div>
        </SheetContent>
      </Sheet>
    );
  }

  return (
    <Dialog open={open} onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="max-w-2xl p-0">
        <div className="p-4 border-b">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Search for anything"
              className="h-12 rounded-lg pl-10 text-base"
              autoFocus
            />
          </div>
        </div>
        <div className="p-6 max-h-[400px] overflow-y-auto space-y-8">
          <SearchSuggestion
            title="Recent Searches"
            items={recentSearches}
            icon={<History className="h-4 w-4" />}
          />
          <SearchSuggestion
            title="Popular on React Nav"
            items={popularSearches}
            icon={<Search className="h-4 w-4" />}
          />
        </div>
      </DialogContent>
    </Dialog>
  );
}

function SearchSuggestion({ title, items, icon }: { title: string; items: string[]; icon: React.ReactNode }) {
  return (
    <div>
      <h3 className="text-sm font-semibold mb-3">{title}</h3>
      <div className="flex flex-wrap gap-2">
        {items.map((item) => (
          <Button key={item} variant="outline" className="rounded-full h-8">
            {icon}
            {item}
          </Button>
        ))}
      </div>
    </div>
  );
}


--- File: userapp\src\components\shop-category-circles.tsx ---


'use client';

import type { ShopCategory } from '@/data/shopCategories';
import Image from 'next/image';
import Link from 'next/link';
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from '@/components/ui/carousel';

interface ShopCategoryCirclesProps {
  categories: ShopCategory[];
  shopName: string;
}

export function ShopCategoryCircles({ categories, shopName }: ShopCategoryCirclesProps) {
  if (!categories || categories.length === 0) {
    return null;
  }

  const createCategoryLink = (categoryName: string) => {
    return `/shop/${encodeURIComponent(shopName)}/${encodeURIComponent(categoryName)}`; 
  };

  return (
    <section className="py-8">
       <h2 className="text-2xl font-bold mb-6 text-center">Shop by Category</h2>
       <Carousel
        opts={{
          align: "start",
          dragFree: true,
        }}
        className="w-full"
      >
        <CarouselContent className="-ml-4 px-4">
          {categories.map((category) => (
            <CarouselItem key={category.name} className="pl-4 basis-1/3 sm:basis-1/4 md:basis-1/5 lg:basis-1/6 xl:basis-[12%]">
              <Link href={createCategoryLink(category.name)} className="group flex flex-col items-center text-center gap-3">
                  <div className="relative aspect-square w-24 h-24 rounded-full overflow-hidden transition-all duration-300 group-hover:scale-105 group-hover:shadow-lg border-2 border-transparent group-hover:border-primary">
                    <Image
                      src={category.image}
                      alt={category.name}
                      fill
                      className="object-cover"
                      data-ai-hint="product category"
                    />
                  </div>
                   <span className="text-sm font-semibold text-foreground group-hover:text-primary transition-colors text-center break-words w-full">{category.name}</span>
                </Link>
            </CarouselItem>
          ))}
        </CarouselContent>
        <CarouselPrevious className="absolute -left-0 top-1/2 -translate-y-1/2 hidden md:flex" />
        <CarouselNext className="absolute -right-0 top-1/2 -translate-y-1/2 hidden md:flex" />
       </Carousel>
    </section>
  );
}


--- File: userapp\src\components\shop-section.tsx ---


'use client';

import Link from 'next/link';
import { ArrowRight } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { ProductCarousel } from './product-carousel';
import type { Product } from '@/data/products';
import type { Shop } from '@/data/shops';

interface ShopSectionProps {
  shop: Shop;
  shopProducts: {
    [categoryName: string]: Product[];
  };
}

export function ShopSection({ shop, shopProducts }: ShopSectionProps) {
  return (
    <div className="w-full">
      <div className="flex items-center justify-between mb-4 px-1">
        <Link href={`/shop/${encodeURIComponent(shop.name)}`}>
          <h2 className="text-2xl font-bold text-foreground hover:text-primary transition-colors">
            {shop.name}
          </h2>
        </Link>
        <Button asChild variant="link" className="text-primary hover:text-primary/80">
          <Link href={`/shop/${encodeURIComponent(shop.name)}`}>
            See All <ArrowRight className="ml-2 h-4 w-4" />
          </Link>
        </Button>
      </div>

      <div className="space-y-6">
        {Object.entries(shopProducts || {}).map(([category, products]) => (
          <div key={category}>
            <h3 className="text-lg font-semibold text-muted-foreground mb-3 px-1">
              {category}
            </h3>
            <ProductCarousel products={(products as Product[]).slice(0, 10)} />
          </div>
        ))}
      </div>
    </div>
  );
}


--- File: userapp\src\components\shops-menu.tsx ---

'use client';

import * as React from 'react';
import Link from 'next/link';
import { Store, Star, ChevronRight } from 'lucide-react';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { ScrollArea } from '@/components/ui/scroll-area';
import { DataService } from '@/services/dataService';
import type { Shop } from '@/data/shops';
import { motion } from 'framer-motion';
import { cn } from '@/lib/utils';
import { Skeleton } from '@/components/ui/skeleton';

interface ShopsMenuProps {
  categoryName: string;
}

export function ShopsMenu({ categoryName }: ShopsMenuProps) {
  const [shops, setShops] = React.useState<Shop[]>([]);
  const [loading, setLoading] = React.useState(true);
  const [isOpen, setIsOpen] = React.useState(false);

  React.useEffect(() => {
    let isMounted = true;
    if (isOpen) {
      setLoading(true);
      DataService.getShopsByCategory(categoryName).then(fetchedShops => {
        if (isMounted) {
          setShops(fetchedShops);
          setLoading(false);
        }
      });
    }
    return () => { isMounted = false; };
  }, [isOpen, categoryName]);

  const Icon = Store;
  const isActive = isOpen;

  return (
    <Popover open={isOpen} onOpenChange={setIsOpen}>
      <PopoverTrigger asChild>
        <button
          className={cn(
            "relative cursor-pointer text-sm font-semibold px-4 py-2 rounded-full transition-colors",
            "text-foreground/80 hover:text-primary",
            isActive && "text-primary",
          )}
          aria-current={isActive ? "page" : undefined}
        >
          <div className="md:hidden">
            <Icon size={18} strokeWidth={2.5} />
          </div>
          <span className="hidden md:inline">Shops</span>

          {isActive && (
            <motion.div
              layoutId="lamp"
              className="absolute inset-0 w-full bg-muted rounded-full -z-10"
              initial={false}
              transition={{
                type: "spring",
                stiffness: 300,
                damping: 30,
              }}
            >
              <div className="absolute -top-2 left-1/2 -translate-x-1/2 w-8 h-1 bg-primary rounded-t-full">
                <div className="absolute w-12 h-6 bg-primary/20 rounded-full blur-md -top-2 -left-2" />
                <div className="absolute w-8 h-6 bg-primary/20 rounded-full blur-md -top-1" />
                <div className="absolute w-4 h-4 bg-primary/20 rounded-full blur-sm top-0 left-2" />
              </div>
            </motion.div>
          )}
        </button>
      </PopoverTrigger>
      <PopoverContent 
        className="w-72 p-3 mb-2 bg-background/60 border backdrop-blur-xl rounded-2xl shadow-lg"
        sideOffset={12}
        align="center"
      >
        <h3 className="text-md font-semibold px-2 pb-2 text-foreground">
          Shops in {categoryName}
        </h3>
        <ScrollArea className="h-80">
          <div className="space-y-1.5 pr-2">
            {loading ? (
              Array.from({ length: 5 }).map((_, i) => (
                <div key={i} className="flex items-center gap-3 p-3 rounded-xl">
                  <Skeleton className="w-10 h-10 rounded-lg" />
                  <div className="flex-1 space-y-1.5">
                    <Skeleton className="h-4 w-3/4" />
                    <Skeleton className="h-3 w-1/2" />
                  </div>
                </div>
              ))
            ) : shops.length > 0 ? (
              shops.map((shop) => (
                <Link
                  key={shop.id}
                  href={`/shop/${encodeURIComponent(shop.name)}`}
                  className="block rounded-xl p-3 text-sm transition-colors hover:bg-black/5 dark:hover:bg-white/10"
                  onClick={() => setIsOpen(false)}
                >
                  <div className="flex items-center gap-3">
                    <div className="text-2xl bg-muted flex items-center justify-center w-10 h-10 rounded-lg shrink-0">{shop.image}</div>
                    <div className="flex-1 min-w-0">
                      <p className="font-semibold text-foreground truncate">{shop.name}</p>
                      <div className="flex items-center gap-1.5 text-xs text-muted-foreground mt-0.5">
                        <div className="flex items-center gap-0.5">
                          <Star className="w-3 h-3 text-yellow-500 fill-current" />
                          <span>{shop.rating}</span>
                        </div>
                        <span>•</span>
                        <span className="truncate">{shop.deliveryTime}</span>
                      </div>
                    </div>
                    <ChevronRight className="w-4 h-4 text-muted-foreground shrink-0" />
                  </div>
                </Link>
              ))
            ) : (
              <p className="p-3 text-sm text-muted-foreground">No shops found.</p>
            )}
          </div>
        </ScrollArea>
      </PopoverContent>
    </Popover>
  );
}


--- File: userapp\src\components\super-saver-toggle.tsx ---

"use client";

import { cn } from '@/lib/utils';
import { useSuperSaverStore } from '@/store/superSaverStore';

export function SuperSaverToggle() {
  const { isSuperSaver, toggleSuperSaver, setSuperSaver } = useSuperSaverStore();

  return (
    <>
      {/* Desktop Toggle */}
      <button
        onClick={toggleSuperSaver}
        className="hidden h-[44px] w-[120px] rounded-full border border-gray-200 py-1 px-[5px] md:block"
        aria-pressed={isSuperSaver}
      >
        <div
          className={cn(
            "relative flex h-full w-full cursor-pointer items-center rounded-full p-0.5 transition-all",
            isSuperSaver ? "bg-gradient-to-b from-green-500 to-green-600" : "bg-gray-300"
          )}
        >
          <div
            className={cn(
              "absolute h-8 w-8 rounded-full bg-[#FCF65D] p-[3px] shadow-md transition-transform duration-500 ease-in-out",
              isSuperSaver ? "translate-x-[72px]" : "translate-x-0"
            )}
          >
            <div className="flex h-full w-full items-center justify-center rounded-full bg-[#F5D657] shadow-[inset_1px_0px_0px_0px_#EAB917]">
              <span className="text-lg font-bold text-green-700">₹</span>
            </div>
          </div>
          <span
            className={cn(
              "absolute left-3 font-bold italic text-white transition-opacity duration-300",
              isSuperSaver ? "opacity-100" : "opacity-0"
            )}
          >
            Saver
          </span>
        </div>
      </button>

      {/* Mobile Toggle */}
      <div className="flex h-12 w-full rounded-full bg-muted p-1 drop-shadow-md md:hidden">
        <button
          onClick={() => setSuperSaver(false)}
          className={cn(
            "flex-1 rounded-full text-center font-semibold transition-all duration-300",
            !isSuperSaver
              ? "bg-background text-foreground shadow-sm"
              : "bg-transparent text-muted-foreground"
          )}
        >
          Regular
        </button>
        <button
          onClick={() => setSuperSaver(true)}
          className={cn(
            "flex-1 rounded-full text-center font-semibold transition-all duration-300",
            isSuperSaver
              ? "bg-primary text-primary-foreground shadow-sm"
              : "bg-transparent text-muted-foreground"
          )}
        >
          Super Saver
        </button>
      </div>
    </>
  );
}


--- File: userapp\src\components\ui\accordion.tsx ---

"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


--- File: userapp\src\components\ui\alert-dialog.tsx ---

"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


--- File: userapp\src\components\ui\alert.tsx ---

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


--- File: userapp\src\components\ui\avatar.tsx ---

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


--- File: userapp\src\components\ui\background-gradient.tsx ---

"use client";
import { cn } from "@/lib/utils";
import React from "react";
import { motion } from "framer-motion";

export const BackgroundGradient = ({
  children,
  className,
  containerClassName,
  animate = true,
}: {
  children?: React.ReactNode;
  className?: string;
  containerClassName?: string;
  animate?: boolean;
}) => {
  const variants = {
    initial: {
      backgroundPosition: "0 50%",
    },
    animate: {
      backgroundPosition: ["0% 50%", "100% 50%", "0% 50%"],
    },
  };
  return (
    <div className={cn("relative p-[4px] group", containerClassName)}>
      <motion.div
        variants={animate ? variants : undefined}
        initial={animate ? "initial" : undefined}
        animate={animate ? "animate" : undefined}
        transition={
          animate
            ? {
                duration: 5,
                repeat: Infinity,
                repeatType: "reverse",
              }
            : undefined
        }
        style={{
          backgroundSize: animate ? "400% 400%" : undefined,
        }}
        className={cn(
          "absolute inset-0 rounded-3xl z-[1] opacity-60 group-hover:opacity-100 blur-xl  transition duration-500 will-change-transform",
          "bg-[radial-gradient(circle_farthest-side_at_0_100%,#00ccb1,transparent),radial-gradient(circle_farthest-side_at_100%_0,#7b61ff,transparent),radial-gradient(circle_farthest-side_at_100%_100%,#ffc414,transparent),radial-gradient(circle_farthest-side_at_0_0,#1ca0fb,#141316)]"
        )}
      />
      <motion.div
        variants={animate ? variants : undefined}
        initial={animate ? "initial" : undefined}
        animate={animate ? "animate" : undefined}
        transition={
          animate
            ? {
                duration: 5,
                repeat: Infinity,
                repeatType: "reverse",
              }
            : undefined
        }
        style={{
          backgroundSize: animate ? "400% 400%" : undefined,
        }}
        className={cn(
          "absolute inset-0 rounded-3xl z-[1] will-change-transform",
          "bg-[radial-gradient(circle_farthest-side_at_0_100%,#00ccb1,transparent),radial-gradient(circle_farthest-side_at_100%_0,#7b61ff,transparent),radial-gradient(circle_farthest-side_at_100%_100%,#ffc414,transparent),radial-gradient(circle_farthest-side_at_0_0,#1ca0fb,#141316)]"
        )}
      />

      <div className={cn("relative z-10", className)}>{children}</div>
    </div>
  );
};


--- File: userapp\src\components\ui\badge.tsx ---

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


--- File: userapp\src\components\ui\button.tsx ---

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


--- File: userapp\src\components\ui\calendar.tsx ---

"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }


--- File: userapp\src\components\ui\card.tsx ---

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

--- File: userapp\src\components\ui\carousel.tsx ---

"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


--- File: userapp\src\components\ui\chart.tsx ---

"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


--- File: userapp\src\components\ui\checkbox.tsx ---

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


--- File: userapp\src\components\ui\collapsible.tsx ---

"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


--- File: userapp\src\components\ui\dialog.tsx ---


"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


--- File: userapp\src\components\ui\dropdown-menu.tsx ---

"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


--- File: userapp\src\components\ui\form.tsx ---

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


--- File: userapp\src\components\ui\input.tsx ---

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


--- File: userapp\src\components\ui\label.tsx ---

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


--- File: userapp\src\components\ui\menubar.tsx ---

"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


--- File: userapp\src\components\ui\navigation-menu.tsx ---

"use client"

import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


--- File: userapp\src\components\ui\popover.tsx ---

"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


--- File: userapp\src\components\ui\progress.tsx ---

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


--- File: userapp\src\components\ui\radio-group.tsx ---

"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }


--- File: userapp\src\components\ui\scroll-area.tsx ---

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


--- File: userapp\src\components\ui\select.tsx ---

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


--- File: userapp\src\components\ui\separator.tsx ---

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


--- File: userapp\src\components\ui\sheet.tsx ---

"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


--- File: userapp\src\components\ui\sidebar.tsx ---

"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}


--- File: userapp\src\components\ui\skeleton.tsx ---

import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


--- File: userapp\src\components\ui\slider.tsx ---

"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


--- File: userapp\src\components\ui\switch.tsx ---

"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


--- File: userapp\src\components\ui\table.tsx ---

import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


--- File: userapp\src\components\ui\tabs.tsx ---

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


--- File: userapp\src\components\ui\textarea.tsx ---

import * as React from 'react';

import {cn} from '@/lib/utils';

const Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(
  ({className, ...props}, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';

export {Textarea};


--- File: userapp\src\components\ui\toast.tsx ---

"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


--- File: userapp\src\components\ui\toaster.tsx ---

"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


--- File: userapp\src\components\ui\tooltip.tsx ---

"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


--- File: userapp\src\data\bannerImages.ts ---

export interface BannerImage {
  src: string;
  alt: string;
  href: string;
  dataAiHint: string;
}

export const bannerImages: BannerImage[] = [
  {
    src: 'https://placehold.co/1200x300.png',
    alt: 'Special offer on groceries',
    href: '/shops/Supermarket',
    dataAiHint: 'supermarket groceries',
  },
  {
    src: 'https://placehold.co/1200x300.png',
    alt: 'Fresh meat delivery',
    href: '/shops/Meat',
    dataAiHint: 'fresh meat',
  },
  {
    src: 'https://placehold.co/1200x300.png',
    alt: 'Latest electronics on sale',
    href: '/shops/Electronics',
    dataAiHint: 'electronics sale',
  },
];


--- File: userapp\src\data\categories.ts ---

export interface NavItem {
  name: string;
  icon: string;
}

export const categories: NavItem[] = [
  { name: "Supermarket", icon: "ShoppingCart" },
  { name: "Pharmacy", icon: "Pill" },
  { name: "Meat", icon: "Beef" },
  { name: "Electronics", icon: "Smartphone" },
  { name: "Stationary", icon: "PenTool" },
  { name: "Fruits & Vegetables", icon: "Apple" },
  { name: "Gifts", icon: "Gift" },
];

export const superSaverCategories: NavItem[] = [
  { name: "Super Deals", icon: "Flame" },
  { name: "Bulk Buys", icon: "ShoppingBag" },
  { name: "Value Packs", icon: "Zap" },
];


--- File: userapp\src\data\products.ts ---


export interface Product {
  id: string;
  name: string;
  price: number;
  unit: string;
  image: string;
  category: string;
  description: string;
  rating: number;
  inStock: boolean;
  shopName: string;
  shopCategory: string;
  dataAiHint?: string;
}

export const products: Record<string, Record<string, Product[]>> = {
  "FreshMart Supermarket": {
    "Grocery": [
      { 
        id: "rice-5kg", 
        name: "Organic Rice 5kg", 
        price: 12.99, 
        unit: "per bag", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "organic rice",
        category: "Grains", 
        description: "Premium organic basmati rice", 
        rating: 4.8, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery"
      },
      { 
        id: "milk-1l", 
        name: "Fresh Milk 1L", 
        price: 3.49, 
        unit: "per bottle", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "milk bottle",
        category: "Dairy", 
        description: "Farm fresh whole milk", 
        rating: 4.7, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery"
      },
      { 
        id: "bread-wheat", 
        name: "Whole Wheat Bread", 
        price: 2.99, 
        unit: "per loaf", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "wheat bread",
        category: "Bakery", 
        description: "Freshly baked whole wheat bread", 
        rating: 4.6, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery"
      },
      { 
        id: "coffee-500g", 
        name: "Premium Coffee 500g", 
        price: 8.99, 
        unit: "per pack", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "coffee beans",
        category: "Beverages", 
        description: "Arabica coffee beans", 
        rating: 4.9, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery"
      },
      { 
        id: "olive-oil", 
        name: "Extra Virgin Olive Oil", 
        price: 15.99, 
        unit: "per bottle", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "olive oil",
        category: "Cooking Oil", 
        description: "Cold pressed olive oil", 
        rating: 4.8, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery"
      },
      { 
        id: "pasta-collection", 
        name: "Pasta Collection", 
        price: 4.99, 
        unit: "per pack", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "pasta",
        category: "Pasta", 
        description: "Assorted pasta varieties", 
        rating: 4.5, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery"
      },
      { 
        id: "eggs-12", 
        name: "Fresh Eggs (12 pcs)", 
        price: 4.49, 
        unit: "per dozen", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "eggs carton",
        category: "Dairy", 
        description: "Free-range chicken eggs", 
        rating: 4.7, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery"
      },
      { 
        id: "basmati-2kg", 
        name: "Basmati Rice 2kg", 
        price: 7.99, 
        unit: "per bag", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "rice bag",
        category: "Grains", 
        description: "Premium basmati rice", 
        rating: 4.8, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery"
      },
      {
        id: 'cereal-1kg',
        name: 'Corn Flakes Cereal 1kg',
        price: 5.49,
        unit: 'per box',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "cereal box",
        category: 'Breakfast',
        description: 'Crispy corn flakes for a great start to your day.',
        rating: 4.5,
        inStock: true,
        shopName: 'FreshMart Supermarket',
        shopCategory: 'Grocery',
      },
      {
        id: 'honey-500g',
        name: 'Natural Honey 500g',
        price: 9.99,
        unit: 'per jar',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "honey jar",
        category: 'Spreads',
        description: 'Pure, natural honey from wild flowers.',
        rating: 4.9,
        inStock: true,
        shopName: 'FreshMart Supermarket',
        shopCategory: 'Grocery',
      },
      {
        id: 'jam-strawberry',
        name: 'Strawberry Jam 300g',
        price: 4.29,
        unit: 'per jar',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "strawberry jam",
        category: 'Spreads',
        description: 'Made with real strawberries.',
        rating: 4.6,
        inStock: true,
        shopName: 'FreshMart Supermarket',
        shopCategory: 'Grocery',
      },
      {
        id: 'peanut-butter-1kg',
        name: 'Crunchy Peanut Butter 1kg',
        price: 7.89,
        unit: 'per jar',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "peanut butter",
        category: 'Spreads',
        description: 'Made with 100% roasted peanuts.',
        rating: 4.7,
        inStock: false,
        shopName: 'FreshMart Supermarket',
        shopCategory: 'Grocery',
      },
      {
        id: 'canned-tuna',
        name: 'Canned Tuna in Olive Oil',
        price: 3.19,
        unit: 'per can',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "tuna can",
        category: 'Canned Goods',
        description: 'High-quality tuna chunks.',
        rating: 4.4,
        inStock: true,
        shopName: 'FreshMart Supermarket',
        shopCategory: 'Grocery',
      },
      {
        id: 'ketchup-500ml',
        name: 'Tomato Ketchup 500ml',
        price: 3.59,
        unit: 'per bottle',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "ketchup bottle",
        category: 'Condiments',
        description: 'Classic tomato ketchup.',
        rating: 4.5,
        inStock: true,
        shopName: 'FreshMart Supermarket',
        shopCategory: 'Grocery',
      },
      {
        id: "lentils-1kg",
        name: "Red Lentils 1kg",
        price: 5.99,
        unit: "per bag",
        image: "https://placehold.co/400x400.png",
        dataAiHint: "red lentils",
        category: "Grains",
        description: "High-protein red lentils.",
        rating: 4.7,
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery",
      },
      {
        id: "sugar-1kg",
        name: "Refined Sugar 1kg",
        price: 3.29,
        unit: "per bag",
        image: "https://placehold.co/400x400.png",
        dataAiHint: "sugar bag",
        category: "Baking",
        description: "Fine granulated white sugar.",
        rating: 4.5,
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery",
      },
      {
        id: "flour-2kg",
        name: "All-Purpose Flour 2kg",
        price: 4.49,
        unit: "per bag",
        image: "https://placehold.co/400x400.png",
        dataAiHint: "flour bag",
        category: "Baking",
        description: "Perfect for all your baking needs.",
        rating: 4.6,
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery",
      },
      {
        id: "tea-black-100bags",
        name: "Black Tea 100 Bags",
        price: 6.79,
        unit: "per box",
        image: "https://placehold.co/400x400.png",
        dataAiHint: "tea bags",
        category: "Beverages",
        description: "Rich and aromatic black tea.",
        rating: 4.8,
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery",
      },
      {
        id: "salt-1kg",
        name: "Iodized Salt 1kg",
        price: 1.99,
        unit: "per bag",
        image: "https://placehold.co/400x400.png",
        dataAiHint: "salt shaker",
        category: "Condiments",
        description: "Essential for every kitchen.",
        rating: 4.9,
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery",
      },
      {
        id: "soy-sauce-500ml",
        name: "Soy Sauce 500ml",
        price: 4.99,
        unit: "per bottle",
        image: "https://placehold.co/400x400.png",
        dataAiHint: "soy sauce",
        category: "Condiments",
        description: "Traditionally brewed soy sauce.",
        rating: 4.5,
        inStock: false,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery",
      },
      {
        id: "almonds-250g",
        name: "Raw Almonds 250g",
        price: 8.49,
        unit: "per pack",
        image: "https://placehold.co/400x400.png",
        dataAiHint: "almonds",
        category: "Healthy Snacks",
        description: "Unsalted raw almonds.",
        rating: 4.8,
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery",
      },
      {
        id: "cheddar-cheese-200g",
        name: "Cheddar Cheese Block 200g",
        price: 5.99,
        unit: "per pack",
        image: "https://placehold.co/400x400.png",
        dataAiHint: "cheese block",
        category: "Dairy",
        description: "Sharp and tangy cheddar cheese.",
        rating: 4.7,
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery",
      },
      {
        id: "butter-500g",
        name: "Salted Butter 500g",
        price: 6.29,
        unit: "per block",
        image: "https://placehold.co/400x400.png",
        dataAiHint: "butter",
        category: "Dairy",
        description: "Creamy salted butter.",
        rating: 4.6,
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery",
      },
      {
        id: "yogurt-1kg",
        name: "Plain Yogurt 1kg",
        price: 4.99,
        unit: "per tub",
        image: "https://placehold.co/400x400.png",
        dataAiHint: "yogurt tub",
        category: "Dairy",
        description: "Natural plain yogurt.",
        rating: 4.5,
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Grocery",
      }
    ],
    "Snacks": [
      { 
        id: "mixed-nuts", 
        name: "Mixed Nuts 250g", 
        price: 6.99, 
        unit: "per pack", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "mixed nuts",
        category: "Healthy Snacks", 
        description: "Premium mixed nuts", 
        rating: 4.6, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Snacks"
      },
      { 
        id: "chocolate-cookies", 
        name: "Chocolate Cookies", 
        price: 3.99, 
        unit: "per pack", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "chocolate cookies",
        category: "Sweet Snacks", 
        description: "Homemade chocolate cookies", 
        rating: 4.5, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Snacks"
      },
      { 
        id: "potato-chips", 
        name: "Potato Chips", 
        price: 2.49, 
        unit: "per bag", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "potato chips",
        category: "Crispy Snacks", 
        description: "Crispy potato chips", 
        rating: 4.3, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Snacks"
      },
      { 
        id: "granola-bars", 
        name: "Granola Bars (6 pack)", 
        price: 5.99, 
        unit: "per pack", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "granola bars",
        category: "Energy Bars", 
        description: "Healthy granola bars", 
        rating: 4.7, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Snacks"
      },
      { 
        id: "popcorn-variety", 
        name: "Popcorn Variety Pack", 
        price: 4.99, 
        unit: "per pack", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "popcorn",
        category: "Movie Snacks", 
        description: "Assorted popcorn flavors", 
        rating: 4.4, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Snacks"
      },
      { 
        id: "trail-mix", 
        name: "Trail Mix", 
        price: 7.49, 
        unit: "per bag", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "trail mix",
        category: "Healthy Snacks", 
        description: "Nuts, seeds and dried fruits", 
        rating: 4.6, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Snacks"
      },
      {
        id: 'pretzels-500g',
        name: 'Salted Pretzels 500g',
        price: 3.99,
        unit: 'per bag',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "pretzels",
        category: 'Salty Snacks',
        description: 'Classic salted pretzels, perfect for dipping.',
        rating: 4.4,
        inStock: true,
        shopName: 'FreshMart Supermarket',
        shopCategory: 'Snacks',
      },
      {
        id: 'rice-cakes-100g',
        name: 'Lightly Salted Rice Cakes 100g',
        price: 2.29,
        unit: 'per pack',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "rice cakes",
        category: 'Healthy Snacks',
        description: 'A light and crispy snack.',
        rating: 4.2,
        inStock: true,
        shopName: 'FreshMart Supermarket',
        shopCategory: 'Snacks',
      },
      {
        id: 'dark-chocolate-100g',
        name: '70% Dark Chocolate Bar 100g',
        price: 3.49,
        unit: 'per bar',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "dark chocolate",
        category: 'Sweet Snacks',
        description: 'Rich and intense dark chocolate.',
        rating: 4.8,
        inStock: true,
        shopName: 'FreshMart Supermarket',
        shopCategory: 'Snacks',
      },
      {
        id: 'cashews-250g',
        name: 'Roasted Cashews 250g',
        price: 9.99,
        unit: 'per pack',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "cashews",
        category: 'Healthy Snacks',
        description: 'Lightly salted roasted cashews.',
        rating: 4.9,
        inStock: true,
        shopName: 'FreshMart Supermarket',
        shopCategory: 'Snacks',
      },
      {
        id: 'oat-cookies-200g',
        name: 'Oatmeal Cookies 200g',
        price: 4.49,
        unit: 'per pack',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "oatmeal cookies",
        category: 'Sweet Snacks',
        description: 'Hearty oatmeal and raisin cookies.',
        rating: 4.6,
        inStock: true,
        shopName: 'FreshMart Supermarket',
        shopCategory: 'Snacks',
      },
      {
        id: 'tortilla-chips-300g',
        name: 'Tortilla Chips 300g',
        price: 3.79,
        unit: 'per bag',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "tortilla chips",
        category: 'Crispy Snacks',
        description: 'Perfect for dipping in salsa.',
        rating: 4.5,
        inStock: false,
        shopName: 'FreshMart Supermarket',
        shopCategory: 'Snacks',
      }
    ],
    "Cool Drinks": [
      { 
        id: "coca-cola", 
        name: "Coca Cola 330ml", 
        price: 1.99, 
        unit: "per can", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "soda can",
        category: "Soft Drinks", 
        description: "Classic Coca Cola", 
        rating: 4.5, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Cool Drinks"
      },
      { 
        id: "orange-juice", 
        name: "Orange Juice 1L", 
        price: 3.99, 
        unit: "per bottle", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "orange juice",
        category: "Fruit Juices", 
        description: "Fresh orange juice", 
        rating: 4.7, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Cool Drinks"
      },
      { 
        id: "sparkling-water", 
        name: "Sparkling Water 500ml", 
        price: 1.49, 
        unit: "per bottle", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "water bottle",
        category: "Water", 
        description: "Natural sparkling water", 
        rating: 4.4, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Cool Drinks"
      },
      { 
        id: "energy-drink", 
        name: "Energy Drink 250ml", 
        price: 2.99, 
        unit: "per can", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "energy drink",
        category: "Energy Drinks", 
        description: "High energy drink", 
        rating: 4.2, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Cool Drinks"
      },
      { 
        id: "iced-tea", 
        name: "Iced Tea Lemon", 
        price: 2.49, 
        unit: "per bottle", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "iced tea",
        category: "Tea", 
        description: "Refreshing lemon iced tea", 
        rating: 4.3, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Cool Drinks"
      },
      { 
        id: "sports-drink", 
        name: "Sports Drink 500ml", 
        price: 2.79, 
        unit: "per bottle", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "sports drink",
        category: "Sports Drinks", 
        description: "Electrolyte sports drink", 
        rating: 4.1, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Cool Drinks"
      }
    ],
    "Dairy": [
      { 
        id: "yogurt-greek", 
        name: "Greek Yogurt 500g", 
        price: 4.99, 
        unit: "per container", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "yogurt",
        category: "Dairy", 
        description: "Creamy Greek yogurt", 
        rating: 4.8, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Dairy"
      },
      { 
        id: "cheese-cheddar", 
        name: "Cheddar Cheese 200g", 
        price: 5.49, 
        unit: "per block", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "cheddar cheese",
        category: "Dairy", 
        description: "Aged cheddar cheese", 
        rating: 4.7, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Dairy"
      },
      { 
        id: "butter-unsalted", 
        name: "Unsalted Butter 250g", 
        price: 3.99, 
        unit: "per pack", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "butter",
        category: "Dairy", 
        description: "Fresh unsalted butter", 
        rating: 4.6, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Dairy"
      }
    ],
    "Bakery": [
      { 
        id: "croissants", 
        name: "Fresh Croissants (4 pcs)", 
        price: 6.99, 
        unit: "per pack", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "croissants",
        category: "Bakery", 
        description: "Buttery croissants", 
        rating: 4.8, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Bakery"
      },
      { 
        id: "bagels", 
        name: "Everything Bagels (6 pcs)", 
        price: 4.99, 
        unit: "per pack", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "bagels",
        category: "Bakery", 
        description: "Fresh everything bagels", 
        rating: 4.5, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Bakery"
      },
      { 
        id: "muffins", 
        name: "Blueberry Muffins (4 pcs)", 
        price: 5.99, 
        unit: "per pack", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "muffins",
        category: "Bakery", 
        description: "Fresh blueberry muffins", 
        rating: 4.7, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Bakery"
      }
    ],
    "Frozen": [
      { 
        id: "ice-cream-vanilla", 
        name: "Vanilla Ice Cream 1L", 
        price: 7.99, 
        unit: "per tub", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "ice cream",
        category: "Frozen", 
        description: "Premium vanilla ice cream", 
        rating: 4.6, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Frozen"
      },
      { 
        id: "frozen-pizza", 
        name: "Margherita Pizza", 
        price: 8.99, 
        unit: "per pizza", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "pizza",
        category: "Frozen", 
        description: "Frozen margherita pizza", 
        rating: 4.3, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Frozen"
      },
      { 
        id: "frozen-vegetables", 
        name: "Mixed Vegetables 500g", 
        price: 3.99, 
        unit: "per bag", 
        image: "https://placehold.co/400x400.png",
        dataAiHint: "frozen vegetables",
        category: "Frozen", 
        description: "Frozen mixed vegetables", 
        rating: 4.4, 
        inStock: true,
        shopName: "FreshMart Supermarket",
        shopCategory: "Frozen"
      }
    ]
  },
  "Prime Cuts Butchery": {
    "Chicken": [
      {
        id: 'chicken-breast',
        name: 'Chicken Breast',
        price: 12.99,
        unit: 'per lb',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "chicken breast",
        description: 'Fresh, boneless chicken breast',
        rating: 4.8,
        inStock: true,
        category: 'Chicken',
        shopName: "Prime Cuts Butchery",
        shopCategory: "Chicken"
      },
      {
        id: 'chicken-thigh',
        name: 'Chicken Thigh',
        price: 8.99,
        unit: 'per lb',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "chicken thigh",
        description: 'Juicy chicken thighs with bone',
        rating: 4.6,
        inStock: true,
        category: 'Chicken',
        shopName: "Prime Cuts Butchery",
        shopCategory: "Chicken"
      },
      {
        id: 'whole-chicken',
        name: 'Whole Chicken',
        price: 15.99,
        unit: 'each',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "whole chicken",
        description: 'Fresh whole chicken, farm raised',
        rating: 4.9,
        inStock: true,
        category: 'Chicken',
        shopName: "Prime Cuts Butchery",
        shopCategory: "Chicken"
      },
      {
        id: 'chicken-wings',
        name: 'Chicken Wings',
        price: 10.99,
        unit: 'per lb',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "chicken wings",
        description: 'Perfect for grilling and frying',
        rating: 4.7,
        inStock: true,
        category: 'Chicken',
        shopName: "Prime Cuts Butchery",
        shopCategory: "Chicken"
      },
      {
        id: 'chicken-drumsticks',
        name: 'Chicken Drumsticks',
        price: 7.99,
        unit: 'per lb',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "chicken drumsticks",
        description: 'Meaty drumsticks, great for baking.',
        rating: 4.5,
        inStock: true,
        category: 'Chicken',
        shopName: "Prime Cuts Butchery",
        shopCategory: "Chicken"
      },
      {
        id: 'ground-chicken',
        name: 'Ground Chicken',
        price: 9.99,
        unit: 'per lb',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "ground chicken",
        description: 'Lean ground chicken for various recipes.',
        rating: 4.7,
        inStock: true,
        category: 'Chicken',
        shopName: "Prime Cuts Butchery",
        shopCategory: "Chicken"
      }
    ],
    "Mutton": [
      {
        id: 'lamb-chops',
        name: 'Lamb Chops',
        price: 24.99,
        unit: 'per lb',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "lamb chops",
        description: 'Premium lamb chops, tender and flavorful',
        rating: 4.9,
        inStock: true,
        category: 'Mutton',
        shopName: "Prime Cuts Butchery",
        shopCategory: "Mutton"
      },
      {
        id: 'leg-of-lamb',
        name: 'Leg of Lamb',
        price: 19.99,
        unit: 'per lb',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "leg lamb",
        description: 'Perfect for roasting, bone-in',
        rating: 4.8,
        inStock: true,
        category: 'Mutton',
        shopName: "Prime Cuts Butchery",
        shopCategory: "Mutton"
      },
      {
        id: 'ground-lamb',
        name: 'Ground Lamb',
        price: 16.99,
        unit: 'per lb',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "ground lamb",
        description: 'Fresh ground lamb, 85% lean',
        rating: 4.6,
        inStock: true,
        category: 'Mutton',
        shopName: "Prime Cuts Butchery",
        shopCategory: "Mutton"
      },
      {
        id: 'lamb-shoulder',
        name: 'Lamb Shoulder',
        price: 18.99,
        unit: 'per lb',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "lamb shoulder",
        description: 'Slow-cook perfect lamb shoulder',
        rating: 4.7,
        inStock: false,
        category: 'Mutton',
        shopName: "Prime Cuts Butchery",
        shopCategory: "Mutton"
      }
    ]
  },
  "TechWorld Electronics": {
    "Smartphones": [
      {
        id: 'phone-galaxy',
        name: 'Galaxy SuperPhone',
        price: 999.99,
        unit: 'each',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "smartphone",
        description: 'The latest and greatest smartphone technology.',
        rating: 4.9,
        inStock: true,
        category: 'Smartphones',
        shopName: 'TechWorld Electronics',
        shopCategory: 'Smartphones',
      },
      {
        id: 'phone-pixel',
        name: 'Pixel Perfect Camera Phone',
        price: 899.99,
        unit: 'each',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "camera phone",
        description: "Capture life's moments in stunning detail.",
        rating: 4.8,
        inStock: true,
        category: 'Smartphones',
        shopName: 'TechWorld Electronics',
        shopCategory: 'Smartphones',
      },
      {
        id: 'phone-oneplus',
        name: 'OnePlus Challenger',
        price: 799.99,
        unit: 'each',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "smartphone oneplus",
        description: 'Flagship performance, challenger price.',
        rating: 4.7,
        inStock: true,
        category: 'Smartphones',
        shopName: 'TechWorld Electronics',
        shopCategory: 'Smartphones',
      },
      {
        id: 'phone-budget',
        name: 'Budget King Phone',
        price: 299.99,
        unit: 'each',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "budget phone",
        description: 'All the essentials at an unbeatable price.',
        rating: 4.4,
        inStock: true,
        category: 'Smartphones',
        shopName: 'TechWorld Electronics',
        shopCategory: 'Smartphones',
      }
    ],
    "Laptops": [
      {
        id: 'laptop-pro',
        name: 'UltraBook Pro',
        price: 1499.99,
        unit: 'each',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "laptop",
        description: 'Powerful and portable for professionals.',
        rating: 4.9,
        inStock: true,
        category: 'Laptops',
        shopName: 'TechWorld Electronics',
        shopCategory: 'Laptops',
      },
      {
        id: 'laptop-gaming',
        name: "Gamer's Delight Laptop",
        price: 1999.99,
        unit: 'each',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "gaming laptop",
        description: 'Dominate the competition with this gaming beast.',
        rating: 4.7,
        inStock: false,
        category: 'Laptops',
        shopName: 'TechWorld Electronics',
        shopCategory: 'Laptops',
      },
      {
        id: 'laptop-student',
        name: 'StudentBook Light',
        price: 699.99,
        unit: 'each',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "student laptop",
        description: 'Lightweight and perfect for students.',
        rating: 4.6,
        inStock: true,
        category: 'Laptops',
        shopName: 'TechWorld Electronics',
        shopCategory: 'Laptops',
      },
      {
        id: 'laptop-convertible',
        name: 'FlexiBook 2-in-1',
        price: 1199.99,
        unit: 'each',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "convertible laptop",
        description: 'A versatile laptop and tablet in one.',
        rating: 4.8,
        inStock: true,
        category: 'Laptops',
        shopName: 'TechWorld Electronics',
        shopCategory: 'Laptops',
      }
    ]
  },
  "Value Grocers": {
    "Staples": [
      {
        id: 'vg-flour-1kg',
        name: 'All-Purpose Flour 1kg',
        price: 1.99,
        unit: 'per bag',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "flour bag",
        description: 'Perfect for baking and cooking.',
        rating: 4.5,
        inStock: true,
        category: 'Staples',
        shopName: 'Value Grocers',
        shopCategory: 'Staples',
      },
      {
        id: 'vg-sugar-1kg',
        name: 'White Sugar 1kg',
        price: 2.49,
        unit: 'per bag',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "sugar bag",
        description: 'Fine granulated sugar.',
        rating: 4.6,
        inStock: true,
        category: 'Staples',
        shopName: 'Value Grocers',
        shopCategory: 'Staples',
      }
    ],
    "Beverages": [
      {
        id: 'vg-cola-2l',
        name: 'Cola Drink 2L',
        price: 2.99,
        unit: 'per bottle',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "soda bottle",
        description: 'Large cola bottle for sharing.',
        rating: 4.3,
        inStock: true,
        category: 'Beverages',
        shopName: 'Value Grocers',
        shopCategory: 'Beverages',
      }
    ]
  },
  "The Veggie Patch": {
    "Leafy Greens": [
      {
        id: 'vp-spinach',
        name: 'Fresh Spinach Bunch',
        price: 2.99,
        unit: 'per bunch',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "spinach",
        description: 'Rich in iron and vitamins.',
        rating: 4.8,
        inStock: true,
        category: 'Leafy Greens',
        shopName: 'The Veggie Patch',
        shopCategory: 'Leafy Greens',
      },
      {
        id: 'vp-lettuce',
        name: 'Crisp Iceberg Lettuce',
        price: 1.99,
        unit: 'per head',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "lettuce",
        description: 'Perfect for salads and sandwiches.',
        rating: 4.7,
        inStock: true,
        category: 'Leafy Greens',
        shopName: 'The Veggie Patch',
        shopCategory: 'Leafy Greens',
      }
    ],
    "Root Vegetables": [
        {
        id: 'vp-carrots',
        name: 'Organic Carrots 1lb',
        price: 2.49,
        unit: 'per bag',
        image: 'https://placehold.co/400x400.png',
        dataAiHint: "carrots",
        description: 'Sweet and crunchy organic carrots.',
        rating: 4.9,
        inStock: true,
        category: 'Root Vegetables',
        shopName: 'The Veggie Patch',
        shopCategory: 'Root Vegetables',
      }
    ]
  },
  "Community Pharmacy": {
      "Pain Relief": [
          {
              id: 'cp-aspirin',
              name: 'Aspirin 100 tablets',
              price: 8.99,
              unit: 'per bottle',
              image: 'https://placehold.co/400x400.png',
              dataAiHint: "aspirin pills",
              description: 'Effective pain relief for headaches.',
              rating: 4.8,
              inStock: true,
              category: 'Pain Relief',
              shopName: 'Community Pharmacy',
              shopCategory: 'Pain Relief'
          }
      ],
      "Cold & Flu": [
          {
              id: 'cp-cold-syrup',
              name: 'Cold & Flu Syrup',
              price: 12.99,
              unit: 'per bottle',
              image: 'https://placehold.co/400x400.png',
              dataAiHint: "cough syrup",
              description: 'Non-drowsy formula for cold symptoms.',
              rating: 4.7,
              inStock: true,
              category: 'Cold & Flu',
              shopName: 'Community Pharmacy',
              shopCategory: 'Cold & Flu'
          }
      ]
  },
  "The Paper Mill": {
    "Notebooks": [
        {
            id: 'pm-journal',
            name: 'Hardcover Journal',
            price: 15.99,
            unit: 'each',
            image: 'https://placehold.co/400x400.png',
            dataAiHint: "journal notebook",
            description: 'A5 size, 200 lined pages.',
            rating: 4.9,
            inStock: true,
            category: 'Notebooks',
            shopName: 'The Paper Mill',
            shopCategory: 'Notebooks'
        }
    ],
    "Writing Tools": [
        {
            id: 'pm-fountain-pen',
            name: 'Classic Fountain Pen',
            price: 29.99,
            unit: 'each',
            image: 'https://placehold.co/400x400.png',
            dataAiHint: "fountain pen",
            description: 'Smooth writing with black ink.',
            rating: 4.8,
            inStock: true,
            category: 'Writing Tools',
            shopName: 'The Paper Mill',
            shopCategory: 'Writing Tools'
        }
    ]
  },
   "The Gift Box": {
      "For Her": [
          {
              id: 'gb-necklace',
              name: 'Silver Heart Necklace',
              price: 49.99,
              unit: 'each',
              image: 'https://placehold.co/400x400.png',
              dataAiHint: "silver necklace",
              description: 'Elegant sterling silver necklace.',
              rating: 4.9,
              inStock: true,
              category: 'For Her',
              shopName: 'The Gift Box',
              shopCategory: 'For Her'
          }
      ],
      "For Him": [
          {
              id: 'gb-watch',
              name: 'Leather Strap Watch',
              price: 79.99,
              unit: 'each',
              image: 'https://placehold.co/400x400.png',
              dataAiHint: "leather watch",
              description: 'Classic and stylish watch for men.',
              rating: 4.8,
              inStock: true,
              category: 'For Him',
              shopName: 'The Gift Box',
              shopCategory: 'For Him'
          }
      ]
   }
};


--- File: userapp\src\data\shopCategories.ts ---


export interface ShopCategory {
  name: string;
  url: string;
  icon: string;
  image: string;
}

export const shopCategories: Record<string, ShopCategory[]> = {
  "FreshMart Supermarket": [
    { name: "Grocery", url: "/grocery", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Snacks", url: "/snacks", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Cool Drinks", url: "/cooldrinks", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Dairy", url: "/dairy", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Bakery", url: "/bakery", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Frozen", url: "/frozen", icon: "Zap", image: "https://placehold.co/150x150.png" },
  ],
  "MegaStore Plus": [
    { name: "Grocery", url: "/grocery", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Snacks", url: "/snacks", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Cool Drinks", url: "/cooldrinks", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Household", url: "/household", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Personal Care", url: "/personalcare", icon: "Coffee", image: "https://placehold.co/150x150.png" },
  ],
  "QuickMart Express": [
    { name: "Grocery", url: "/grocery", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Snacks", url: "/snacks", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Cool Drinks", url: "/cooldrinks", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Ready Meals", url: "/readymeals", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "GreenGrocer Market": [
    { name: "Organic Grocery", url: "/organic", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Health Snacks", url: "/healthsnacks", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Natural Drinks", url: "/naturaldrinks", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Supplements", url: "/supplements", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "Value Grocers": [
    { name: "Staples", url: "/staples", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Beverages", url: "/beverages", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Cleaning Supplies", url: "/cleaning", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "Corner Mart": [
    { name: "Essentials", url: "/essentials", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Dairy & Bread", url: "/dairy-bread", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Munchies", url: "/munchies", icon: "Zap", image: "https://placehold.co/150x150.png" },
  ],
  "HealthCare Plus Pharmacy": [
    { name: "Medicines", url: "/medicines", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Vitamins", url: "/vitamins", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Personal Care", url: "/personalcare", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Baby Care", url: "/babycare", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "First Aid", url: "/firstaid", icon: "Coffee", image: "https://placehold.co/150x150.png" },
  ],
  "MediQuick Pharmacy": [
    { name: "Prescription", url: "/prescription", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "OTC Medicines", url: "/otc", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Health Devices", url: "/devices", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Beauty", url: "/beauty", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "WellCare Drugstore": [
    { name: "Medicines", url: "/medicines", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Wellness", url: "/wellness", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Skincare", url: "/skincare", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Nutrition", url: "/nutrition", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "Community Pharmacy": [
    { name: "Pain Relief", url: "/pain-relief", icon: "Pill", image: "https://placehold.co/150x150.png" },
    { name: "Cold & Flu", url: "/cold-flu", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Vitamins & Supplements", url: "/vitamins", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "Prime Cuts Butchery": [
    { name: "Chicken", url: "/chicken", icon: "Beef", image: "https://placehold.co/150x150.png" },
    { name: "Mutton", url: "/mutton", icon: "Beef", image: "https://placehold.co/150x150.png" },
    { name: "Fish", url: "/fish", icon: "Fish", image: "https://placehold.co/150x150.png" },
    { name: "Beef", url: "/beef", icon: "Beef", image: "https://placehold.co/150x150.png" },
    { name: "Pork", url: "/pork", icon: "PiggyBank", image: "https://placehold.co/150x150.png" },
    { name: "Prawn", url: "/prawn", icon: "Shell", image: "https://placehold.co/150x150.png" },
  ],
  "Fresh Meat Market": [
    { name: "Halal Chicken", url: "/halalchicken", icon: "Beef", image: "https://placehold.co/150x150.png" },
    { name: "Halal Mutton", url: "/halalmutton", icon: "Beef", image: "https://placehold.co/150x150.png" },
    { name: "Fresh Fish", url: "/freshfish", icon: "Fish", image: "https://placehold.co/150x150.png" },
    { name: "Seafood", url: "/seafood", icon: "Shell", image: "https://placehold.co/150x150.png" },
  ],
  "Butcher's Choice": [
    { name: "Premium Cuts", url: "/premium", icon: "Beef", image: "https://placehold.co/150x150.png" },
    { name: "Specialty Meats", url: "/specialty", icon: "Beef", image: "https://placehold.co/150x150.png" },
    { name: "Marinated", url: "/marinated", icon: "Beef", image: "https://placehold.co/150x150.png" },
    { name: "Sausages", url: "/sausages", icon: "Beef", image: "https://placehold.co/150x150.png" },
  ],
  "The Meat Co.": [
    { name: "Sausages", url: "/sausages", icon: "Beef", image: "https://placehold.co/150x150.png" },
    { name: "Steaks", url: "/steaks", icon: "Beef", image: "https://placehold.co/150x150.png" },
    { name: "Ground Meats", url: "/ground-meats", icon: "Beef", image: "https://placehold.co/150x150.png" },
  ],
  "TechWorld Electronics": [
    { name: "Smartphones", url: "/smartphones", icon: "Smartphone", image: "https://placehold.co/150x150.png" },
    { name: "Laptops", url: "/laptops", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Accessories", url: "/accessories", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Audio", url: "/audio", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Gaming", url: "/gaming", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "Digital Hub Store": [
    { name: "Computers", url: "/computers", icon: "Smartphone", image: "https://placehold.co/150x150.png" },
    { name: "Mobile Devices", url: "/mobile", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Cables & Adapters", url: "/cables", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Storage", url: "/storage", icon: "Zap", image: "https://placehold.co/150x150.png" },
  ],
  "Gadget Galaxy": [
    { name: "Smart Home", url: "/smarthome", icon: "Smartphone", image: "https://placehold.co/150x150.png" },
    { name: "Wearables", url: "/wearables", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Gaming Gear", url: "/gaminggear", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Tech Gadgets", url: "/gadgets", icon: "Zap", image: "https://placehold.co/150x150.png" },
  ],
  "Electro Zone": [
    { name: "Televisions", url: "/tvs", icon: "Smartphone", image: "https://placehold.co/150x150.png" },
    { name: "Cameras", url: "/cameras", icon: "Camera", image: "https://placehold.co/150x150.png" },
    { name: "Home Audio", url: "/home-audio", icon: "Zap", image: "https://placehold.co/150x150.png" },
  ],
  "Office Essentials Store": [
    { name: "Writing", url: "/writing", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Paper", url: "/paper", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Office Supplies", url: "/office", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Storage", url: "/storage", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "Study Corner": [
    { name: "Student Supplies", url: "/student", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Art Supplies", url: "/art", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Books", url: "/books", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Educational", url: "/educational", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "Paper & Pen Shop": [
    { name: "Premium Pens", url: "/pens", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Notebooks", url: "/notebooks", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Art Materials", url: "/art", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Planners", url: "/planners", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "The Paper Mill": [
    { name: "Notebooks", url: "/notebooks", icon: "Book", image: "https://placehold.co/150x150.png" },
    { name: "Writing Tools", url: "/writing-tools", icon: "PenTool", image: "https://placehold.co/150x150.png" },
    { name: "Art Supplies", url: "/art-supplies", icon: "Paintbrush", image: "https://placehold.co/150x150.png" },
  ],
  "Garden Fresh Produce": [
    { name: "Fresh Fruits", url: "/fruits", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Vegetables", url: "/vegetables", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Leafy Greens", url: "/greens", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Herbs", url: "/herbs", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "Organic Harvest": [
    { name: "Organic Fruits", url: "/organicfruits", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Organic Vegetables", url: "/organicvegetables", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Organic Herbs", url: "/organicherbs", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Superfoods", url: "/superfoods", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "Fresh Farm Market": [
    { name: "Seasonal Fruits", url: "/seasonal", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Root Vegetables", url: "/roots", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Farm Fresh", url: "/farmfresh", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Local Produce", url: "/local", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "The Veggie Patch": [
    { name: "Leafy Greens", url: "/leafy-greens", icon: "Leaf", image: "https://placehold.co/150x150.png" },
    { name: "Root Vegetables", url: "/root-vegetables", icon: "Carrot", image: "https://placehold.co/150x150.png" },
    { name: "Organic Selection", url: "/organic-selection", icon: "Sprout", image: "https://placehold.co/150x150.png" },
  ],
  "Wonderful Gifts Boutique": [
    { name: "Birthday", url: "/birthday", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Anniversary", url: "/anniversary", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Wedding", url: "/wedding", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Holiday", url: "/holiday", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "Special Moments Store": [
    { name: "Personalized", url: "/personalized", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Custom Gifts", url: "/custom", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Luxury Items", url: "/luxury", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Gift Sets", url: "/sets", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "Gift Gallery": [
    { name: "Decorative", url: "/decorative", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
    { name: "Collectibles", url: "/collectibles", icon: "Coffee", image: "https://placehold.co/150x150.png" },
    { name: "Handmade", url: "/handmade", icon: "Zap", image: "https://placehold.co/150x150.png" },
    { name: "Unique Finds", url: "/unique", icon: "ShoppingBag", image: "https://placehold.co/150x150.png" },
  ],
  "The Gift Box": [
    { name: "For Him", url: "/for-him", icon: "User", image: "https://placehold.co/150x150.png" },
    { name: "For Her", url: "/for-her", icon: "User", image: "https://placehold.co/150x150.png" },
    { name: "Occasions", url: "/occasions", icon: "Calendar", image: "https://placehold.co/150x150.png" },
  ]
};


--- File: userapp\src\data\shops.ts ---


export interface Shop {
  id: number;
  name: string;
  description: string;
  rating: number;
  deliveryTime: string;
  image: string;
  category: string;
}

export const shops: Record<string, Shop[]> = {
  "Supermarket": [
    {
      id: 1,
      name: "FreshMart Supermarket",
      description: "Your one-stop destination for all grocery needs",
      rating: 4.8,
      deliveryTime: "20-30 min",
      image: "🏪",
      category: "Supermarket"
    },
    {
      id: 2,
      name: "MegaStore Plus",
      description: "Premium quality products at affordable prices",
      rating: 4.6,
      deliveryTime: "25-35 min",
      image: "🏬",
      category: "Supermarket"
    },
    {
      id: 3,
      name: "QuickMart Express",
      description: "Fast delivery and fresh products daily",
      rating: 4.7,
      deliveryTime: "15-25 min",
      image: "🛒",
      category: "Supermarket"
    },
    {
      id: 4,
      name: "GreenGrocer Market",
      description: "Organic and eco-friendly grocery store",
      rating: 4.9,
      deliveryTime: "30-40 min",
      image: "🌱",
      category: "Supermarket"
    },
    {
      id: 23,
      name: "Value Grocers",
      description: "All your daily needs at great value",
      rating: 4.5,
      deliveryTime: "25-30 min",
      image: "💰",
      category: "Supermarket"
    },
    {
      id: 24,
      name: "Corner Mart",
      description: "Your friendly neighborhood convenience store",
      rating: 4.6,
      deliveryTime: "10-20 min",
      image: "🏘️",
      category: "Supermarket"
    },
    {
      id: 31,
      name: "Demo Store",
      description: "A store for testing backend integration",
      rating: 5.0,
      deliveryTime: "1-5 min",
      image: "🧪",
      category: "Supermarket"
    }
  ],
  "Pharmacy": [
    {
      id: 5,
      name: "HealthCare Plus Pharmacy",
      description: "Trusted healthcare solutions and wellness products",
      rating: 4.9,
      deliveryTime: "10-20 min",
      image: "💊",
      category: "Pharmacy"
    },
    {
      id: 6,
      name: "MediQuick Pharmacy",
      description: "24/7 medical supplies and prescription services",
      rating: 4.7,
      deliveryTime: "15-25 min",
      image: "🏥",
      category: "Pharmacy"
    },
    {
      id: 7,
      name: "WellCare Drugstore",
      description: "Complete health and beauty care solutions",
      rating: 4.8,
      deliveryTime: "20-30 min",
      image: "⚕️",
      category: "Pharmacy"
    },
    {
      id: 25,
      name: "Community Pharmacy",
      description: "Caring for your family's health",
      rating: 4.8,
      deliveryTime: "15-25 min",
      image: "🧑‍⚕️",
      category: "Pharmacy"
    }
  ],
  "Meat": [
    {
      id: 8,
      name: "Prime Cuts Butchery",
      description: "Fresh, premium quality meats from local farms",
      rating: 4.8,
      deliveryTime: "25-35 min",
      image: "🥩",
      category: "Meat"
    },
    {
      id: 9,
      name: "Fresh Meat Market",
      description: "Halal certified fresh meat and poultry",
      rating: 4.6,
      deliveryTime: "30-40 min",
      image: "🍖",
      category: "Meat"
    },
    {
      id: 10,
      name: "Butcher's Choice",
      description: "Artisan cuts and specialty meat products",
      rating: 4.9,
      deliveryTime: "35-45 min",
      image: "🔪",
      category: "Meat"
    },
    {
      id: 26,
      name: "The Meat Co.",
      description: "Finest selection of meats and poultry",
      rating: 4.7,
      deliveryTime: "30-40 min",
      image: "🐔",
      category: "Meat"
    }
  ],
  "Electronics": [
    {
      id: 11,
      name: "TechWorld Electronics",
      description: "Latest gadgets and electronic devices",
      rating: 4.7,
      deliveryTime: "45-60 min",
      image: "📱",
      category: "Electronics"
    },
    {
      id: 12,
      name: "Digital Hub Store",
      description: "Computers, smartphones and accessories",
      rating: 4.8,
      deliveryTime: "40-50 min",
      image: "💻",
      category: "Electronics"
    },
    {
      id: 13,
      name: "Gadget Galaxy",
      description: "Smart home devices and gaming equipment",
      rating: 4.6,
      deliveryTime: "50-70 min",
      image: "🎮",
      category: "Electronics"
    },
    {
      id: 27,
      name: "Electro Zone",
      description: "Your zone for all things electronic",
      rating: 4.6,
      deliveryTime: "60-90 min",
      image: "💡",
      category: "Electronics"
    }
  ],
  "Stationary": [
    {
      id: 14,
      name: "Office Essentials Store",
      description: "Complete range of office and school supplies",
      rating: 4.5,
      deliveryTime: "30-40 min",
      image: "📝",
      category: "Stationary"
    },
    {
      id: 15,
      name: "Study Corner",
      description: "Student supplies and educational materials",
      rating: 4.7,
      deliveryTime: "25-35 min",
      image: "📚",
      category: "Stationary"
    },
    {
      id: 16,
      name: "Paper & Pen Shop",
      description: "Premium writing instruments and paper products",
      rating: 4.8,
      deliveryTime: "35-45 min",
      image: "✏️",
      category: "Stationary"
    },
    {
      id: 28,
      name: "The Paper Mill",
      description: "Fine papers, notebooks, and writing tools",
      rating: 4.7,
      deliveryTime: "20-30 min",
      image: "📄",
      category: "Stationary"
    }
  ],
  "Fruits & Vegetables": [
    {
      id: 17,
      name: "Garden Fresh Produce",
      description: "Farm-fresh fruits and vegetables delivered daily",
      rating: 4.9,
      deliveryTime: "20-30 min",
      image: "🥕",
      category: "Fruits & Vegetables"
    },
    {
      id: 18,
      name: "Organic Harvest",
      description: "100% organic fruits and vegetables",
      rating: 4.8,
      deliveryTime: "25-35 min",
      image: "🥬",
      category: "Fruits & Vegetables"
    },
    {
      id: 19,
      name: "Fresh Farm Market",
      description: "Locally sourced seasonal produce",
      rating: 4.7,
      deliveryTime: "30-40 min",
      image: "🍅",
      category: "Fruits & Vegetables"
    },
    {
      id: 29,
      name: "The Veggie Patch",
      description: "The best local and exotic vegetables",
      rating: 4.9,
      deliveryTime: "20-25 min",
      image: "🥦",
      category: "Fruits & Vegetables"
    }
  ],
  "Gifts": [
    {
      id: 20,
      name: "Wonderful Gifts Boutique",
      description: "Perfect gifts for every occasion and celebration",
      rating: 4.8,
      deliveryTime: "40-60 min",
      image: "🎁",
      category: "Gifts"
    },
    {
      id: 21,
      name: "Special Moments Store",
      description: "Personalized gifts and custom arrangements",
      rating: 4.9,
      deliveryTime: "60-90 min",
      image: "💝",
      category: "Gifts"
    },
    {
      id: 22,
      name: "Gift Gallery",
      description: "Unique gifts and decorative items",
      rating: 4.6,
      deliveryTime: "45-75 min",
      image: "🛍️",
      category: "Gifts"
    },
    {
      id: 30,
      name: "The Gift Box",
      description: "Curated boxes for every special person",
      rating: 4.8,
      deliveryTime: "30-50 min",
      image: "📦",
      category: "Gifts"
    }
  ]
};


--- File: userapp\src\functions\src\index.ts ---


import {onDocumentCreated, onDocumentUpdated} from "firebase-functions/v2/firestore";
import * as logger from "firebase-functions/logger";
import * as admin from "firebase-admin";

// Initialize the Admin SDK if it's not already initialized
if (admin.apps.length === 0) {
  admin.initializeApp();
}

/**
 * Sends a push notification to admins and logs messages for store/delivery
 * notifications when a new order is created.
 *
 * This function is now ACTIVE.
 */
export const onOrderCreated = onDocumentCreated("orders/{orderId}", async (event) => {
  logger.info(`Processing new order: ${event.params.orderId}`);

  const orderData = event.data?.data();
  if (!orderData) {
    logger.warn("New order document has no data.");
    return null;
  }
  
  const db = admin.firestore();

  // --- 1. Notify Admins ---
  try {
    const adminsQuery = db.collection('buyers').where('role', '==', 'admin');
    const adminsSnapshot = await adminsQuery.get();

    if (adminsSnapshot.empty) {
      logger.info("No admin users found to notify.");
    } else {
      // Collect all FCM tokens from all admin users
      const adminTokens: string[] = [];
      adminsSnapshot.forEach(doc => {
        const adminData = doc.data();
        if (adminData.fcmTokens && Array.isArray(adminData.fcmTokens)) {
          adminTokens.push(...adminData.fcmTokens);
        }
      });
      
      const uniqueTokens = [...new Set(adminTokens)];

      if (uniqueTokens.length > 0) {
        const message = {
          notification: {
            title: '🎉 New Order Received!',
            body: `Order #${event.params.orderId.slice(-6)} for ₹${orderData.total.toFixed(2)} has been placed.`,
          },
          tokens: uniqueTokens,
        };
        const response = await admin.messaging().sendEachForMulticast(message);
        logger.info(`Successfully sent new order notification to ${response.successCount} admin devices.`);
      } else {
        logger.info("Admin users found, but they have no FCM tokens.");
      }
    }
  } catch (error) {
    logger.error("Error sending notification to admins:", error);
  }


  // --- 2. Notify Store Managers ---
  // Get all unique shop names from the items in the order.
  const shopNames = [...new Set(orderData.items.map((item: any) => item.shopName))];
  logger.info(`Order involves ${shopNames.length} shop(s): ${shopNames.join(", ")}`);

  for (const shopName of shopNames) {
    // In a real app, you would look up the manager(s) for this shopName.
    // For example: db.collection('storeManagers').where('shopName', '==', shopName).get()
    // Then, get their FCM tokens and send a notification.
    logger.info(`TODO: Find and notify manager for shop: "${shopName}".`);
  }


  // --- 3. Notify Delivery Executives ---
  // This is where you would have logic to assign an available delivery executive.
  // For example, you might look for executives in a certain area who are 'idle'.
  logger.info("TODO: Assign a delivery executive and send them a notification with order details.");

  return null;
});


/**
 * Sends a push notification to a user when their order status is updated.
 *
 * This function is now ACTIVE.
 */
export const onOrderStatusUpdate = onDocumentUpdated("orders/{orderId}", async (event) => {
  logger.info(`Processing order update for: ${event.params.orderId}`);

  // Get the data before and after the change
  const beforeData = event.data?.before.data();
  const afterData = event.data?.after.data();

  // If there's no data, or status hasn't changed, we exit.
  if (!beforeData || !afterData || beforeData.status === afterData.status) {
    logger.info("No status change detected, exiting function.");
    return null;
  }

  const customerId = afterData.customerId;
  if (!customerId) {
    logger.warn("Order document is missing a customerId.");
    return null;
  }

  // Get the user's document to find their FCM token
  const db = admin.firestore();
  const userDocRef = db.collection("buyers").doc(customerId);
  const userDoc = await userDocRef.get();

  if (!userDoc.exists) {
    logger.error(`User document not found for customerId: ${customerId}`);
    return null;
  }

  // The fcmTokens field should be an array of strings in the buyer's document.
  // The client-side application is responsible for managing these tokens.
  const tokens = userDoc.data()?.fcmTokens;

  if (!tokens || !Array.isArray(tokens) || tokens.length === 0) {
    logger.info(`User ${customerId} has no FCM tokens. No notification sent.`);
    return null;
  }

  // Construct the notification message payload
  const payload = {
    notification: {
      title: "Your Order Status has Changed!",
      body: `Your order #${event.params.orderId.slice(-6)} is now "${afterData.status}".`,
    },
  };

  logger.info(`Sending notification to ${tokens.length} token(s) for user ${customerId}.`);

  try {
    // Send the notification using Firebase Cloud Messaging
    const response = await admin.messaging().sendToDevice(tokens, payload);
    logger.info("Successfully sent message:", response);

    // You could add logic here to clean up invalid tokens from the user's document
    // based on the response from FCM.

    return response;
  } catch (error) {
    logger.error("Error sending message:", error);
    return null;
  }
});


--- File: userapp\src\hooks\use-mobile.tsx ---

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  // Default to false on the server and initial client render.
  const [isMobile, setIsMobile] = React.useState(false)

  React.useEffect(() => {
    // This runs only on the client, after the initial render.
    const checkIsMobile = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }

    // Set the correct value on mount
    checkIsMobile()

    // Listen for window resize
    window.addEventListener("resize", checkIsMobile)

    // Clean up the event listener
    return () => window.removeEventListener("resize", checkIsMobile)
  }, []) // Empty dependency array ensures this runs only once on mount.

  return isMobile
}


--- File: userapp\src\hooks\use-service-worker.ts ---


'use client';

import { useEffect } from 'react';

// This hook is no longer used for registering the service worker.
// The registration is now handled on-demand by the getFcmToken function
// in `src/lib/firebase-messaging.ts` to ensure it's loaded as a module.
export function useServiceWorker() {
  useEffect(() => {
    if ('serviceWorker' in navigator) {
      console.log("useServiceWorker hook is running, but no longer registers the worker.");
    }
  }, []);
}


--- File: userapp\src\hooks\use-toast.ts ---

"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


--- File: userapp\src\lib\firebase-admin.ts ---

import * as admin from 'firebase-admin';

// This check prevents the app from being initialized multiple times.
if (!admin.apps.length) {
  try {
    const serviceAccountJson = process.env.FIREBASE_SERVICE_ACCOUNT_JSON;
    if (!serviceAccountJson) {
      throw new Error('Firebase service account JSON is not defined in environment variables. Please check your .env.local file.');
    }
    const serviceAccount = JSON.parse(serviceAccountJson);
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
    });
    console.log("Firebase Admin SDK initialized successfully.");
  } catch (error: any) {
    // This will log a detailed error to the server console if initialization fails.
    console.error('CRITICAL: Firebase admin initialization error.', error.stack);
  }
}

// These are exported and can be used in any server-side code.
export const adminAuth = admin.auth();
export const adminDb = admin.firestore();
export default admin;


--- File: userapp\src\lib\firebase-messaging.ts ---


'use client';
import { getMessaging, getToken } from "firebase/messaging";
import { app } from './firebase';

export const getFcmToken = async () => {
    try {
        if (typeof window === "undefined" || !("Notification" in window) || !("serviceWorker" in navigator)) {
            console.error("Browser does not support notifications or service workers.");
            throw new Error("This browser does not support desktop notification");
        }

        const swRegistration = await navigator.serviceWorker.register('/firebase-messaging-sw.js');
        const messaging = getMessaging(app);
        const permission = await Notification.requestPermission();
        
        if (permission === 'granted') {
          const vapidKey = "BCt-utXGr6c5qQNL2pSe8T6he1lFKNCWtIaX-P4_yfmwSVhBjh0H9xcYE729gcTUQe357nAQLvd_tnqq2FlONjs";
          if (!vapidKey) {
            console.error("VAPID key is not set!");
            throw new Error("Application is not configured for notifications.");
          }

          const currentToken = await getToken(messaging, { 
            vapidKey: vapidKey,
            serviceWorkerRegistration: swRegistration,
          });
            
          if (currentToken) {
            return currentToken;
          } else {
            console.error('No registration token available. Request permission to generate one.');
            throw new Error('No registration token available. Request permission to generate one.');
          }
        } else {
          console.error('Notification permission DENIED.');
          throw new Error('Permission for notifications was not granted.');
        }
    } catch (err) {
        console.error('An error occurred while retrieving token.', err);
        throw new Error('Failed to get FCM token.');
    }
};


--- File: userapp\src\lib\firebase.ts ---

'use client';
// This file is for CLIENT-SIDE Firebase connections.

import { initializeApp, getApps, getApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore";

// TODO: Paste your web app's Firebase configuration below
const firebaseConfig = {
  apiKey: "AIzaSyCIblv8OkA9hv9NCllG1mumZmXmGJaeILs",
  authDomain: "react-nav-gtr1f.firebaseapp.com",
  projectId: "react-nav-gtr1f",
  storageBucket: "react-nav-gtr1f.appspot.com",
  messagingSenderId: "234776531584",
  appId: "1:234776531584:web:5ea78e9c8a418dcd8b4c65",
  measurementId: "G-7DRLKZ07SP"
};

// Initialize Firebase
const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();
const auth = getAuth(app);
const db = getFirestore(app);

export { app, auth, db };


--- File: userapp\src\lib\iconMapper.ts ---


import { 
  ShoppingCart, 
  Pill, 
  Beef, 
  Smartphone, 
  PenTool, 
  Apple, 
  Gift, 
  ShoppingBag,
  Coffee,
  Zap,
  Flame,
  Fish,
  Shell,
  PiggyBank,
  Home,
  Camera,
  Book,
  Paintbrush,
  Leaf,
  Carrot,
  Sprout,
  User,
  Calendar,
  LogOut,
  Heart,
  BookUser,
  Wallet,
  MessageSquare,
  Bell,
  Info,
  Star,
  WalletCards,
  type LucideIcon 
} from 'lucide-react';

const iconMap: Record<string, LucideIcon> = {
  ShoppingCart,
  Pill,
  Beef,
  Smartphone,
  PenTool,
  Apple,
  Gift,
  ShoppingBag,
  Coffee,
  Zap,
  Fish,
  Shell,
  PiggyBank,
  Flame,
  Home,
  Camera,
  Book,
  Paintbrush,
  Leaf,
  Carrot,
  Sprout,
  User,
  Calendar,
  LogOut,
  Heart,
  BookUser,
  Wallet,
  MessageSquare,
  Bell,
  Info,
  Star,
  WalletCards,
};

export const getIcon = (iconName: string): LucideIcon => {
  return iconMap[iconName] || Flame;
};


--- File: userapp\src\lib\utils.ts ---

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


--- File: userapp\src\services\dataService.ts ---


import { shops, type Shop } from '@/data/shops';
import { shopCategories, type ShopCategory } from '@/data/shopCategories';
import { products, type Product } from '@/data/products';
import { categories, superSaverCategories, type NavItem } from '@/data/categories';

const delay = (ms: number) => new Promise(res => setTimeout(res, ms));

export class DataService {
  static async getCategories(): Promise<NavItem[]> {
    await delay(50);
    return categories;
  }

  static async getSuperSaverCategories(): Promise<NavItem[]> {
    await delay(50);
    return superSaverCategories;
  }
  
  static async getShopsByCategory(category: string): Promise<Shop[]> {
    await delay(100);
    return shops[category] || [];
  }

  static async getAllShops(): Promise<Shop[]> {
    await delay(50);
    return Object.values(shops).flat();
  }
  
  static async getShopByName(shopName: string): Promise<Shop | undefined> {
    await delay(50);
    const allShops = Object.values(shops).flat();
    return allShops.find(s => s.name === shopName);
  }

  static async getShopCategories(shopName: string): Promise<ShopCategory[]> {
    await delay(100);
    return shopCategories[shopName] || [];
  }

  static async getProducts(shopName: string, categoryName: string): Promise<Product[]> {
    await delay(150);
    if (products[shopName] && products[shopName][categoryName]) {
      return products[shopName][categoryName];
    }
    return [];
  }
}


--- File: userapp\src\store\authStore.ts ---


'use client';

import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import type { CartItem } from './cartStore';
import { auth, db } from '@/lib/firebase'; // Import client-side auth
import { signInWithEmailAndPassword, onIdTokenChanged, type Unsubscribe } from 'firebase/auth';
import { collection, doc, getDoc, getDocs, query, where, updateDoc, arrayUnion, arrayRemove, onSnapshot } from "firebase/firestore";
import { getFcmToken } from '@/lib/firebase-messaging';

export interface Address {
  id: string;
  name: string; // e.g. "Home", "Work"
  address: string; // Formatted address string
  latitude: number | null;
  longitude: number | null;
}

export interface Order {
    id: string;
    date: string;
    status: 'Processing' | 'Shipped' | 'Out for Delivery' | 'Delivered' | 'Completed';
    items: CartItem[];
    total: number;
    shippingAddress: Address;
    paymentMethod: string;
    estimatedDelivery: string;
    customerPhone: string;
    customerId?: string;
}

interface User {
  uid: string;
  name: string;
  email: string;
  phone: string;
  addresses: Address[];
  orders: Order[];
  fcmTokens?: string[];
}

interface AuthState {
  isLoggedIn: boolean;
  isLoading: boolean;
  user: User | null;
  selectedAddressId: string | null;
  login: (email: string, password:string) => Promise<boolean>;
  register: (name: string, email: string, phone: string, password: string) => Promise<{ success: boolean; message: string | null }>;
  logout: () => void;
  addAddress: (address: Omit<Address, 'id'>) => Promise<boolean>;
  updateAddress: (addressId: string, addressData: Omit<Address, 'id'>) => Promise<boolean>;
  deleteAddress: (addressId: string) => Promise<boolean>;
  selectAddress: (addressId: string) => void;
  placeOrder: (orderDetails: Omit<Order, 'id' | 'date' | 'status' | 'estimatedDelivery'>) => Promise<string | null>;
  initFcm: () => Promise<void>;
  listenForAuthChanges: () => () => void;
}


// Function to set the session cookie
const setSessionCookie = async (idToken: string) => {
  await fetch('/api/auth/session', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ idToken }),
  });
};

// Function to clear the session cookie
const clearSessionCookie = async () => {
  await fetch('/api/auth/session', { method: 'DELETE' });
};

// Variable to hold the real-time listener unsubscribe function
let userUnsubscribe: Unsubscribe | null = null;
let ordersUnsubscribe: Unsubscribe | null = null;
let authUnsubscribe: Unsubscribe | null = null;


export const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      isLoggedIn: false,
      isLoading: true,
      user: null,
      selectedAddressId: null,
      
      listenForAuthChanges: () => {
        if (authUnsubscribe) {
          authUnsubscribe();
          authUnsubscribe = null;
        }

        authUnsubscribe = onIdTokenChanged(auth, async (firebaseUser) => {
          if (userUnsubscribe) userUnsubscribe();
          if (ordersUnsubscribe) ordersUnsubscribe();
          userUnsubscribe = null;
          ordersUnsubscribe = null;
          
          if (firebaseUser) {
            set({ isLoading: true });
            const idToken = await firebaseUser.getIdToken();
            await setSessionCookie(idToken);
            
            const tokenResult = await firebaseUser.getIdTokenResult();
            if (tokenResult.claims.role !== 'buyer') {
              console.warn("User does not have 'buyer' role. Logging out.");
              await get().logout();
              set({ isLoading: false });
              return;
            }

            const buyerDocRef = doc(db, "buyers", firebaseUser.uid);
            userUnsubscribe = onSnapshot(buyerDocRef, (docSnapshot) => {
                if (docSnapshot.exists()) {
                    const buyerData = docSnapshot.data();
                    const currentOrders = get().user?.orders || [];
                    
                    const userToStore: User = {
                        uid: firebaseUser.uid,
                        name: buyerData.name,
                        email: buyerData.email,
                        phone: buyerData.phone,
                        addresses: buyerData.addresses || [],
                        orders: currentOrders,
                        fcmTokens: buyerData.fcmTokens || [],
                    };

                    let newSelectedAddressId = get().selectedAddressId;
                    if (!newSelectedAddressId && userToStore.addresses.length > 0) {
                        newSelectedAddressId = userToStore.addresses[0].id;
                    }

                    set({ isLoggedIn: true, user: userToStore, selectedAddressId: newSelectedAddressId, isLoading: false });
                } else {
                    console.warn("Buyer document not found in Firestore. Logging out.");
                    get().logout();
                    set({ isLoading: false });
                }
            }, (error) => {
                console.error("Error listening to buyer document:", error);
                set({ isLoading: false });
            });

            const ordersQuery = query(collection(db, "orders"), where("customerId", "==", firebaseUser.uid));
            ordersUnsubscribe = onSnapshot(ordersQuery, (querySnapshot) => {
                const orders = querySnapshot.docs.map(doc => doc.data() as Order);
                set(state => {
                  if (state.user) {
                    return { user: { ...state.user, orders } };
                  }
                  return {};
                });
            }, (error) => {
                console.error("Error listening to orders collection:", error);
            });

          } else {
            // User logged out
            await clearSessionCookie();
            set({ isLoggedIn: false, user: null, selectedAddressId: null, isLoading: false });
          }
        });
        return authUnsubscribe;
      },
      
      initFcm: async () => {
        const currentUser = auth.currentUser;
        if (!currentUser) {
            console.error("authStore: initFcm - User is not logged in. Cannot initialize FCM.");
            throw new Error("User is not logged in. Cannot initialize FCM.");
        };
        
        try {
            const token = await getFcmToken();

            if (token) {
                const userDocRef = doc(db, 'buyers', currentUser.uid);
                
                // Use arrayUnion to add the token. It's safe and prevents duplicates.
                await updateDoc(userDocRef, {
                    fcmTokens: arrayUnion(token)
                });
            } else {
                console.error("authStore: getFcmToken did not return a token.");
            }
        } catch (error: any) {
            console.error("authStore: CRITICAL - Error during FCM initialization or DB update:", error);
            throw error;
        }
      },

      login: async (email, password) => {
        set({ isLoading: true });
        try {
          const userCredential = await signInWithEmailAndPassword(auth, email, password);
          return !!userCredential.user;
        } catch (error) {
          console.error("Firebase login error:", error);
          set({ isLoading: false });
          return false;
        }
      },
      
      register: async (name, email, phone, password) => {
        set({ isLoading: true });
        try {
            const response = await fetch('/api/auth/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name, email, phone, password }),
            });

             const resultData = await response.json();

            if (response.ok) {
                await signInWithEmailAndPassword(auth, email, password);
                return { success: true, message: null };
            } else {
                set({ isLoading: false });
                return { success: false, message: resultData.message || 'Registration failed.' };
            }
        } catch (error) {
            console.error('Registration fetch error:', error);
            set({ isLoading: false });
            return { success: false, message: 'An unexpected error occurred.' };
        }
      },

      logout: async () => {
        await auth.signOut();
      },

      addAddress: async (address) => {
        const currentUser = auth.currentUser;
        if (!currentUser) return false;

        try {
          const token = await currentUser.getIdToken();
          const response = await fetch('/api/user/addresses', {
              method: 'POST',
              headers: { 
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`,
              },
              body: JSON.stringify(address),
          });

          if (!response.ok) {
              console.error("Failed to save address to backend");
              return false;
          }

          const newAddress: Address = await response.json();

          // The onSnapshot listener will handle the state update automatically
          set({ selectedAddressId: newAddress.id });
          return true;

        } catch (error) {
            console.error("Error adding address:", error);
            return false;
        }
      },
      
      updateAddress: async (addressId, addressData) => {
        const currentUser = auth.currentUser;
        if (!currentUser) return false;

        try {
            const token = await currentUser.getIdToken();
            const response = await fetch(`/api/user/addresses/${addressId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                },
                body: JSON.stringify(addressData),
            });

            if (!response.ok) {
                console.error("Failed to update address on backend");
                return false;
            }
            
            // The onSnapshot listener will handle the state update automatically.
            return true;
        } catch (error) {
            console.error("Error updating address:", error);
            return false;
        }
      },

      deleteAddress: async (addressId: string) => {
        const currentUser = auth.currentUser;
        if (!currentUser) return false;

        try {
            const token = await currentUser.getIdToken();
            const response = await fetch(`/api/user/addresses/${addressId}`, {
                method: 'DELETE',
                 headers: {
                    'Authorization': `Bearer ${token}`,
                },
            });

            if (!response.ok) {
                console.error("Failed to delete address on backend");
                return false;
            }
            
            // onSnapshot will handle the state update, but we need to adjust the selected address if it was deleted.
            if (get().selectedAddressId === addressId) {
                const addresses = get().user?.addresses || [];
                const newSelectedId = addresses.length > 0 ? addresses[0].id : null;
                set({ selectedAddressId: newSelectedId });
            }

            return true;
        } catch (error) {
            console.error("Error deleting address:", error);
            return false;
        }
      },

      selectAddress: (addressId) => {
        set({ selectedAddressId: addressId });
      },

      placeOrder: async (orderDetails) => {
        const currentUser = auth.currentUser;
        const { user } = get();
        if (!currentUser || !user) return null;

        try {
            const token = await currentUser.getIdToken();
            const response = await fetch('/api/orders', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                },
                body: JSON.stringify(orderDetails),
            });

            if (!response.ok) {
                const errorBody = await response.json();
                console.error("Failed to place order:", errorBody.message);
                return null;
            }

            const { orderId } = await response.json();
            
            // onSnapshot listener will automatically pick up the new order
            return orderId;

        } catch (error) {
            console.error("Error placing order:", error);
            return null;
        }
      },
    }),
    {
      name: 'auth-storage',
      storage: createJSONStorage(() => localStorage),
      partialize: (state) => ({ 
          isLoggedIn: state.isLoggedIn, 
          selectedAddressId: state.selectedAddressId
      }),
    }
  )
);

// Initialize the auth listener when the store is created
useAuthStore.getState().listenForAuthChanges();


--- File: userapp\src\store\cartStore.ts ---

import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import type { Product } from '@/data/products';

export interface CartItem extends Product {
  quantity: number;
}

export interface ShopCart {
  shopName: string;
  shopCategory: string;
  items: CartItem[];
  totalItems: number;
  totalPrice: number;
}

interface MultiCartState {
  carts: { [shopName: string]: ShopCart };
  isOpen: boolean;
  lastActivityShop: string | null;
  toggleCart: () => void;
  setCartOpen: (isOpen: boolean) => void;
  addItem: (product: Product) => void;
  updateQuantity: (productId: string, shopName: string, quantity: number) => void;
  clearCart: (shopName: string) => void;
  clearAllCarts: () => void;
}

const calculateShopCartTotals = (items: CartItem[]) => {
  const totalItems = items.reduce((sum, item) => sum + item.quantity, 0);
  const totalPrice = items.reduce((sum, item) => sum + item.price * item.quantity, 0);
  return { totalItems, totalPrice };
};

export const useCartStore = create<MultiCartState>()(
  persist(
    (set) => ({
      carts: {},
      isOpen: false,
      lastActivityShop: null,

      toggleCart: () => set((state) => ({ isOpen: !state.isOpen })),
      setCartOpen: (isOpen) => set({ isOpen }),
      
      addItem: (product) => {
        set((state) => {
          const { shopName, shopCategory } = product;
          
          const originalShopCart = state.carts[shopName];
          
          const newItems = originalShopCart
            ? originalShopCart.items.find(p => p.id === product.id)
              ? originalShopCart.items.map(p => p.id === product.id ? { ...p, quantity: p.quantity + 1 } : p)
              : [...originalShopCart.items, { ...product, quantity: 1 }]
            : [{ ...product, quantity: 1 }];

          const { totalItems, totalPrice } = calculateShopCartTotals(newItems);
          
          const newShopCart = {
            shopName,
            shopCategory,
            items: newItems,
            totalItems,
            totalPrice,
          };
          
          const newCarts = {
            ...state.carts,
            [shopName]: newShopCart,
          };

          return { carts: newCarts, lastActivityShop: shopName };
        });
      },
    
      updateQuantity: (productId, shopName, quantity) => {
        set((state) => {
          const originalShopCart = state.carts[shopName];
          if (!originalShopCart) return {};

          // Create a new items array by updating quantity, then filtering out any with quantity <= 0
          const newItems = originalShopCart.items
            .map(item => item.id === productId ? { ...item, quantity } : item)
            .filter(item => item.quantity > 0);

          // If the new items list is empty, this shop cart should be removed.
          if (newItems.length === 0) {
            const newCarts = { ...state.carts };
            delete newCarts[shopName];
            const remainingShopKeys = Object.keys(newCarts);
            const lastActivityShop = remainingShopKeys.length > 0 ? remainingShopKeys[remainingShopKeys.length - 1] : null;
            return { carts: newCarts, lastActivityShop, isOpen: remainingShopKeys.length > 0 };
          }

          // Otherwise, update the shop cart with the new items list.
          const { totalItems, totalPrice } = calculateShopCartTotals(newItems);
          const newShopCart = {
            ...originalShopCart,
            items: newItems,
            totalItems,
            totalPrice,
          };
          const newCarts = {
            ...state.carts,
            [shopName]: newShopCart,
          };

          return { carts: newCarts, lastActivityShop: shopName };
        });
      },
    
      clearCart: (shopName) => {
        set((state) => {
          // Create a new carts object with the specified shop removed.
          const newCarts = { ...state.carts };
          delete newCarts[shopName];
          const remainingShopKeys = Object.keys(newCarts);
          const lastActivityShop = remainingShopKeys.length > 0 ? remainingShopKeys[remainingShopKeys.length - 1] : null;
          return { carts: newCarts, lastActivityShop, isOpen: remainingShopKeys.length > 0 };
        });
      },
    
      clearAllCarts: () => set({ carts: {}, lastActivityShop: null, isOpen: false }),
    }),
    {
      name: 'multi-cart-storage',
      storage: createJSONStorage(() => localStorage),
      partialize: (state) => ({ carts: state.carts, lastActivityShop: state.lastActivityShop }),
    }
  )
);


--- File: userapp\src\store\superSaverStore.ts ---

import { create } from 'zustand';

interface SuperSaverState {
  isSuperSaver: boolean;
  toggleSuperSaver: () => void;
  setSuperSaver: (value: boolean) => void;
}

export const useSuperSaverStore = create<SuperSaverState>((set) => ({
  isSuperSaver: false, // Default state is off
  toggleSuperSaver: () => set((state) => ({ isSuperSaver: !state.isSuperSaver })),
  setSuperSaver: (value) => set({ isSuperSaver: value }),
}));


